<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>PARENT_rightColumnContent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create event
event_inherited();

colorValueList = ds_list_create();
drawnList = ds_list_create();
rightColumnWindowHeaderHeight = global.rightColumnWindowHeaderHeight;   // header area height
global.itemsScroll = 0;                                                 // how far we have scrolled horizontally

/* Scrollbar Vars */
width               = global.scrollbarButtonSize;
buttonHeight        = global.scrollbarButtonSize;
separation          = global.warnings_separation;
size                = ds_list_size(global.COMMON_ITEMS);

scrollAreaStartX    = (global.rightColumnWindowsX2 - global.scrollbarButtonSize);
scrollAreaStartY    = (global.itemsWindowY1 + global.scrollbarButtonSize);
scrollAreaEndY      = (global.itemsWindowY2 - global.scrollbarButtonSize);
scrollAreaHeight    = (scrollAreaEndY - scrollAreaStartY);

scrollSpeed         = global.scrollSpeed;
minHeight           = global.scrollbarMinHeight;
mouseOver           = false;
dragging            = false;
scrollbarShown      = false;

scrollAreaStartX    = global.rightColumnWindowsX1+width;
scrollAreaEndX      = global.rightColumnWindowsX2-width;
scrollAreaWidth     = (scrollAreaEndX - scrollAreaStartX);

delayBeforeButtonRepeat = -1;

charWidth           = global.estimatedCharacterWidth;

// initialize vars to avoid crashing when loading (whhyyyyy!)
maxShown            = 0;


//instance_create(x+width,scrollAreaEndY-buttonHeight,items_SCROLLBAR_H);
instance_create(x,scrollAreaStartY-buttonHeight,items_ScrollUp);
instance_create(x,scrollAreaEndY+1,items_ScrollDown);

oldItemNumber = 0;
clickTime = 0;          // used to compare the current second against the first click
doubleClickTime  = global.doubleClickTime;

colorBinary = false;
carriedOver = false;

// start the step event
alarm[0] = 2;
items_SCROLLBAR.alarm[7] = 10;

// INITIALIZE
height = 1;
previousTooltipsString = ""; // used for common_items_tooltips();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update colorValueList
ds_list_clear(colorValueList)
var colorValue = 0;
var list = drawnList;

for(var i=0; i&lt;ds_list_size(list);i++)
{
    var str = ds_list_find_value(list,i);
    
    if string_count(";",str) == 0
    then colorValue = !colorValue;
    
    ds_list_add(colorValueList,colorValue);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// find  scrollAreaHeight
/* Note that the scroll area height doesn't take 
 * the scrollbar height into consideration. To get
 * the scrollable distance, you need to subtract
 * height from scrollAreaHeight.
*/

if (instance_exists(items_SCROLLBAR_H))
and (items_SCROLLBAR_H.scrollbarShown) // if the horizontal scrollbar is active
 then scrollAreaEndY = (global.itemsWindowY2 - (buttonHeight*2));
 else scrollAreaEndY = (global.itemsWindowY2 - buttonHeight);

scrollAreaStartY     = (global.itemsWindowY1 + buttonHeight);
scrollAreaHeight     = (scrollAreaEndY - scrollAreaStartY);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// find  scrollAreaWidth and xposition

scrollAreaStartX    = global.rightColumnWindowsX1+width;
scrollAreaEndX      = global.rightColumnWindowsX2-width;
scrollAreaWidth     = (scrollAreaEndX - scrollAreaStartX);

///find  x position

scrollAreaStartX = (global.rightColumnWindowsX2 - global.scrollbarButtonSize);
scrollAreaEndX   = (scrollAreaStartX + width);
x = scrollAreaStartX;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update the list size/separate items onto multiple lines
var originList = global.COMMON_ITEMS;
var maxChars   = (scrollAreaWidth / charWidth);   // find the max characters we can display horizontally
if (global.GUI_SCALE != 1) then maxChars *= .75;
ds_list_clear(drawnList);



for(i=0; i&lt;ds_list_size(originList); i++)
{
    var str     = ds_list_find_value(originList,i);
    
    var strLen  = string_length(str);
    
    /// SPLIT LONG STRINGS INTO MULTIPLE LINES
    var str2 = "";
    if (strLen &gt; maxChars)
    {
        // try to find a position to break on
        var breakPosition = maxChars;
        for (var j = maxChars; j &gt; 0; j--)
        {
            if (string_char_at(str,j) == " ")
            {
                breakPosition = j;
                j = 0;
            }
        }
        
        
        str1  = string_copy(str,0,breakPosition);
        str2  = ";";                                    // so we know this line belongs to the previous item
        str2 += string_copy(str, breakPosition+1, string_length(str));
        
        ds_list_add(drawnList,str1);
        ds_list_add(drawnList,str2);
    }
    else ds_list_add(drawnList,str);                    // just add the whole string to the list
}


size = ds_list_size(drawnList);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// maxShown
var areaHeight      = (global.itemsWindowY2 - global.itemsWindowY1); //-10 otherwise there's sometimes an extra item that shouldn't be shown
maxShown            = floor(areaHeight / separation);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// find  height  of the scroll bar itself

/* setup */
var maxHeight = scrollAreaHeight;

textHeight  = ( size * separation );


// the scrollbar height
height = maxHeight / (textHeight / maxHeight);  // lovely bit of math.
height = floor(height);


// constrain the height
if (height &gt; maxHeight) then height = maxHeight;
if (height &lt; minHeight) then height = minHeight;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// position the scrollbar Y to the warning number
/* This is used to position the scrollbar to the current
 * warning number position after using the scroll wheel,
 * or when resizing the window, etc.
*/

if (dragging == false)
{
    // calculate the position of the scrollbar
    var scrollableDistance  = (scrollAreaHeight - height);                              // the scrollbar itself takes up an amount of the scroll area
    var adjustedTotal = 0;
    
    if (instance_exists(items_SCROLLBAR_H))
      then adjustedTotal    = ((size - maxShown) + items_SCROLLBAR_H.scrollbarShown);   // otherwise we get a window's worth of whitespace at the bottom of the list.
      else adjustedTotal    = (size - maxShown);   // otherwise we get a window's worth of whitespace at the bottom of the list.
    
    var percentagePosition  = (global.currentItemNumber / adjustedTotal);               // get the percentage
    
    var position            = floor(scrollableDistance * percentagePosition);           // the actual scrollbar position in pixels
    scrollbarPosition       = position;                                                 // needs to be a class var for dragging
    
    y  = (scrollAreaStartY + scrollbarPosition );                                       // y of the scrollbar itself
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset alarm[0]

alarm[0] = (room_speed/updateInterval);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scroll down the items

//if mouse_wheel_down()
//{
    if mouseOverArea
        (
        global.rightColumnWindowsX1,
        global.itemsWindowY1,
        global.rightColumnWindowsX2,
        global.itemsWindowY2
        )
    {
        var check = 0;
        
        if (instance_exists(items_SCROLLBAR_H))
          then check = ( global.currentItemNumber + (maxShown - items_SCROLLBAR_H.scrollbarShown) )
          else check = ( global.currentItemNumber + maxShown )
        
        
        if (check &lt; size)
        {
            global.currentItemNumber ++;
        }
    }
//}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scroll up the items

if mouseOverArea
    (
    global.rightColumnWindowsX1,
    global.itemsWindowY1,
    global.rightColumnWindowsX2,
    global.itemsWindowY2
    )
{
    if (global.currentItemNumber &gt; 0)
    {
        global.currentItemNumber --;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check if scrollbar should be displayed

if (size &gt; maxShown) 
and (scrollAreaHeight &gt; 30)
{
    scrollbarShown = true;
}
else {
    scrollbarShown = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// mouse hover and click events
if (scrollbarShown)
{

    // before dragging
    if (dragging == false)
    {
        // mouse is over the scrollbar itself
        if mouseOverScrollbar()
        {
            mouseOver = true;
            
            if mouse_check_button_pressed(mb_left)          // MOUSE CLICK ON BAR ITSELF
            {
                dragging = true;
                mouse_pos = (window_mouse_get_y() - y);
                global.MOUSE_FREE = false;
            }
        }
        
        // mouse is just over the scrollbar area
        else if mouseOverScrollArea()
        {
            if mouse_check_button_pressed(mb_left)          // MOUSE CLICK ON AREA
            {    
                y = window_mouse_get_y()-(height/2);        // center on the mouse
                
                constrain_scrollbar();
                
                if instance_exists(items_SCROLLBAR_H)
                  then global.currentItemNumber = get_current_item_from_scrollbar(true);
                  else global.currentItemNumber = get_current_item_from_scrollbar(false);
                
                exit;                                       // avoid running the dragging event
            }
        }
        
        // mouse over nothing
        else mouseOver = false;

    }
    

    // while dragging 
    if (dragging = true)
    {
        y = ( window_mouse_get_y() - mouse_pos );
        
        constrain_scrollbar();
        
        if instance_exists(items_SCROLLBAR_H)
          then global.currentItemNumber = get_current_item_from_scrollbar(true);
          else global.currentItemNumber = get_current_item_from_scrollbar(false);
    }
    
    
    // finished dragging
    if mouse_check_button_released(mb_left)
    {
        dragging = false;
        
        constrain_scrollbar();
        
        if instance_exists(items_SCROLLBAR_H)
          then global.currentItemNumber = get_current_item_from_scrollbar(true);
          else global.currentItemNumber = get_current_item_from_scrollbar(false);
        
        global.MOUSE_FREE = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the list contents and list click events
reset_text();
prevColor   = c_white;  // do not VAR! Class var needed for items_draw_background()
bgColor     = c_white;  // do not VAR! Class var needed for items_draw_background()
var strLen      = 0;
var list = drawnList;
draw_set_halign(fa_left);

/// FONT SIZE
if (global.GUI_SCALE == 1)
{
    draw_set_font(font_GUI);
}
else
{
    draw_set_font(font_GUI_large);
}

if (global.GUI_SCALE == 1)   then separation = 24;
if (global.GUI_SCALE == 1.5) then separation = 36;
//separation = (global.warnings_separation);


if (ds_list_size(list) &gt; 0)
{
    //reset_text();
    
    // POSITION THE ITEM TEXT
    xx = (global.rightColumnWindowsX1 + global.textMargin);
    var itemsHeaderY = (global.itemsWindowY1 - global.rightColumnWindowHeaderHeight);
    
    if (global.GUI_SCALE == 1) then yy = (itemsHeaderY + 40);                                                               // where the first item starts
    else yy = (itemsHeaderY +55);  
     
    textx = view_xview[0] + xx;
    texty = view_yview[0] + yy;
    
    // FIND maxDrawn
    var maxDrawn = 0;
    if (instance_exists(items_SCROLLBAR_H))
      then maxDrawn = (maxShown - items_SCROLLBAR_H.scrollbarShown);                       // how many items to draw at once (we no longer need SCROLLBAR_H)
      else maxDrawn = maxShown;                                                            // how many items to draw at once (we no longer need SCROLLBAR_H)
    
    
    // DRAW THE ITEMS
    for(i=0; i&lt;(maxDrawn); i++)
    {
        var carryingOver = false;
        var carriedOver  = false;
        var visibleIndex = (global.currentItemNumber + i);          // the current item
        
        var str1         = ds_list_find_value(list,visibleIndex);   // the list item we want to draw
        
        
        if !(is_undefined(str1))
        {
        
            if (string_count(";", str1) &gt; 0)                        // is this string split from a previous item?
            {
                carriedOver = true;
            }
            
            // Change text to "  ..." when not scrolled down the list fully
            /*
            if  ( visibleIndex &lt; (ds_list_size(list)-1) )
            and ( i == (maxDrawn-1) )
            {
                str1 = SCROLLDOWN_MESSAGE;
            }
            */
            
            
            
            // FIND X AND Y VALUES
            xx2 = (global.rightColumnWindowsX2 - width);
            yy1 = (yy  + ((i-1) *separation));                  // our row border start
            yy2 = (yy  + ((i)   *separation));                  // our row border end
            
            
            var lines           = 0;
            var linesBack       = 0;
            var linesForward    = 0;
            
            if (carriedOver == true)
            {
                yy1 -= separation;              // multi line items start on the previous row
            }

            
            // DRAW BACKGROUND COLOUR
            if (carriedOver == false)
            {
                items_draw_background(str1);
            }
            
            
            // FINALLY DRAW THE LIST TEXT
            draw_set_font(font_GUI);
            if global.GUI_SCALE != 1 then draw_set_font(font_GUI_large);
            draw_set_color(global.itemTextColor);
            
            tempString = str1;
            
            /// DRAW ARROWS and INDENTS
            var theY = ( texty + (i*separation) );
            if (carriedOver == true)
            or (tempString == SCROLLDOWN_MESSAGE)
            {
                tempString = string_delete(tempString,1,1); // remove the ; before drawing
                draw_text(textx + string_width("    "), theY, tempString); //if (i &lt; size) then  
                //draw_sprite(spr_items_arrow,0,textx,theY);
            }
            else
            {
                draw_text(textx, theY, "    " +string(tempString)); //if (i &lt; size) then  
                var addition = 4;
                if (global.GUI_SCALE != 1) then addition = 12;
                draw_sprite(spr_items_arrow, 0, textx, (theY + addition) - separation);
            }
            
            
            
            
            // CLICKING (Create Item)
            if  (str1 != SCROLLDOWN_MESSAGE)
            and (str1 != SCROLLUP_MESSAGE)
            {

                if ( mouseOverCommonItem(xx, yy1, xx2, yy2) )
                {
                    highlightButtonArea(view_xview[0]+xx, view_yview[0]+yy1, view_xview[0]+xx2, view_yview[0]+yy2)
                    
                    str = reassemble_string(str1, visibleIndex, list, carriedOver);     // reassemble them
                    
                    //show_debug_message("str after reassembly = " +string(str));
                    
                    
                    tooltip(str);  // show a tooltip for items
                    
                    if ( mouse_check_button_released(mb_left) )
                    {
                        if (global.TIMER &lt;= (clickTime + doubleClickTime))                              // check for double-click
                        {
                            // SUCCESS
                            if ((i+global.currentItemNumber) == oldItemNumber)                          // the user has clicked on the same list item twice
                            {
                                //show_message("trying to create " +string(str));
                                create_COMMON_ITEM(str);
                                
                                clickTime = 0;                                                          // reset clickTime so a 3rd click doesn't trigger this event//current_time;
                            }
                            else                                                                        // the user has clicked on a different item on the list
                            {
                                oldItemNumber = (i+global.currentItemNumber);                           // so clicking two items on the list in quick sucession doesn't register as a double-click on the 2nd.
                                mouse_clear(mb_left);
                                clickTime = (get_timer() / 1000);                                       // setup for double-click
                            }
                        }
                        else 
                        {
                            oldItemNumber = (i+global.currentItemNumber);                               // so clicking two items on the list in quick sucession doesn't register as a double-click on the 2nd.
                            mouse_clear(mb_left);
                            clickTime = (get_timer() / 1000);                                           // setup for double-click
                        }
                    }
                }
                //else previousTooltipsString = ""; // reset the tooltips timer
            }
        }
    }  
}

// CLEANUP
//ds_list_destroy(list);
reset_text();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW SCROLLBAR 

/// draw rectangle bg to hide text overlapping scrollbar
draw_set_color(global.guiColor);
draw_rectangle(view_xview[0]+scrollAreaStartX,view_yview[0]+scrollAreaStartY,view_xview[0]+window_get_width(),view_yview[0]+scrollAreaEndY,false)


/// draw the scroll bar
if ( scrollbarShown )
{
    if mouseOver == true
    {
        draw_set_color(global.scrollbarColorDark) // dark gray
    }
    else
    {
        draw_set_color(global.scrollbarColorLight) // light gray
    }
    
    draw_rectangle(view_xview[0]+x, view_yview[0]+y, view_xview[0]+(x+width), view_yview[0]+(y+height), 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
