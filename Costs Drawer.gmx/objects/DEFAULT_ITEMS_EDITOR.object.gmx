<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// setup positions and spawn buttons
rowHeight     = global.rowHeight;

// initialize
defDescIndex    = 0;
newDescIndex    = 1;
defValueIndex   = 2;
newValueIndex   = 3;
customDescriptionIndex  = 0;
customOutlayIndex       = 1;
customProfessionalIndex = 2;
highlight_color = make_color_rgb(128,128,255);
rowAlpha        = 0.3;


// setup
array = 0;    // used for custom items
if (global.BILL_COURT == "Circuit")
  then array = global.arrayOfCicruitCourtCustomItemValues;
  else array = global.arrayOfHighCourtCustomItemValues;


defaultItemsArray       = 0;    // will be used for default items
copiedArrayPart1[0]     = 0;    // used for deleting entries, etc.
copiedArrayPart2[0]     = 0;
indexSelected           = -1;
fieldSelected           = 0;
descriptionFieldIndex   = 0;
defaultValueFieldIndex  = 1;
newValueFieldIndex      = 2;
outlayValueFieldIndex   = 1;
professionalValueFieldIndex = 2;
lastField               = 2;
size                    = array_height_2d(array);
lastIndex               = (size-1);
maxItemsShowable        = 29;          // floor((700 / rowHeight));
startingIndex           = 0;
//show_message("maxItemsShowable = "+string(maxItemsShowable));

setup_clickTimer(); // for double-clicking checks



windowX1        = 10;
windowX2        = 740;
windowY1        = 10;
windowY2        = (windowY1 + (rowHeight*30));
footerHeight    = 50;
footerY1        = windowY2;
footerY2        = (windowY2 + footerHeight);


quantumColumnWidth      = 120;
defaultValueColumnX     = (windowX2 - quantumColumnWidth);
newValueColumnX         = (defaultValueColumnX - quantumColumnWidth);
professionalColumnX     = (windowX2 - quantumColumnWidth);
outlayColumnX           = (professionalColumnX - quantumColumnWidth);
descriptionColumnWidth  = (newValueColumnX - windowX1);
descriptionColumnX      = windowX1;
descriptionColumnEndX   = (newValueColumnX - quantumColumnWidth);


margin = 5;
defaultValueTextX       = ((defaultValueColumnX + quantumColumnWidth) - margin);
newValueTextX           = ((newValueColumnX     + quantumColumnWidth) - margin);
outlayTextX             = ((outlayColumnX + quantumColumnWidth) - margin);
professionalTextX       = ((professionalColumnX + quantumColumnWidth) - margin);

descriptionTextX        = (windowX1 + margin);
descriptionTextWidth    = ((newValueColumnX - descriptionTextX) - margin);
headerY                 = (windowY1 + rowHeight);        // the headers
outlayProfessionalY     = (headerY + (rowHeight*1));     // where the "Outlay Prof." header text goes
listStartY              = (headerY + (rowHeight*1));     // where the items start

customHeaderY           = (windowY1 + rowHeight*16);     // the headers
customListStartY        = (customHeaderY + rowHeight);   // where the custom items start
headerDescriptionX      = (newValueColumnX / 2);
headerNewValueX         = (newValueColumnX + ((defaultValueColumnX-newValueColumnX)/2));
headerDefaultValueX     = (defaultValueColumnX + ((windowX2-defaultValueColumnX)/2));




// REPOSITION CUSTOM HEADERS Y
/* Because we don't have ability to edit default items yet
 * we want to put the CUSTOM ITEMS Y to be that of the
 * DEFAULT ITEMS Y for now
*/
customHeaderY = headerY;

/// Footer buttons calculations
var targetSprite    = spr_popup_save;
var footerMiddle    = round(footerY1 + (footerY2 - footerY1) / 2);
var halfWidth       = round(sprite_get_width(targetSprite)   / 2);
var halfHeight      = round(sprite_get_height(targetSprite)  / 2);
var footerButtonsY  = round(footerMiddle    - halfHeight);
var footerButton1x  = (headerNewValueX      - halfWidth);
var footerButton2x  = (headerDefaultValueX  - halfWidth);


// instantiate buttons
saveButton          = instance_create(footerButton1x,   footerButtonsY, button_DEFAULT_ITEMS_EDIT_save);
closeButton         = instance_create(footerButton2x,   footerButtonsY, button_DEFAULT_ITEMS_EDIT_done);
addButton           = instance_create((windowX1 + 10),  footerButtonsY, button_DEFAULT_ITEMS_EDIT_add);
deleteButton        = instance_create((windowX1 + 104), footerButtonsY, button_DEFAULT_ITEMS_EDIT_delete);
moveUpButton        = instance_create((windowX1 + 200), footerButtonsY, button_DEFAULT_ITEMS_EDIT_moveUp);
moveDownButton      = instance_create((windowX1 + 293), footerButtonsY, button_DEFAULT_ITEMS_EDIT_moveDown);


changesMade         = false;
saveButton.visible  = false;
closeButton.visible = true;

var maxItem = default_items_editor_getMaxItem();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset variables, and destroy buttons

// destroy buttons
if instance_exists(saveButton)
 then instance_destroy(saveButton);
 
if instance_exists(closeButton)
 then instance_destroy(closeButton);
 
if instance_exists(addButton)
 then instance_destroy(addButton);
 
if instance_exists(deleteButton)
 then instance_destroy(deleteButton);

if instance_exists(moveUpButton)
 then instance_destroy(moveUpButton);

if instance_exists(moveDownButton)
 then instance_destroy(moveDownButton);
 
 
// reset variables
global.menuSelected = 0;
global.popup        = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// move item down

var size = (array_height_2d(array) -1);

if  (indexSelected &lt; size)
and (indexSelected &gt; -1)
{
    var target = (indexSelected + 1);
    default_items_array_swap(indexSelected, target);
    indexSelected = target;
    item_editor_view_follow_selectedIndex();
    event_user(2); // show save button, etc.
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// move item up

if (indexSelected &gt; 0)
{
    var target = (indexSelected - 1);
    default_items_array_swap(indexSelected, target);
    indexSelected = target;
    item_editor_view_follow_selectedIndex();
    event_user(2); // show save button, etc.
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// delete item
var size = (array_height_2d(array) -1);

if  (size &gt; -1)
and (indexSelected &gt; -1)
{
    var desc     = array[indexSelected, 0];
    var question = ('Delete item: "'+ string(desc) +'"?');
    
    if (show_question(question))
    {
        var a = 0;
        copiedArrayPart1 = 0;
        copiedArrayPart2 = 0;
        
        var arrayEnd = array_height_2d(array);
    
        //copiedArrayPart1
        for (var i=0; i&lt;indexSelected; i++)
        {
            copiedArrayPart1[i,0] = array[i,0];
            copiedArrayPart1[i,1] = array[i,1];
            copiedArrayPart1[i,2] = array[i,2];
        }
        
        
        //copiedArrayPart2
        a = 0;
        for (var i=indexSelected+1; i&lt;arrayEnd; i++)
        {
            copiedArrayPart2[a,0] = array[i,0];
            copiedArrayPart2[a,1] = array[i,1];
            copiedArrayPart2[a,2] = array[i,2];
            a++;
        }
        
        
        // clear the array
        array = 0;
        
        var size1 = array_height_2d(copiedArrayPart1);
        var size2 = array_height_2d(copiedArrayPart2);
        
        // refill the original array
        a = 0;
        for (var i=0; i&lt;size1; i++)
        {
            array[i,0] = copiedArrayPart1[i,0];
            array[i,1] = copiedArrayPart1[i,1];
            array[i,2] = copiedArrayPart1[i,2];
            a++;
        }
        
        for (var i=0; i&lt;size2; i++)
        {
            array[a,0] = copiedArrayPart2[i,0];
            array[a,1] = copiedArrayPart2[i,1];
            array[a,2] = copiedArrayPart2[i,2];
            a++;
        }
    }
    
    // avoid crashes by invalid index being selected
    maxItem   = default_items_editor_getMaxItem();
    
    var size = (array_height_2d(array) -1);
    if (indexSelected &gt; size) then indexSelected = -1;
    
    // show save button, etc.
    event_user(2);
}
else indexSelected = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// add an item

var str   = get_string("Enter a description", "This is a new item");
var index = (default_items_editor_getMaxItem());

array[index, 0] = str;
array[index, 1] = 0;
array[index, 2] = 0;

indexSelected = index;
// show save button, etc.
event_user(2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// make save button visible
changesMade = true;
saveButton.visible = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Save and hide "CONFIRM"
show_message("Settings saved!");

// save the item lists
/* We'll do this by writing each default item array
 * to a text file. The array order is super important,
 * as each line will have to correspond to a hardcoded
 * default item, since some items behave in very
 * particular ways.
 *
 * The custom items will be done the same way and added
 * to a separate file. The order here isn't important.
*/


// hide confirm button
changesMade = false;


// write to the list of items
if (global.BILL_COURT = "Highcourt")
  then global.arrayOfHighCourtCustomItemValues = array;

if (global.BILL_COURT = "Circuit")
  then global.arrayOfCicruitCourtCustomItemValues = array;

// save_item_lists();
// save_defaultItems();
save_customItems();


saveButton.visible  = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Try to close
var ok = false;


if (changesMade == false)
{
    ok = true;
}
else // changes have been made so we must ask the user if they mean to close
{
    if (show_question("Changes will NOT be saved. Cancel anyway?"))
    {
        ok = true;
    }
}


// close
if (ok == true)
{
    instance_destroy(self, true);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw popup window, data, and interact
global.menuSelected = id;
global.popup        = id;

draw_set_font(font_GUI);


// draw popup window
default_items_editor_draw_popupWindow();

/* TO DO:
 * We'll need a scrollbar and scroll buttons.
 *
 * We want to trim the description if it's longer
 * than the descriptionTextWidth.
 * 
 */

//default_items_editor_logic_defaultItems();    // default items
default_items_editor_logic_customItems();       // custom items


/// KEYBOARD CONTROLS
default_items_keyboard_controls();

// clean up
reset_text();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
