<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// setup positions and spawn buttons
/// arrays
//arrayOfCircuitCourtItemValues       = global.arrayOfCircuitCourtItemValues;
//arrayOfCircuitCourtCustomItemValues = global.arrayOfCircuitCourtCustomItemValues;
arrayOfHighCourtItemValues       = global.arrayOfHighCourtItemValues;
arrayOfHighCourtCustomItemValues = global.arrayOfHighCourtCustomItemValues;
defDescIndex  = 0;
newDescIndex  = 1;
defValueIndex = 2;
newValueIndex = 3;
currentIndex  = 0; // used instead of var i;
// setup
array         = arrayOfHighCourtItemValues; // base this on jurisdiction
indexSelected = -1;
fieldSelected = 0;
descriptionFieldIndex   = 0;
defaultValueFieldIndex  = 1;
newValueFieldIndex      = 2;
lastField     = 2;
size          = array_height_2d(array);
lastIndex     = (size-1);

setup_clickTimer(); // for double-clicking checks


rowHeight       = global.rowHeight;
windowX1        = 10;
windowX2        = 740;
windowY1        = 10;
windowY2        = (windowY1 + (rowHeight*30));
footerHeight    = 50;
footerY1        = windowY2;
footerY2        = (windowY2 + footerHeight);


quantumColumnWidth      = 120;
defaultValueColumnX     = (windowX2 - quantumColumnWidth);
newValueColumnX         = (defaultValueColumnX - quantumColumnWidth);
descriptionColumnWidth  = (newValueColumnX - windowX1);

descriptionColumnEndX   = (newValueColumnX - quantumColumnWidth);


margin = 5;
defaultValueTextX       = ((defaultValueColumnX + quantumColumnWidth) - margin);
newValueTextX           = ((newValueColumnX     + quantumColumnWidth) - margin);
descriptionTextX        = (windowX1 + margin);
descriptionTextWidth    = ((newValueColumnX - descriptionTextX) - margin);

headerY                 = (windowY1 + rowHeight);        // the headers
outlayProfessionalY     = (headerY + (rowHeight*1));     // where the "Outlay Prof." header text goes
listStartY              = (headerY + (rowHeight*1));     // where the items start

customHeaderY           = (windowY1 + rowHeight*16);     // the headers
customListStartY        = (customHeaderY + rowHeight);   // where the custom items start
headerDescriptionX      = (newValueColumnX / 2);
headerNewValueX         = (newValueColumnX + ((defaultValueColumnX-newValueColumnX)/2));
headerDefaultValueX     = (defaultValueColumnX + ((windowX2-defaultValueColumnX)/2));





/// Footer buttons calculations
var targetSprite    = spr_popup_save;
var footerMiddle    = round(footerY1 + (footerY2 - footerY1) /2);
var halfWidth       = round(sprite_get_width(targetSprite)   /2);
var halfHeight      = round(sprite_get_height(targetSprite)  /2);
var footerButtonsY  = round(footerMiddle    - halfHeight);
var footerButton1x  = (headerNewValueX      - halfWidth);
var footerButton2x  = (headerDefaultValueX  - halfWidth);

// instantiate buttons
saveButton          = instance_create(footerButton1x, footerButtonsY, button_DEFAULT_ITEMS_EDIT_save);
closeButton         = instance_create(footerButton2x, footerButtonsY, button_DEFAULT_ITEMS_EDIT_done);
changesMade         = false;
saveButton.visible  = false;
closeButton.visible = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset variables, and destroy buttons

// destroy buttons
if instance_exists(saveButton)
 then instance_destroy(saveButton);
 
if instance_exists(closeButton)
 then instance_destroy(closeButton);
 
// reset variables
global.menuSelected = 0;
global.popup        = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Save and hide "CONFIRM"
show_message("Settings saved!");

// save the item lists
/* We'll do this by writing each default item array
 * to a text file. The array order is super important,
 * as each line will have to correspond to a hardcoded
 * default item, since some items behave in very
 * particular ways.
 *
 * The custom items will be done the same way and added
 * to a separate file. The order here isn't important.
*/
// save_item_lists();


// hide confirm button
changesMade = false;
saveButton.visible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Try to close
var ok = false;


if (changesMade == false)
{
    ok = true;
}
else // changes have been made so we must ask the user if they mean to close
{
    if (show_question("Changes will NOT be saved. Cancel anyway?"))
    {
        ok = true;
    }
}


// close
if (ok == true)
{
    instance_destroy(self, true);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw and stuff
global.menuSelected = id;
global.popup        = id;

default_items_editor_draw_data();

/// KEYBOARD CONTROLS
default_items_keyboard_controls();

// clean up
reset_text();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="96">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEBUG change made
changesMade = true;
saveButton.visible = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
