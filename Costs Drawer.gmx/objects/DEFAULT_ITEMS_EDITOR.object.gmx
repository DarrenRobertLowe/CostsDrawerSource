<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// setup positions and spawn buttons
rowHeight     = global.rowHeight;

// initialize
maxItemVisible  = 0;
defDescIndex    = 0;
newDescIndex    = 1;
defValueIndex   = 2;
newValueIndex   = 3;
customDescriptionIndex  = 0;
customOutlayIndex       = 1;
customProfessionalIndex = 2;
highlight_color = make_color_rgb(128,128,255);
rowAlpha        = 0.3;




// setup
array[0,0] = 0;         // used for custom items
if (global.BILL_COURT == "Circuit")
  then array = global.arrayOfCicruitCourtCustomItemValues;
  else array = global.arrayOfHighCourtCustomItemValues;



// copy the array so we can revert if needed
listArrayBeforeEditing[0,0] = 0;
var size = array_height_2d(array);
for(var i=0; i&lt;size; i++)
{
    listArrayBeforeEditing[i,0] = array[i,0];  // name / description
    listArrayBeforeEditing[i,1] = array[i,1];  // outlay
    listArrayBeforeEditing[i,2] = array[i,2];  // professional
}


defaultItemsArray       = 0;    // will be used for default items
copiedArrayPart1[0]     = 0;    // used for deleting entries, etc.
copiedArrayPart2[0]     = 0;
indexSelected           = -1;
fieldSelected           = 0;
descriptionFieldIndex   = 0;
defaultValueFieldIndex  = 1;
newValueFieldIndex      = 2;
outlayValueFieldIndex   = 1;
professionalValueFieldIndex = 2;
lastField               = 2;
size                    = array_height_2d(array);
lastIndex               = (size-1);
startingIndex           = 0;

setup_clickTimer(); // for double-clicking checks

// initialize the button variables as default_items_editor_get_positions
// needs to check for their existance and move them if they exist whenever
// the user resizes the window.
saveButton      = -1;
closeButton     = -1;
addButton       = -1;
deleteButton    = -1;
moveUpButton    = -1;
moveDownButton  = -1;
customScrollbar = -1;
customScrollbarUp   = -1;
customScrollbarDown = -1;

// position everything
default_items_editor_get_positions();
customScrollbar     = instance_create(0,0,default_items_custom_scrollbar);
customScrollbarUp   = instance_create(0,0,default_items_custom_scrollbar_up);
customScrollbarDown = instance_create(0,0,default_items_custom_scrollbar_down);


// instantiate buttons
addButton           = instance_create(footerButton3x, footerButtonsY, button_DEFAULT_ITEMS_EDIT_add);
deleteButton        = instance_create(footerButton4x, footerButtonsY, button_DEFAULT_ITEMS_EDIT_delete);
moveUpButton        = instance_create(footerButton5x, footerButtonsY, button_DEFAULT_ITEMS_EDIT_moveUp);
moveDownButton      = instance_create(footerButton6x, footerButtonsY, button_DEFAULT_ITEMS_EDIT_moveDown);
saveButton          = instance_create(footerButton1x, footerButtonsY, button_DEFAULT_ITEMS_EDIT_save);
closeButton         = instance_create(footerButton2x, footerButtonsY, button_DEFAULT_ITEMS_EDIT_done);




changesMade         = false;
saveButton.visible  = false;
closeButton.visible = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset variables, and destroy buttons

// destroy buttons
if instance_exists(saveButton)
 then instance_destroy(saveButton);
 
if instance_exists(closeButton)
 then instance_destroy(closeButton);
 
if instance_exists(addButton)
 then instance_destroy(addButton);
 
if instance_exists(deleteButton)
 then instance_destroy(deleteButton);

if instance_exists(moveUpButton)
 then instance_destroy(moveUpButton);

if instance_exists(moveDownButton)
 then instance_destroy(moveDownButton);
 
if instance_exists(customScrollbar)
 then instance_destroy(customScrollbar);


// reset variables
global.menuSelected = 0;
global.popup        = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// scroll down the list
startingIndex++;
constrain_item_editor_scrolling();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// scroll up the list
startingIndex--;
constrain_item_editor_scrolling();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// move item down

var size = (array_height_2d(array) -1);

if  (indexSelected &lt; size)
and (indexSelected &gt; -1)
{
    var target = (indexSelected + 1);
    default_items_array_swap(indexSelected, target);
    indexSelected = target;
    item_editor_view_follow_selectedIndex();
    event_user(2); // show save button, etc.
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// move item up

if (indexSelected &gt; 0)
{
    var target = (indexSelected - 1);
    default_items_array_swap(indexSelected, target);
    indexSelected = target;
    item_editor_view_follow_selectedIndex();
    event_user(2); // show save button, etc.
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// delete item
var size = (array_height_2d(array) -1);

if  (size &gt; -1)
and (indexSelected &gt; -1)
{
    var desc     = array[indexSelected, 0];
    var question = ('Delete item: "'+ string(desc) +'"?');
    
    if (show_question(question))
    {
        var a = 0;
        copiedArrayPart1 = 0;
        copiedArrayPart2 = 0;
        
        var arrayEnd = array_height_2d(array);
    
        //copiedArrayPart1
        for (var i=0; i&lt;indexSelected; i++)
        {
            copiedArrayPart1[i,0] = array[i,0];
            copiedArrayPart1[i,1] = array[i,1];
            copiedArrayPart1[i,2] = array[i,2];
        }
        
        
        //copiedArrayPart2
        a = 0;
        for (var i=indexSelected+1; i&lt;arrayEnd; i++)
        {
            copiedArrayPart2[a,0] = array[i,0];
            copiedArrayPart2[a,1] = array[i,1];
            copiedArrayPart2[a,2] = array[i,2];
            a++;
        }
        
        
        // clear the array
        array = 0;
        
        var size1 = array_height_2d(copiedArrayPart1);
        var size2 = array_height_2d(copiedArrayPart2);
        
        // refill the original array
        a = 0;
        for (var i=0; i&lt;size1; i++)
        {
            array[i,0] = copiedArrayPart1[i,0];
            array[i,1] = copiedArrayPart1[i,1];
            array[i,2] = copiedArrayPart1[i,2];
            a++;
        }
        
        for (var i=0; i&lt;size2; i++)
        {
            array[a,0] = copiedArrayPart2[i,0];
            array[a,1] = copiedArrayPart2[i,1];
            array[a,2] = copiedArrayPart2[i,2];
            a++;
        }
    }
    
    // avoid crashes by invalid index being selected
    maxItem  = default_items_editor_getMaxItem();
    
    var size = (array_height_2d(array) -1);
    if (indexSelected &gt; size) then indexSelected = -1;
    
    // show save button, etc.
    event_user(2);
}
else indexSelected = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// add an item
/* Asks the user to enter a description.
 *
 * The description string is formatted to
 * removed special characters and trailing
 * spaces.
 *
 * If the string is on the sorting list, or
 * exists as a custom item already, the new
 * item will be rejected and the user will be
 * shown an error message saying an item with
 * that description already exists.
 * 
 * Lastly the item is added to the list of
 * custom items (but is not saved yet)
*/


// get the string
var str = "";
str  = get_string("Enter a description", "");


// clean the string
if (str != "")
{
    str = text_remove_special_chars_lite(str);
    str = removeTrailingSpaces(str);
    str = string_copy(str, 1, global.maxDescriptionChars); // trim to the max char count;
    
    
    // check what jurisdiction we're in so we have the correct list
    var list  = -1;
    var court = global.BILL_COURT;
    
    if (court == "Circuit")
    {
        list  = global.sortingListCCPlaintiff;
        //array = global.arrayOfCicruitCourtCustomItemValues;
    }
    
    if (court == "Highcourt")
    {
        list  = global.sortingListHCPlaintiff;
        //array = global.arrayOfHighCourtCustomItemValues;
    }
    
    
    // check for duplicates
    if (list &gt; -1)
    {
        // check for duplicates in standard items
        var size = ds_list_size(list);
        
        for (var i=0; i&lt;size; i++)
        {
            var val = ds_list_find_value(list, i);
            if (str == val)
            {
                show_message("A standard item with this description already exists. Item descriptions must be unique.");
                exit;
            }
        }
        
        
        // check for duplicates in our custom items
        var size  = array_height_2d(array);
        
        for(var i=0; i&lt;size; i++)
        {
            var desc = array[i,0]; // [i,0] = name/description of the item
            if (str == desc)
            {
                show_message("A custom item with this description already exists. Item descriptions must be unique.");
                exit;
            }
        }
    }
    else
    {
        show_message("Error: Could not determine court jurisdiction! Please contact support!");
        exit;
    }
    
    
    // add the new item to the list
    var index = -1;
    index = default_items_editor_getMaxItem();
    
    if (index &gt; -1)
    {
        array[index, 0] = str;
        array[index, 1] = 0;
        array[index, 2] = 0;
    }
    
    indexSelected = index;
    
    // show save button, etc.
    event_user(2);
}
else exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// make save button visible
changesMade = true;
saveButton.visible = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Save the list and hide the "SAVE" button
show_message("Settings saved!");

// save the item lists
/* We'll do this by writing each default item array
 * to a text file. The array order is super important,
 * as each line will have to correspond to a hardcoded
 * default item, since some items behave in very
 * particular ways.
 *
 * The custom items will be done the same way and added
 * to a separate file. The order here isn't important.
*/


// hide confirm button
changesMade = false;


// write to the list of items
if (global.BILL_COURT = "Highcourt")
  then global.arrayOfHighCourtCustomItemValues = array;

if (global.BILL_COURT = "Circuit")
  then global.arrayOfCicruitCourtCustomItemValues = array;

// save_item_lists();
// save_defaultItems();
save_customItems();
listArrayBeforeEditing = array;

saveButton.visible  = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Try to close
var proceed = false;


if (changesMade == true) // changes have been made so we must ask the user if they mean to close
{
    if (show_question("Changes will NOT be saved. Close anyway?"))
    {
        // revert the array to what it was last saved as
        if (global.BILL_COURT == "Circuit")
          then global.arrayOfCicruitCourtCustomItemValues   = listArrayBeforeEditing;
          else global.arrayOfHighCourtCustomItemValues      = listArrayBeforeEditing;
            
        proceed = true;
    }
}
else // no chances made so we can safely close without asking the user.
{
    proceed = true;
}


// close
if (proceed == true)
{
    COMMON_ITEMS_CHECKER.alarm[0] = 1;  // update the list of items
    instance_destroy(self, true);       // close the editor
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw popup window, data, and interact
global.menuSelected = id;
global.popup        = id;

draw_set_font(font_GUI);


// draw popup window
default_items_editor_draw_popupWindow();


//default_items_editor_logic_defaultItems();    // default items
default_items_editor_logic_customItems();       // custom items


/// KEYBOARD CONTROLS
default_items_keyboard_controls();

// clean up
reset_text();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
