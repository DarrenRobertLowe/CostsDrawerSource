<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create event

/* Scrollbar Vars */
documentWidth       = (global.dateColumnX + global.hColumnX)// + global.HColumnWidth);

height              = global.scrollbarButtonSize;
buttonWidth         = global.scrollbarButtonSize;

scrollSpeed         = global.scrollSpeed;
minWidth            = global.scrollbarMinHeight;

mouseOver           = false;
dragging            = false;
scrollbarShown      = false;


/// INITIALIZE JUST IN CASE ///
mouse_pos = (window_mouse_get_x() - x);

// these are updated every step, but need to be initialized all the same
scrollAreaStartX    = buttonWidth;                                                          // also used by constrain_scrollbarH()
scrollAreaEndX      = ( (window_get_width() - global.right_column_width) - buttonWidth);    // also used by constrain_scrollbarH()
scrollAreaStartY    = ( window_get_height() - global.guiFooterHeight - height );
scrollAreaEndY      = scrollAreaStartY + height;
scrollAreaWidth     = (scrollAreaEndX - scrollAreaStartX);


// find the scrollbar width
var maxWidth = scrollAreaWidth;
width = ( maxWidth /(documentWidth /maxWidth) );        // lovely bit of math.
width = floor(width);
// constrain the width
if (width &gt; maxWidth) then width = maxWidth;
if (width &lt; minWidth) then width = minWidth;


scrollbarPosition   = 0;
x  = ( scrollAreaStartX + scrollbarPosition );
y  = ( window_get_height() - global.guiFooterHeight - height );
x2 = ( x + width );
y2 = ( y + height );


instance_create(0,global.scrollbarH_Y1,button_ScrollLeft);
instance_create(0,global.scrollbarH_Y1,button_ScrollRight);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// find width of scroll area (not the scroll bar iteslf)

//scrollAreaStartX    = buttonWidth;
scrollAreaEndX      = ( (window_get_width() - global.right_column_width) - buttonWidth);    // also used by constrain_scrollbarH()
scrollAreaWidth     = (scrollAreaEndX - scrollAreaStartX);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// find the width of the scroll bar itself (not the scroll area)

/* setup */
var maxWidth = scrollAreaWidth;

// find the scrollbar width
width = ( maxWidth /((documentWidth*global.scale) /maxWidth) );        // lovely bit of math.
width = floor(width);


// constrain the width
if (width &gt; maxWidth) then width = maxWidth;
if (width &lt; minWidth) then width = minWidth;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// position the scrollbar Y to the view

if dragging == false {
    y  = ( window_get_height() - global.guiFooterHeight - height );
    scrollAreaStartY = y;
    scrollAreaEndY   = (y + height)-1 // -1 so we can see the tab area border
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check if scrollbar should be displayed
//var rightColumnX = (view_wview[0] - scrollAreaWidth)
var viewMax     = (view_xview[0] + view_wview[0]) - global.right_column_width;
documentMax     = (global.rowNumberX + (global.pageWidth*global.scale));

if (viewMax &lt; documentMax)
 or (global.rowNumberX &lt; view_xview[0])
 {
    scrollbarShown = true;
 }
else
{
    scrollbarShown = false;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// mouse hover and click events
if (scrollbarShown) {

    /* before dragging */
    if (dragging == false) {

        /* mouse is over the scrollbar itself */
        if mouseOverScrollbar() {
            mouseOver = true;
            
            if mouse_check_button_pressed(mb_left) {        // MOUSE CLICK ON BAR ITSELF
                dragging = true;
                mouse_pos = (window_mouse_get_x() - x);
            }
        }
        
        /* mouse is just over the scrollbar area */
        else if ( mouseOverScrollArea_H() ) {
            if ( mouse_check_button_pressed(mb_left) ) {    // MOUSE CLICK ON AREA
                x = window_mouse_get_x()-(width/2);         // center on the mouse

                constrain_scrollbarH();
                get_view_x_from_scrollbar();
                exit;                                       // avoid running the dragging event
            }
        }
        

        /* mouse over nothing */
        else mouseOver = false;
    }
    
    
    
    
    /* while dragging */
    if dragging = true {
        x = ( window_mouse_get_x() - mouse_pos );
        constrain_scrollbarH();
        get_view_x_from_scrollbar();
    }
    
    
    /* finished dragging */
    if mouse_check_button_released(mb_left) {
        dragging = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the scroll bar

if scrollbarShown
{
    /* draw horizontal scrollbar area if showing */
    draw_set_colour(global.guiColor);
    draw_rectangle(SCROLLBAR_H.scrollAreaStartX,SCROLLBAR_H.scrollAreaStartY,SCROLLBAR_H.scrollAreaEndX,SCROLLBAR_H.scrollAreaEndY,0);

    if (mouseOver == true)
    {
        draw_set_color(global.scrollbarColorDark)  // dark gray
    }
    else
    {
        draw_set_color(global.scrollbarColorLight) // light gray
    }

    draw_rectangle(x,y,x+width,y+height,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
