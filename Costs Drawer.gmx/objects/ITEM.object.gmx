<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SETUP
row = 0;
errorString = "";
myFee   = -1;
myVAT   = -1;
myStamp = -1;
myCommissionersFee = -1;
feeList = ds_list_create();
nameList = ds_list_create(); // used by WITNESS
master  = -1;
instructionsFee = true; // include in instructions fee?
previousTooltipsString = "";

if (global.fileToOpen == "")
 then give_ID(id);
 else myID = -2;


//master   = -1;
masterID        = -1;
isBlock         = false;                // for treating items as a block
blockChildList  = ds_list_create();     // the items to move as a block
blockParent     = -1;                   // usually the masterID
hasBlockChild   = false;

moveable        = false;
canToggleItemNumber = false;
countMyItemNumber = true;
canDelete       = false;
canSplit        = false;
hasDate         = true;
hasYear         = true;
hasMonth        = true;
hasDay          = false;
yearDrawn       = 0;
monthDrawn      = 0;
dayDrawn        = 0;
hasDescription  = false;
hasOutlay       = false;
hasProfessional = false;
requiresYear    = false;
requiresMonth   = false;
dateRequired    = false;
requiresDay     = false;
outlayRequired  = false;
professionalRequired = false;
dateYear        = 0;
dateMonth       = 0;
dateDay         = 0;
dateLines       = 0;        // used to increase lines so you can access "day"
showYear        = 0;        // whether or not to show this item's year
showMonth       = 0;        // whether or not to show this item's month
showDay         = 0;        // whether or not to show this item's day
editingYear     = false;    // used when editing the date
editingMonth    = false;    // used when editing the date
editingDay      = false;    // used when editing the date
yearString      = "";
monthString     = "";
dayString       = "";
previousYear    = 0;
previousMonth   = 0;
previousDay     = 0;
//canEditDates    = true;     // paragraphed items disable the ability to edit the date
hasDescription  = false;
descriptionRequired = false;
hasOutlay       = false;
hasProfessional = false;
folios          = 0;
defaultOutlay   = 0;        // used by find_cautions 
defaultProfessional = 0;    // used by find_cautions 
textPosY        = y;
textMargin      = global.textMargin;

seeFeeLaterManual   = false;    // A check to see if the user has manually disabled See Fee Later at any point. It will not be reactivated if manually disabled, even if quantum are not entered.
seeFeeLater         = false;    // Whether or not to display "see fee later".
forceSeeFeeLater    = false;    // whether or not to force the seeFeeLater reagardless of quantum
forceNoQuantumText  = false;    // actually draw "-.--" in quantum when exported/printed

// DESCRIPTION vars
description         = " ";                                      // i.e. the "trueDescription" behind the scenes, says [sc] and [jc] instead of counsel names, etc...
oldDescription      = " ";
tempDescription     = " ";
shownDescription    = " ";                                      // the description that is actually shown, and printed or exported to xlsx.
descriptionList     = ds_list_create();                         // used to hold each line of an item description text.
shownDescriptionList= ds_list_create();
formatDescription(descriptionList,description,0);               // Takes a string and converts it to a list of strings
formatDescription(shownDescriptionList,shownDescription,0);     // Takes a string and converts it to a list of strings
editingDescription  = false;
editingOutlay       = false;
editingProfessional = false;
popupWaiting        = false;
tempDescriptionList = ds_list_create();                         // used for editing description
blueText = false;
highlightingText    = false;
highlightingStartPoint = -1;
highlightingEndPoint = -1;
highlightingStartX  = -1;
highlightingEndY    = -1;
highlightingStartY  = -1;
highlightingEndY    = -1;
startChar           = -1;
endChar             = -1;


// OUTLAY vars
oldOutlay           = 0;
tempOutlay          = 0;
outlay              = 0;            // the actual outlay used in calculations           
outlayText          = "";           // what the user sees in the outlay cell


// PROFESSIONAL vars
oldProfessional     = 0;
tempProfessional    = 0;
professional        = 0;            // the actual outlay used in calculations           
professionalText    = "";           // what the user sees in the professional cell



selectedField = "";



// TEXT EDITING
descriptionX        = 0;
leftTargetTime      = 0;
rightTargetTime     = 0;
rightTargetTime     = 0;
downTargetTime      = 0;
cursorTargetTime    = 0;
cursorBlink         = false;
//cursorTimer         = 0;
//cursorTimerMax      = room_speed/2;
cursorBlinkDelay    = global.cursorBlinkDelay;
spellcheckTimer     = global.spellcheckTimer;
buttonRepeatDelay   = global.buttonRepeatDelay;
delayBeforeButtonRepeat = global.delayBeforeButtonRepeat;
backspaceTargetTime = 0;   // used to compare the current second against the first click
deleteTargetTime = 0;   // used to compare the current second against the first click
correctStringPosition = 1;
checkedWords = ds_list_create();
wrongWords   = ds_list_create();
dictionaryWordToAdd = "";   // used for adding words to dictionary
//wrongWordUnderline[0,0] = 0; // array used for underlining wrong words (too complicated to get working and makes things slower)

// XLSX Settings
xlsx_styleID = "0";


// OTHER
linked = 0;
lines = 2;                          // this is acutally dependant on the description's length.
previousLines = lines;              // used to tell DOC_ORG to run or not (see confirmDescription)
updateLines(descriptionList);       // this changes the lines variable above.

borderStartY = y;                   // should be updated when new items are created
borderEndY   = y+((lines)*global.rowHeight)  // updated every step but needed here first
quantumPositionY = borderEndY;

cursorPosition = 0;                // current position of the blinker
cursorLine = 0;

pageNumber = floor(
                (y-global.pageStart) / (global.rowsPerPage*global.rowHeight)
                );
                
                
// DE-Globalize
rowHeight = global.rowHeight;

// Run doc organizer so new files don't have overlapped lastPage items.
DOC_ORGANIZER.startFrom = -1;
DOC_ORGANIZER.alarm[0]  = 10;   // this will happen after last item is created (and every time any item is created after that)


set_unsaved();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_message(string(id) + " deleting myself");


// SETUP DOC ORG
/*
var list = find_list(id);
if (list &gt; -1)
{
    var targInd = ds_list_find_index(list,id);
    var prevItm = ds_list_find_value(list,targInd-1)
    DOC_ORGANIZER.startFrom = prevItm;
    DOC_ORGANIZER.alarm[0] = 2;
}
else
{
    show_message("not found on any list");
}
*/

/// remove ourselves from any list
var i = ds_list_find_index(global.listOfItems,id);
if (i &gt; -1) then ds_list_delete(global.listOfItems,i);

i = ds_list_find_index(global.LAST_PAGE_ITEMS,id);
if (i &gt; -1) then ds_list_delete(global.LAST_PAGE_ITEMS,i);



/// child item of fee
if  !(is_undefined(master))
and (master &gt; -1)           // do not remove as YYC crashes on loading files
and instance_exists(master)
{
    //show_debug_message("" +string(object_get_name(object_index)) +" is destroyed, master = " +string(object_get_name(master.object_index)));
    
    if !is_undefined(feeList)
    {
        if ds_exists(ds_type_list,feeList)
        {
            var delPos = ds_list_find_index(master.feeList,id);
            if (delPos &gt; -1) then ds_list_delete(master.feeList,delPos);
        }
    }
}


/// child item of block
if  !(is_undefined(blockParent))
and (blockParent &gt; -1)
{
    // convert blockParent to an ID
    var blockParentID = find_ID(blockParent);
    
    if instance_exists(blockParentID)
    {
        //show_message(string(id) +" says its blockParent is " +string(blockParentID));
        
        if !(is_undefined(blockParentID.blockChildList))
        {
            var delPos = ds_list_find_index(blockParentID.blockChildList,id)
            if (delPos &gt; -1) then ds_list_delete(blockParentID.blockChildList,delPos);
        }
    }
}



COMMON_ITEMS_CHECKER.alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update counsel names
shownDescription = convertCodesToNames(description);
formatDescription(shownDescriptionList, shownDescription, 0);         // separate the string into a list of strings for displaying on rows
formatDescription(descriptionList, description, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// correct the stringPosition after editing highlighted text.

//show_debug_message("running alarm[4] in ITEM");

stringPosition = correctStringPosition;
getCursorPositionFromStringPosition();

//show_debug_message("setting string position to "+string(correctStringPosition));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// START UP
confirmDescription(description);
ds_list_copy(tempDescriptionList,descriptionList);
remove_extra_spaces(tempDescriptionList);                  // remove starting spaces
workingString = getTempDescription(tempDescriptionList);   // convert the list to a string
confirmDescription(workingString);


DOC_ORGANIZER.startFrom = -1;
DOC_ORGANIZER.alarm[0]  = 10; // this will happen after last item is created
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// find page number, find row number, borders, 

//if (in_view() == true)
{
    // Calculate page number and Y position //
    if ( is_real(row) ) // prevents crashing when opening a file after a file was already opened
    {
        pageNumber = getPageNumberFromRow(row);
        y = getYFromRow(row);
        
        var tempLines = lines;
        tempLines -= seeFeeLater;
        if (tempLines &lt; 2)         then tempLines = 2;
        if (tempLines &lt; dateLines) then tempLines = dateLines;
        
        // Border //
        borderStartY = getYFromRow( row );
        borderEndY   = getYFromRow( row + (tempLines-1) );
        
        quantumPositionY = borderEndY;
    }
    
    
    /// Delete item with delete button (runs alarm[1])
    if  (canDelete == true)
    and (global.selected == id)
    and (selectedField == "none")   // not currently editing
    {
        if keyboard_check_released(vk_delete)
        {
            view_jump_to_row(global.selected.row);
            //alarm[1] = 2;
            
            /// delete item with delete button (jumps to row first)
            if ( show_question(DELETE_ITEM_MESSAGE) )
            {
                delete_item(id);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DESTROY Local Lists...

//ds_list_clear(descriptionList);
if ds_exists(descriptionList,ds_type_list) then ds_list_destroy(descriptionList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
