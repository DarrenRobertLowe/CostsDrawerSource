<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CONSTANT_ITEM</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/********************
All Item objects should work the same way so that
exporting to CSV can be done without deciphering
object types first. Therefore, we should always
inherit the create event so that every item has
a list for description lines, etc.
*********************/

event_inherited();

/********************/
hasDate             = false;
//ds_list_add(descriptionList,"Summons To Tax");
description = "Summons To Tax";
shownDescription    = description;

formatDescription(descriptionList,description,false);
formatDescription(shownDescriptionList,shownDescription,false);
countMyItemNumber = true;                  // don't increase the item counter for this item type


lines = 1;  // override lines

hasDescription  = false;
hasOutlay       = false;
hasProfessional = true;
outlay          = 0;
canDelete       = true;

professional    = 2.65;
professionalText = string(professional);

// POSITION US ON THE LIST
// set target item to position ourselves after (reverse preference)
targetItem = INSTRUCTIONS_FEE_TOTAL;
if instance_exists(lastPage_postageAndSundries)  then targetItem = lastPage_postageAndSundries;
if instance_exists(lastPage_drawingCostsAndCopy) then targetItem = lastPage_drawingCostsAndCopy;

var list = global.LAST_PAGE_ITEMS;
var size = ds_list_size(global.LAST_PAGE_ITEMS);

for(var i=0; i&lt;size; i++)
{
    var item = ds_list_find_value(list,i);
    if (item.object_index == targetItem.object_index)
    {
        row = (item.row + item.lines);
        ds_list_insert(list,i+1,id);
        i = size;
    }
}


// de-globalize
textMargin  = global.textMargin;

// class specific
if (global.fileToOpen == "")
{
    stamp               = instance_create(x,y,lastPage_stampThereon);
    stamp.row           = (row + lines);
    stamp.master        = id;
    stamp.masterID      = myID;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UPDATE COMMON_ITEMS list
event_inherited();

var list = global.LAST_PAGE_ITEMS;

// delete the stampThereon
if instance_exists(stamp)
{
    var ind = ds_list_find_index(list,stamp);
    ds_list_delete(list,ind);
}

// delete us
ind = ds_list_find_index(list,id);
ds_list_delete(list,ind);


COMMON_ITEMS_CHECKER.alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW THE DATA
if in_view()
{
    textPosY         = getYFromRow(row+1);
    textPosX         = global.descriptionColumnX;
    rowHeight        = global.rowHeight;
    descriptionX     = (textMargin + global.descriptionColumnX);    
    borderStartY     = getYFromRow(row);
    lines            = 1;//ds_list_size(descriptionList);
    borderEndY       = borderStartY + (rowHeight*lines);
    quantumPositionY = borderEndY;
    mouseOverChecks();
    reset_text();
    
    
    // DRAW Description
    draw_set_halign(fa_left);
    draw_text(                                                  // draw_text(...
        global.textMargin + global.descriptionColumnX,          // x,
        textPosY,                                               // y,
        description                   // see create event for text
        );
        
        
        if (editingProfessional == false) 
        {   
            //mouseOverChecks();
            
            // DRAW professional
            if (professional &gt; 0)
            {
                draw_set_halign(fa_right);
                professionalText = formatQuantum(professional);
                draw_text(
                    global.hColumnX,                        // must be global to position properly with global.scale
                    quantumPositionY,                       // y position
                    professionalText                        // amount
                    );
            }
            else // no professional value
            {
                draw_set_halign(fa_right);
                draw_set_color(global.grayText);
            
                draw_text(
                    global.hColumnX,                        // must be global to position properly with global.scale
                    quantumPositionY,                       // y position
                    "0.00"                                  // amount
                    );
            }
        }
    
    
    mouseOverChecks();
    if (global.selected = id)
    {
        drawBorder("item");                             // HIGHLIGHT THE ITEM
        edit_professional();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
