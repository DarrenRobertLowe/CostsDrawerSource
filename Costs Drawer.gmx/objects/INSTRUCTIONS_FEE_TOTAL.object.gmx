<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CONSTANT_ITEM</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/********************
All Item objects should work the same way so that
exporting to CSV can be done without deciphering
object types first. Therefore, we should always
inherit the create event so that every item has
a list for description lines, etc.
*********************/

event_inherited();

/********************/
myID = -2;
hasDate             = false;
countMyItemNumber   = false;                  // don't increase the item counter for this item type
hasDescription      = false;
hasProfessional     = true;
instructionsFee     = false;
seeFeeLater         = false;
hasNoFee            = true;


ds_list_add(global.LAST_PAGE_ITEMS,id);

description = "Instructions Fee:";
shownDescription    = description;

formatDescription(descriptionList,description,false);
formatDescription(shownDescriptionList,shownDescription,false);

//ds_list_add(descriptionList,description);
lines = 2;

professional = 0;

row = GENERAL_INSTRUCTIONS_FEE.row
xlsx_styleID = 9;

// de-globalize
textMargin      = global.textMargin;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// FIND ROW and DRAW THE DATA
professionalText = formatQuantum(professional);

if in_view()
{
    reset_text();
    
    textPosY         = getYFromRow(row+1);
    textPosX         = global.descriptionColumnX;
    rowHeight        = global.rowHeight;
    descriptionX     = (global.outlayColumnX-textMargin); 
    quantumPositionY = textPosY;
    borderStartY     = getYFromRow(row);
    borderEndY       = borderStartY+global.rowHeight;
    
    
        // DRAW Description //
        draw_set_halign(fa_right);
        draw_text(                                                  // draw_text(...
            descriptionX,                                           // x,
            textPosY,                                               // y,
            ds_list_find_value(descriptionList,0)                   // see create event for text
            );
        
        
        // DRAW totalProfessional //
        /*
        draw_set_halign(fa_right);
        if (professional != 0)
        {
            draw_text(
                global.hColumnX,                                    // must be global to position properly with global.scale
                textPosY,                                           // y position
                formatQuantum(professional)                         // total Professional amount
                );
        }
        */
        
        if (editingProfessional == false) 
        {   
            mouseOverChecks();
            
            // DRAW professional
            if (professional &gt; 0)
            {
                draw_set_halign(fa_right);
            
                draw_text(
                    global.hColumnX,                        // must be global to position properly with global.scale
                    textPosY,                               // y position
                    professionalText                        // amount
                    );
            }
            else
            {
                draw_set_halign(fa_right);
                if (global.PRINT_VIEW == true)
                 then draw_set_color(global.itemTextColor);
                 else draw_set_color(global.grayText);
            
                draw_text(
                    global.hColumnX,                        // must be global to position properly with global.scale
                    textPosY,                               // y position
                    "0.00"                                  // amount
                    );
            }
        }
    
    
    mouseOverChecks();
    if (global.selected = id)
    {
            drawBorder("item");     // HIGHLIGHT THE ITEM
            edit_professional();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
