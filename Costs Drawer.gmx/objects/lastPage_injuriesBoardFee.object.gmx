<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CONSTANT_ITEM</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/********************
All Item objects should work the same way so that
exporting to CSV can be done without deciphering
object types first. Therefore, we should always
inherit the create event so that every item has
a list for description lines, etc.
*********************/

event_inherited();

/********************/

countMyItemNumber = true;                   // don't increase the item counter for this item type
canDelete       = true;
hasDate             = false;
hasDescription  = false;
hasOutlay       = true;
hasProfessional = false;

description = "Injuries Board Fee";
shownDescription    = description;

formatDescription(descriptionList,description,false);
formatDescription(shownDescriptionList,shownDescription,false);

lines = 2;

row = GENERAL_INSTRUCTIONS_FEE.row


//alarm[0] = 2; // position us
ds_list_add(global.LAST_PAGE_ITEMS,id);

hasDescription  = false;
hasOutlay       = true;                     // we can let them change it but give a caution about it

outlay           = global.INJURIES_BOARD_FEE;
outlayText       = formatQuantum(outlay);
professionalText = formatQuantum(professional);

// de-globalize
textMargin  = global.textMargin;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UPDATE COMMON_ITEMS and LAST_PAGE_ITEMS lists
event_inherited();

list = global.LAST_PAGE_ITEMS;

ind = ds_list_find_index(list,id);
ds_list_delete(list,ind);

COMMON_ITEMS_CHECKER.alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// POSITION US ON THE LIST
// set target item to position ourselves after (reverse preference)
    targetItem = INSTRUCTIONS_FEE_TOTAL;
    if instance_exists(lastPage_postageAndSundries)  then targetItem = lastPage_postageAndSundries;
    if instance_exists(lastPage_drawingCostsAndCopy) then targetItem = lastPage_drawingCostsAndCopy;
    if instance_exists(lastPage_summonsToTax)        then targetItem = lastPage_summonsToTax;
    if instance_exists(lastPage_stampThereon)        then targetItem = lastPage_stampThereon;
    if instance_exists(lastPage_attendingTaxation)   then targetItem = lastPage_attendingTaxation;

var list = global.LAST_PAGE_ITEMS;
var size = ds_list_size(global.LAST_PAGE_ITEMS);

for(var i=0; i&lt;size; i++)
{
    var item = ds_list_find_value(list,i);
    
    if (item.object_index == targetItem)
    {
        row = (item.row + item.lines);
        ds_list_insert(list,i+1,id);
        i = size; // end the loop
    }
}

DOC_ORGANIZER.alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// FIND ROW and DRAW THE DATA
if in_view()
{
    rowHeight        = global.rowHeight;
    textPosY         = getYFromRow(row+1);
    textPosX         = global.descriptionColumnX;
    descriptionX     = (textMargin + global.descriptionColumnX);    
    borderStartY     = getYFromRow(row);
    lines            = 1;//ds_list_size(descriptionList);
    borderEndY       = borderStartY + rowHeight;//borderStartY + (rowHeight*lines);
    quantumPositionY = textPosY;//borderEndY;
    mouseOverChecks();
    reset_text(); 
    
    
    // DRAW Description
    draw_set_halign(fa_left);
    draw_text(                                                  // draw_text(...
        global.textMargin + global.descriptionColumnX,          // x,
        textPosY,                                               // y,
        description                   // see create event for text
        );
        
        // DRAW outlay
        if (editingOutlay == false) 
        {   
            //mouseOverChecks();
            if (outlay &gt; 0)
            {
                draw_set_halign(fa_right);
            
                draw_text(
                    global.fColumnX,                        // must be global to position properly with global.scale
                    quantumPositionY,                       // y position
                    formatQuantum(outlay)                   // amount
                    );
            }
            else // no outlay value
            {
                draw_set_halign(fa_right);
                draw_set_color(global.grayText);
            
                draw_text(
                    global.fColumnX,                        // must be global to position properly with global.scale
                    quantumPositionY,                       // y position
                    "0.00"                                  // amount
                    );
            }
        }
    
    //mouseOverChecks();
    if (global.selected = id)
    {
        drawBorder("item");                             // HIGHLIGHT THE ITEM
        edit_outlay();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
