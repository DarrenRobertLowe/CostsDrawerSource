<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CONSTANT_ITEM</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/********************
All Item objects should work the same way so that
exporting to CSV can be done without deciphering
object types first. Therefore, we should always
inherit the create event so that every item has
a list for description lines, etc.
*********************/

event_inherited();

/********************/
myID = -2;
hasDate             = false;
canDelete           = true;
hasNoFee            = true;     // don't add a line for "see fee later"
countMyItemNumber   = false;    // don't increase the item counter for this item type
//row                 = (GENERAL_INSTRUCTIONS_FEE.row + 1);
hasDescription      = true;     // we can't edit the description
hasOutlay           = false;    // we can't edit the outlay
hasProfessional     = false;    // we can't edit the professional
outlay              = 0;
professional        = 0;
moveable            = true;
canSplit            = true;

fakeDescription  = "Enter General Instructions Details";
description      = "";
shownDescription = description;

formatDescription(descriptionList,description,false);
formatDescription(shownDescriptionList,shownDescription,false);

lines = ds_list_size(descriptionList);




/*
// FIND OUR LIST POSITION
var list = global.LAST_PAGE_ITEMS;
var size = ds_list_size(global.LAST_PAGE_ITEMS);

for(var i=(size-1); i&gt;=0; i--)
{
    var item = ds_list_find_value(list,i);
    
    if (item.object_index == GENERAL_INSTRUCTIONS_DETAILS)
    or (item.object_index == INSTRUCTIONS_FEE_ITEM)
    or (item.object_index == GENERAL_INSTRUCTIONS_FEE)
    {
        row = (item.row + item.lines);
        ds_list_insert(list,i+1,id);
        break;
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy event

var pos = ds_list_find_index(global.LAST_PAGE_ITEMS,id)
if (pos &gt; -1) then ds_list_delete(global.LAST_PAGE_ITEMS,pos);

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GET DESCRIPTION AND DRAW THE DATA
// get the description from the actual item.
if (in_view())
{
    mouseOverChecks();
    reset_text();
    
    textPosY        = getYFromRow(row+1);
    textPosX        = global.descriptionColumnX;
    rowHeight       = global.rowHeight;
    textMargin      = global.textMargin;
    
    descriptionX    = (textMargin + global.descriptionColumnX);
    
    
    // DRAW Description
    if (editingDescription == false)
    {
        reset_text();
        draw_set_halign(fa_left);
        
        draw_set_colour(global.itemTextColor);
        
        if (description == " ")
        {
            draw_set_color(global.grayText);
            draw_text(
                textPosX,
                textPosY,
                fakeDescription
                );
        }
        else
        {
            for(i=0; i&lt;ds_list_size(descriptionList); i+=1)             // go line by line through description
            {           
                draw_text(                                              // draw_text(...
                    textPosX,                                           // x,
                    textPosY + (i*rowHeight),                           // y,
                    ds_list_find_value(descriptionList,i)               // "string" )
                    );
            }
        }
    }
    
    
    
    if (global.selected = id)
    {
        // HIGHLIGHT THE ITEM //
        drawBorder("item");
        edit_description(textPosY);
        edit_outlay();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
