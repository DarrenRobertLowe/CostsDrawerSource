<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CONSTANT_ITEM</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
hasDate             = 0;
countMyItemNumber   = 0;
lines               = 4;
italics             = global.italicsMultiplier;
plaintiffs          = ds_list_create();
drawnPlaintiffs     = ds_list_create();
andText             = "and ";
moveable            = false;

ds_list_add(shownDescriptionList,"");
ds_list_add(shownDescriptionList,"AND");
ds_list_add(shownDescriptionList,"");


alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// do nothing.
// needed for preventing description from disappearing
// due to shownDescription not existing.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create the first Plaintiff

instance_create(x,y,PLAINTIFF);
//instance_create(x,y,add_new_plaintiff);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( in_view() )
{
    reset_text();
    ds_list_clear(plaintiffs);
    row         = 9;
    textPosY    = getYFromRow(row+1);                           // +1 because text is drawn from bottom up and getYFromRow returns row -1. Don't know why, but it seems to be needed.
    var size     = 0;
    var listSize = ds_list_size(plaintiffs);
    var maxWidth = global.descriptionTextWidth;
    var scale    = global.scale;
    
    
    
    size = ds_list_size(global.PLAINTIFFS);
    
    for(i = (size-1); i&gt;0; i--)
    {
        var value = ds_list_find_value(global.PLAINTIFFS,i);
        ds_list_insert(plaintiffs,0,value);
        ds_list_insert(plaintiffs,0,andText);
    }
    
    if !is_undefined(ds_list_find_value(global.PLAINTIFFS,0))
    {
        var value = ds_list_find_value(global.PLAINTIFFS,0);
        ds_list_insert(plaintiffs,0,value);
    }

    

    // copy the first six plaintiffs
    var count = ds_list_size(plaintiffs);
    if (count &gt; 6) then count = 6;
    
    // copy over the plaintiffs while changing them to UPPER CASE
    ds_list_clear(drawnPlaintiffs);
    for (var i=0; i&lt;count; i++)
    {
        var value = ds_list_find_value(plaintiffs,i);
        
        if  (ds_list_find_value(plaintiffs,i) != andText)           // don't uppercase this
        and (ds_list_find_value(plaintiffs,i) != "and OTHERS")      // or this
        {
            ds_list_add(drawnPlaintiffs,string_upper(value)); 
        }
        else ds_list_add(drawnPlaintiffs,value);
    }
    
    
    
    // delete redundant "and"s
    if (ds_list_find_value(drawnPlaintiffs,5) == andText)
      then ds_list_replace(drawnPlaintiffs,5,"and OTHERS");
    
    if (ds_list_find_value(drawnPlaintiffs,5) == " and OTHERS ")
    {
        if (ds_list_find_value(drawnPlaintiffs,4) == andText)
          then ds_list_delete(drawnPlaintiffs,4);
    }
    
    separate_list_lines(drawnPlaintiffs,1,maxWidth,font_TimesBold);
    lines = ( 4 + ds_list_size(drawnPlaintiffs) );
    
    
    
    
    /* DRAW Description */
    draw_set_halign(fa_left);
    
        // setup
        draw_set_font_scaled(font_TimesBold)
        var size = ds_list_size(drawnPlaintiffs);
        var i    = 0;
        var xx   = (global.textMargin + global.descriptionColumnX);
        
        //// DRAW PLAINTIFFS LIST
        for(i=0; i&lt;size; i++) 
        {
            var text = ds_list_find_value(drawnPlaintiffs,i);
            if  text = andText then draw_set_font_scaled(font_Times);
            else draw_set_font_scaled(font_TimesBold);
            draw_text(
                xx,                                                 // x,
                textPosY+(i*global.rowHeight),                      // y,
                text,                                               // draw andText lowercase
                );
        }
        
        
        //// lines after Plaintiffs list
        i = ds_list_size(drawnPlaintiffs);
        draw_set_font_scaled(font_Times);
        
        if ( ds_list_size(global.PLAINTIFFS) &gt; 1 )
        {
            draw_text( // "Plaintiffs"
                global.textMargin + global.descriptionColumnX,  // x,
                textPosY+(i*global.rowHeight),                  // y,
                "                                    Plaintiffs"
            );
        }
        else
        {
            draw_text( // "Plaintiff"
                global.textMargin + global.descriptionColumnX,  // x,
                textPosY+(i*global.rowHeight),                  // y,
                "                                    Plaintiff"
            );
        }
        
        
        draw_set_font_scaled(font_TimesBold);
        i++;
        draw_text( // blank space
            global.textMargin + global.descriptionColumnX,  // x,
            textPosY+(i*global.rowHeight),                  // y,
            ds_list_find_value(shownDescriptionList,0),          // string)
        )
        
        i++;
        draw_text( // "AND"
            xx,                                             // x,
            textPosY+(i*global.rowHeight),                  // y,
            ds_list_find_value(shownDescriptionList,1),          // string)
        )
        
        i++;
        draw_text( // blank space
            global.textMargin + global.descriptionColumnX,  // x,
            textPosY+(i*global.rowHeight),                  // y,
            ds_list_find_value(shownDescriptionList,2),          // string)
        )
        
        
    // concatenate lists for excel exporting
    for(var i=0; i&lt;ds_list_size(shownDescriptionList); i++)
    {
        var value = ds_list_find_value(shownDescriptionList,i);
        ds_list_add(drawnPlaintiffs,value);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
