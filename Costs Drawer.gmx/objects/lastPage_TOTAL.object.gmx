<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CONSTANT_ITEM</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/********************
All Item objects should work the same way so that
exporting to CSV can be done without deciphering
object types first. Therefore, we should always
inherit the create event so that every item has
a list for description lines, etc.
*********************/

event_inherited();

/********************/
hasDate             = false;
countMyItemNumber   = false;                  // don't increase the item counter for this item type
hasDescription      = false;

ds_list_add(global.LAST_PAGE_ITEMS,id);

description = "Total, save as to Court duty 8%";
shownDescription    = description;

formatDescription(descriptionList,description,false);
formatDescription(shownDescriptionList,shownDescription,false);

lines = 1;
alarm[0] = 1;
var pages = (global.totalRows / global.rowsPerPage);
row = (pages*global.totalRows)+3;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CREATE EVENT
master = lastPage_SUBTOTAL;
blockParent = master;
master.blockHasChild = true;

blockList = master.blockChildList;      // add us to the master's block so we move when they do.
ds_list_add(blockList,id);


DOC_ORGANIZER.startFrom = -1; // Note: running startFrom -1 also calls update_totals();
DOC_ORGANIZER.alarm[0]  = 2;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// FIND ROW and DRAW THE DATA
/* CALCULATE Totals */
totalProfessional  = (lastPage_SUBTOTAL.totalProfessional);
totalProfessional += (lastPage_ProVAT.professional);
totalProfessional += (lastPage_OutlayToTotal.professional);
professionalText = formatQuantum(totalProfessional);
lines = 3;


if (in_view())
{
    reset_text();
    textPosY = getYFromRow(row+1);                                                // the Y position to be used throughout the data.
    draw_set_halign(fa_left);
    
    
    /* DRAW Description */
    draw_text
    (
        global.descriptionColumnX,                              // x,
        textPosY,                                               // y,
        ds_list_find_value(descriptionList,0)                   // see create event for text
    );


    
    /* DRAW totalProfessional */
    draw_set_halign(fa_right);
    
    if (totalProfessional != 0)
    {
        draw_text
        (
            global.hColumnX,                                    // must be global to position properly with global.scale
            textPosY,                                           // y position
            professionalText                                    // total Professional amount
        );
    }
    

    /// Draw the borderline above...
    draw_set_color(c_black);
    draw_set_halign(fa_right);
    
    // professional border
    var yy = y;//(y-global.rowHeight);
    var xx = global.professionalColumnX;
    
    draw_line
    (
        global.professionalColumnX,
        yy,
        xx + (global.hColumnX - global.professionalColumnX),
        yy
    )
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
