<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INITIATE

/// GET COMMAND LINE ARGUMENTS (disabled due to causing crash)
/*
if (parameter_count &gt; 0)
{
    global.commandline_argument = parameter_string(1);
    show_message("commandline_argument is :"+string(global.commandline_argument));
}
*/
//this is a test.
//gml_pragma("forceinline")  // increases cpu speed but also the exe size (needs to be used per script!)
//gml_pragma("PNGCrush");       // makes exe smaller but increases compile time
gml_release_mode(false);       // dangerous! but gives a speed boost? (honestly can't see it)

/* "global", "[gml code]" - The "global" pragma permits you to call 
 * some GML code before anything else and will execute the second GML 
 * string at a global scope, before the first room of the game executes.
 * For example:  gml_pragma("global", "scr_Init()");   will run scr_init()
 * before even the first room loads.
*/


global.MOUSE_FREE   = true;            // used to determine if the mouse is free for performing actions
global.menuSelected = 0;

if !instance_exists(STARTUP_LOGGER)
{
    instance_create(0,0,STARTUP_LOGGER);
    if file_exists("log") then file_delete("log");
}
    
    if (os_version &lt; 655360)
      then global.windows10 = false;
      else global.windows10 = true;
    
    backup_update_exe();
    clear_old_update_files(); // as created when autoupdating
    
    
    if !(code_is_compiled())
    then show_message("WARNING: CODE IS NOT COMPILED WITH YYC!");
    
    
    global.DISPLAY_TIPS = true;
    global.notConnected = false;
    
    
    // update link is the default and should be valid, but an updated link gets scraped from the website source anyway
    global.UPDATE_LINK   = "";
    global.UPDATE_FORMAT = "";              // should be 'exe' or 'installer'
    get_update_link_from_preferences();     // NOTE: This is needed because: we restart the program after finding a download (due to the progress bar not working otherwise) and STARTUP otherwise changes global.UPDATE_LINK back to the default.
    global.newVersionAvailable = false;
    global.latestVersionString = GM_version;
    
    draw_set_font(font_GUI);
    userpass        = "";
    login           = -1;
    pageScrape      = -1;
    pageScrape      = http_get(WEBSITE);

    LOGGED_IN       = false;
    loginDatabase   = ds_list_create();
    dateList        = ds_list_create();
    codeList        = ds_list_create();
    
    timeLimit       = ( (get_timer()/1000) + 3000 );
    offline         = true;
    accessGranted   = false;
    resolved        = false;
    packetsReceived = false;
    
    
    if (check_expiry_date() == true)
    {
        accessGranted = true;
        alarm[0] = 1;
    }
    
    if !instance_exists(TIPS) then instance_create(0,0,TIPS);
    
    
    
    // downloading update
    httpUpdateFile    = -1;
    downloadingUpdate = false;
    sizeDownloaded    = -1;
    contentLength     = -1;
    maxSize           = 500; // progress bar
    global.online     = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CLEAN UP
if ds_exists(loginDatabase,ds_type_list) then ds_list_destroy(loginDatabase);
if ds_exists(dateList,ds_type_list)      then ds_list_destroy(dateList);
if ds_exists(codeList,ds_type_list)      then ds_list_destroy(codeList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CREATE EVENT
if (accessGranted == false)
{
    if (check_expiry_date() == false) // there's no chkd file or we're out of date
    {
        show_debug_message("expiry date didn't check out! Running user_log_in()");
        LOGGED_IN = false;
        
        if (offline == false)
          then user_log_in();
          else
          {
            show_message("Could not validate Costs Drawer and no interet connection was found!#Please connect Costs Drawer to the internet and enter a valid code to continue.");
            game_end();
          }
    }
    else
    {
        accessGranted = true;
    }
}


if (accessGranted == true) // everything checks out, so go ahead.
{
    room_width  = 748;
    room_height = 529;
    show_debug_message("Everything checks out, running as normal.");
    LOGGED_IN = true;
    
    if (LOGGED_IN == true)
    {
        if !instance_exists(CHECK_NEW_VERSION)      then instance_create(0,0,CHECK_NEW_VERSION);
        if !instance_exists(MASTER)                 then instance_create(0,0,MASTER);
        if !instance_exists(OPENING_SCREEN_MASTER)  then instance_create(0,0,OPENING_SCREEN_MASTER);
        if !instance_exists(TIPS)                   then instance_create(0,0,TIPS);
        
        window_set_cursor(cr_default);
        global.RESTARTING = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CLOSING THE PROGRAM WITH THE [X] BUTTON...
if (window_command_check(window_command_close))
{
    if (show_question("Are you sure you want to exit?"))
      then game_end();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// RETRIEVE LOGIN DATABASE, TIPS and UPDATE LINK
/* NOTE:
 * The Website should have the updated database
 * as a comment in the header. This can be accessed 
 * on the web builder in the
 *    "PAGES &gt; SEO &gt; Header HTML" section. 
 * This was done so that we can remove references to
 * Costs Drawer from the website if we want, and it
 * will still work as long as the comment is kept 
 * up to date.
*/

// "status":
// Returns a value of less than 0 for an error, 
// 0 for complete
// and 1 for receiving packets

//show_debug_message("checking HTTP async");

/// TRY TO CONNECT
if  (offline  == true)
and (resolved == false)
and (packetsReceived == false)
{
    alarm[0] = 100;
    if (ds_map_find_value(async_load, "id") == pageScrape)
    {
        if (ds_map_find_value(async_load, "status") &lt; 0) // No connection, wait 3 seconds
        {
            show_debug_message("waiting for a connection");
            
            /* do not put an offline message here as it will keep happening until a
             * result is found, and he web isn't fast enough to return successfully
             * before it claims nothing is found.
             */
             
            //show_debug_message("waiting for HTTP event to resolve "+string(current_time));
            //show_debug_message("timer = "+string(get_timer()/1000));
            //show_debug_message("timeLimit = "+string(timeLimit));
            
            if ( (get_timer()/1000) &gt; timeLimit )
            {
                if (show_question("Cannot resolve host. You may be offline.# Continue waiting?"))
                {
                    write_log("Could not resolve host...")
                    timeLimit = ( (get_timer()/1000) + 3000);
                }
                else
                {
                    offline  = true;
                    resolved = true;
                    alarm[0] = 1;
                }
            }
        }
    }
}


    
    
if (ds_map_find_value(async_load, "id") == pageScrape)
{
    if (ds_map_find_value(async_load, "status") &gt; 0) // We're receiving packets
    {
        //resolved = true;
        show_debug_message("we're online and receiving packets");
        offline  = false;
        packetsReceived = true;
    }
    
    if (ds_map_find_value(async_load, "status") == 0) // Finished
    {
        r_str = ds_map_find_value(async_load, "result");
        //show_message(string(r_str)); DEBUG: Shows all data scraped from website
        t_str = r_str;
        create_login_database();
        create_tips();
        retrieve_update_link(t_str);
        offline  = false;
        resolved = true;
        alarm[0] = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CLEAN UP
if ds_exists(loginDatabase,ds_type_list) then ds_list_destroy(loginDatabase);
if ds_exists(dateList,ds_type_list)      then ds_list_destroy(dateList);
if ds_exists(codeList,ds_type_list)      then ds_list_destroy(codeList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw "Connnecting Costs Drawer to webserver..."

var dots = "."

draw_set_color(c_black);
if (current_second mod 3 == 0) then dots = ".";
if (current_second mod 4 == 0) then dots = "..";
if (current_second mod 5 == 0) then dots = "...";

if ( LOGGED_IN == false )
{
    draw_text(10,35,"Connecting Costs Drawer to webserver"+string(dots));
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
