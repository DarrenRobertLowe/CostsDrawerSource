<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SETUP PROGRAM

/// RELEASE STUFF ///
// RELEASE TYPE
global.RELEASE_TYPE = "Lite"; // "Full" or "Lite"  "Full" is FOR LAPTOPS ONLY!
//global.RELEASE_TYPE = "Lite"; // "Full" or "Lite"

if (global.RELEASE_TYPE == "Lite")      // no copy protection
{
    global.GUI_SCALE = 1;               // 1 or 1.5. changes the font for the GUI. 1.5 for laptops. See draw_set_font_GUI_scaled() 
}

/// FOR LAPTOPS ONLY! OBSOLETE??
if (global.RELEASE_TYPE == "Full")      // copy protected by folder and file,
{
    check_copy_protection();
    global.GUI_SCALE = 1.5;             // 1 or 1.5. changes the font for the GUI. 1.5 for laptops. See draw_set_font_GUI_scaled() 
}

// overide
global.GUI_SCALE = 1;



//////////////////

global.datePopup = -1;

if !(directory_exists("backups")) then directory_create("backups");



/* DLL STUFF */
//window_command_hook(window_command_maxiglobal.buttonTimerDelaymize);   // allows us to maximize the window properly, rather than guessing start menu height, etc.
global.keepWindowOnTop  = false;



/* INITIALIZE VARIABLES */
BILL_STARTED = false;                               // so we only create the bill related stuff on a bill and not the main menu
global.RESTARTING = false;
global.load_view_y = false;
global.view_y_to_load  = 0;

global.DEBUG_TEST   = 0;
global.folios       = 0;

global.showUpdateMessage = false;                   // used for displaying a message informing the user that a file they've loaded may have had its contents changed in order to bring it up to date
global.updateAffectedItemsQueue = ds_queue_create();

APPENDIX_W_AND_OTHER_FEES();                        // sets up all the Fees.
global.resetWindowSettings = false;                 // whether to reset the window size and position to default
global.startWitnessesOnNewPage = false;             // WARNING! Setting this to TRUE will cause PAGE_NUMBER not to be created on last page!
global.BILL_ON_BEHALF_OF = "Plaintiff";             // "Plaintiff" or "Defendant"
global.BILL_COURT   = "";                           // bill jurisdiction : "Circuit" or "Highcourt"
global.BILL_TYPE    = "Party and Party";            // e.g. Pary and Party, Solicitor and Client, etc.
global.recordNumber = "";
global.VATamount    = 0.23;

global.DICTIONARY           = ds_list_create();
global.DEFAULT_DICTIONARY   = ds_list_create();
global.USER_DICTIONARY      = ds_list_create();
global.PROFANITY_DICTIONARY = ds_list_create();
global.WORD_COUNT_COUNT     = 0;
populate_profanity_dictionary();
populate_dictionary();          // actually does everything related to dictionaries, except delete the backups.
clear_dictionary_backups(); 

global.RESERVED_LIST_INDEX  = ds_list_create();     // to fix a bug where other lists index are set to 0. This will hopefully prevent issues as a result of that, but it's not certain.
global.COMMON_ITEMS         = ds_list_create();
global.PLAINTIFFS           = ds_list_create();
global.DEFENDANTS           = ds_list_create();
global.WITNESSES            = ds_list_create();
global.LAST_PAGE_ITEMS      = ds_list_create();
global.fileToOpen           = -1;
global.maxPlaintiffs        = 2; // number of names before "and others" appears
global.maxDefendants        = 2;
global.textHighlightable    = true; // whether or not to allow highlighting text while editing


// COUNSEL
//global.COUNSEL              = ds_list_create(); // should be removed?
global.SENIOR_COUNSEL       = "";
global.JUNIOR_COUNSEL       = "";


global.WARNINGS = ds_list_create();             // list for Red Warnings. Warnings should be deleted and rediscovered every action.
global.CAUTIONS = ds_list_create();             // list for Yellow Warnings (cautions). Cautions should be deleted and rediscovered every action.


global.listOfItems  = ds_list_create();         // list of all items
global.listOfTotals = ds_list_create();         // list of all the TOTALS objects
global.selected = -1;
global.texture_interpolation = true;            // if we use "High Quality" font, this should be enabled.
global.USER_DIRECTORY   = set_default_user_directory(); // sets default save folder to the desktop
global.DEFAULT_FILENAME = "New Bill of Costs";
global.USER_FILENAME = "";                      // needed so trying to "Save" will open "Save As" if a file name hasn't been given
global.SAVING = 0;                              // needed to display saving progress
global.UNSAVED = 0;                             // keep track of whether the file has been saved
global.FILENAME = "";                           // NOTE: do not put text in this string! A blank string is required to open "Save As..." instead of "Save" when pressing ctrl+s
global.open_caption = "Open an existing costs drawing document..."
global.SAVED_AS = false;
global.popup = -1                               // used for date selection to work properly
global.ERROR_TEXT = "ERR!";
commonItemsHeaderString     = "ITEMS";
warningsHeaderString        = "WARNINGS";
global.sideColumnUpdateSpeed = 4;               // (room_speed/n) determines how often the side column content should update their positions
global.warnings_separation  = 24;               // pixels between warnings lines
global.currentWarningNumber = 0;                // so we can scroll through the warnings list
global.currentPlaintiffNumber = 0;
global.currentDefendantNumber = 0;
global.currentCounselNumber = 0;
global.currentWitnessNumber = 0;
global.currentItemNumber    = 0;
global.SHOW_WARNINGS        = true;             // determines whether warning rows are highlighted or not (used when editing description)
global.estimatedCharacterWidth = 7.3;           // used by right column text to determine how many characters to show

global.totalRows            = 0;                //42;
global.rowsPerPage          = 42;
global.rowHeight            = 25;               //14    //0.26 inches
global.defaultRowHeight     = global.rowHeight; //14    //0.26 inches
global.documentHeight       = (global.totalRows * global.rowHeight);
global.pageStart            = 92;               // vertical start position of page
global.bufferRowsPerPage    = 3;                // these rows are reserved for page number
global.textMargin           = 2;                // makes the text neater
global.descriptionTextWidth = 303;              // how wide the description text is allowed to get
global.maxDescriptionChars  = 800;             // maximum number of characters per description
global.italicsMultiplier    = 1.65;             // how much to increase the string_width() by so it works with italics
global.linesPerPage         = 42;
global.guiFooterHeight      = 23;
guiFooterHeight             = 23;   // localize the var

global.rightColumnWindowHeaderHeight    = 17;
global.rightColumnItemsSeparation       = 20;
global.rightColumnItemsYPosition        = 36;
global.PRINT_VIEW           = false;
global.BLUE_TEXT            = true;
global.SPELLCHECK           = true;
global.CURSOR_TOOL          = "normal"; // normal, split...
global.DISPLAY_TIPS         = 1; // TIP of the day
global.tip                  = 0; // default starting tip number


fontSize                    = 14;
wview                       = 1024;
hview                       = 768;
global.scale                = 1;
backupTimer                 = 0;                // used for automatically saving backups
global.allowBackup          = false;
global.TIMER                = 0;



global.popup                = 0;

/* FILE MENU */
global.menuItemIndent       = 16;
global.menuSelected         = 0;
global.menuTextHeight       = 20;
global.menuY                = 23;                   // text is drawn from bottom up
global.fileMenuX            = 6;
global.editMenuX            = 41;
global.viewMenuX            = 76;
global.helpMenuX            = 116;

global.endMenuX             = 155;


global.rowNumberX               = 0;
global.dateColumnX              = global.rowNumberX + 33;
global.itemNoColumnX            = global.dateColumnX + 43;
global.cColumnX                 = global.itemNoColumnX + 40;
global.descriptionColumnX       = global.cColumnX + 13;
global.outlayColumnX            = global.descriptionColumnX + 316;
global.fColumnX                 = global.outlayColumnX + 81;
global.professionalColumnX      = global.fColumnX + 50;
global.hColumnX                 = global.professionalColumnX + 81;

global.dateColumnWidth          = (global.itemNoColumnX - global.dateColumnX);          //47;
global.itemNoColumnWidth        = (global.cColumnX      - global.itemNoColumnX);        //40;
global.descriptionColumnWidth   = (global.outlayColumnX - global.descriptionColumnX);   //341;
global.outlayColumnWidth        = (global.fColumnX      - global.outlayColumnX);        //89;
global.professionalColumnWidth  = (global.hColumnX      - global.professionalColumnX);  //89;
global.cColumnWidth             = (global.descriptionColumnX - global.cColumnX);        //14;
global.fColumnWidth             = (global.professionalColumnWidth - global.fColumnX);   //61;

global.pageWidth                = (global.dateColumnX + global.hColumnX);


/// Scroll bars ///
global.middleMouseDragging = false;
global.middle_mouse_scroll_multiplier = 0.5; // multiplier
//global.vertical_scrollbar_dragging = false;
global.scrollbarButtonSize  = 17;
global.scrollSpeed = 3; // number of rows per scroll event
// main scrollbar //

global.scrollbarMinHeight   = 10;


// horizontal scrollbar //
global.scrollbarH_X1            = global.scrollbarButtonSize;
global.scrollbarH_Y1            = ( (window_get_height() - global.guiFooterHeight) - global.scrollbarButtonSize );
global.horizontalScrollAmount   = 5;




/// History ///
global.UNDO = ds_stack_create();
global.REDO = ds_stack_create();
global.historyIteration         = 2;
fontSize                        = 14;
wview                           = 1024;
hview                           = 768;
scale                           = 1;
backupTimer                     = 0;        // used for automatically saving backups




/// RIGHT COLUMN AREA ///
//right_column_customized     = false;
//dragging_right_column       = false;
global.dragging_right_column = false;

var windowWidth             = window_get_width();
right_column_width          = round( window_get_width()/4);

right_column_min_width      = 280;
percentageWidth             = 0.28;
right_column_max_width_percent = 0.4;

right_column_x              = (window_get_width() - right_column_width);
right_column_percentage     = (right_column_x / window_get_width());
windowMargins               = 4;

if (right_column_width &lt; right_column_min_width) then right_column_width = right_column_min_width;






///// PREFERENCES \\\\\\
/* The following should be loaded from an ini file and can be changed by 
 * the user and saved for subsequent runs. */
global.XLSX_Timout          = 6000;         // how many seconds to wait before declaring xlsx export or print failure
global.PRINT_WAIT           = 1500;         // wait this long in ms for excel file to be properly made before attempting print
global.menuTextColor        = c_black;
global.itemTextColor        = c_black;
global.quantumTextColor     = c_black;
global.totalsTextColor      = c_green;
global.pageNumberTextColor  = c_green;
global.grayText             = make_color_rgb(132,132,132);
global.errorText            = c_red;
global.cautionsTextColor    = c_orange;
global.TIMEOUT              = 10;           // how long in seconds to wait until throwing an error when trying to export an xlsx file 
backgroundColor             = make_color_rgb(171,171,171);//128,128,128);
background_color            = backgroundColor;
global.guiColor             = make_color_rgb(240,240,240);
guiColor                    = global.guiColor;
guiDividerColor             = make_color_rgb(160,160,160);
global.guiDividerColor      = guiDividerColor;
pageColor                   = c_white;
global.popupColor           = c_white;
global.popupOutlineColor    = c_black;
pageBreakColor              = c_blue;
itemNoColor                 = c_black;
columnTitleColor            = c_dkgray;
rowColor                    = c_ltgray;            // c_ltgray
columnColor                 = c_red;
lineNoTextColour            = c_dkgray;
lineNoLineColor             = c_dkgray;
lineColumnColor             = c_ltgray;
global.rightColumnCreateButtonsColor = c_blue;
global.hoverColor           = c_blue;
global.tooltipsBackgroundColor = c_white;
global.tooltipsTextColor    = c_black;
global.tooltipsDelay        = 1000;         // delay in ms before tooltip is displayed

global.preProgrammedItemBGColor  = make_color_rgb(180,205,205)
global.normalDateTextColor  = c_black;
global.highlightColor       = c_blue;
global.highlightAlpha       = 0.5;
global.highlightOutline     = false;        // only draw outline?
global.highlightTextColor   = c_white;
global.buttonOverColour1    = c_white;      // top-left corner
global.buttonOverColour2    = c_teal;       // bottom-right corner
global.buttonOverBorderColor= c_blue;       // border
global.buttonOverAlpha      = 0.3;
global.pageUpDownBasedOnViewHeight = false; // should page up/down be based on view height or page height (42 lines)
pageUpDownTimerSpeed        = 0.20;         // lower numbers are faster
global.buttonTimerDelay     = 4;            // controls how quickly scroll bar buttons repeat.
global.buttonRepeatSpeed    = 0.2;          // how many steps between each subsequent repeats.
global.buttonRepeatDelay    = 50;           // in milliseconds (1000 = 1second)
global.delayBeforeButtonRepeat = 500;       // initial delay before button starts repeating
global.cursorBlinkDelay     = 500;          // in milliseconds (1000 = 1 second)
global.textRepeatSpeed      = 0.05;
global.scrollbarColorLight  = make_color_rgb(204,204,204);
global.scrollbarColorDark   = make_color_rgb(180,180,180);
rightColumnWindowHeaderColor= make_color_rgb(216,216,216);
global.sortWarningsAndCautions = true;      // sorting might be slow on some computers

// Tool Tips
global.tooltipString        = "";
global.tooltipCheck         = "";
global.tooltipCounterTime   = 30;
global.tooltipCounter       = global.tooltipCounterTime;
global.contextItemSelected  = -1; // needed for YYC instance_activate issue

global.spellcheckTimer      = 10;
global.DOCtimerRate         = 1;                // How many steps between DOC_ORGANIZER doing its job while editing a description.
global.hScrollbarButtonRepeatSpeed = 0.05       // lower numbers are faster
rightColumnWindowColor      = c_white;          // background color for Warnings and Common Items
global.menuBorderColor      = c_black;
global.menuHighlight        = c_blue;
global.doubleClickTime      = 450;              // in milliseconds


// set some of the above
background_colour = backgroundColor;
depth = -2000;

global.HIDE_INSTRUCTIONS_FEE = false;


//LOCALIZE
rowsPerPage = global.rowsPerPage;


// RECENT FILES
global.recentFileSelected = "";
recentFiles = ds_list_create();
if !file_exists(working_directory + "\recent_files.txt")
    {
    file = file_text_open_write(working_directory + "\recent_files.txt"); // create the file
    file_text_close(file);
    }

if file_exists(working_directory + "\recent_files.txt")
  then file = file_text_open_read(working_directory + "\recent_files.txt");
  
while !file_text_eof(file)
{
    ds_list_add(recentFiles,file_text_read_string(file))
    file_text_readln(file);
}



///DEBUG AVG FPS
fpsAvg = 0;
fpsList = ds_list_create();

alarm[0] = 2; // run the start event


// Before Preferences
backupFrequency         = 10;       // how many minutes between saving the backup
backupFileDateLimit     = 360;      // in days before a file is consider old enough to delete
backupDeleteDate        = 0;        // this just means to ask to delete backups immediately
backupDelay             = 180;      // how many days before checking again

// load preferences
global.DEBUG_MODE = false;
load_preferences();



// BACKUPS
saveBackup                  = true;             // whether or not to autosave backups on a timer
global.autosave_backup_every_change = false;    // whether or not to autosave backups every change
var minute                  = (room_speed * 60);
backupTimerMax              = ((backupFrequency * minute) )//* 5);
global.protectSheet         = "false";          // "true" or "false" string, this is written to xlsx exports to determine if a sheet is locked or not.

// DELETE BACKUPS?
var currentTime = date_current_datetime();
if (currentTime &gt;= backupDeleteDate)
{
    check_for_old_backup_files();   // prompt to delete old backup files
}


// DEBUG OVERRIDES
// global.GUI_SCALE = 1.5;
debug_fps = 0;
debug_fps_poll_count = 0;


global.DEBUG_MODE = false;
if (global.DEBUG_MODE == true)
{
    show_debug_overlay(true);
}



/// keep after load_preferences
// GUI SETUP
if (global.GUI_SCALE == 1)   then global.warnings_separation = 24;
if (global.GUI_SCALE == 1.5) then global.warnings_separation = 36;

viewX = view_xview[0];
viewY = view_yview[0];
old_xview = viewX;
old_yview = viewY;
menu_buttons_x_limit        = (viewX + right_column_x);

old_guiScale = 0;
get_divider_values();


// OPEN A FILE? CAUSES CRASH!
/*
if (global.commandline_argument != "")
{
    global.fileToOpen = global.commandline_argument;
    room_goto(WINDOW);
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// save preferences and window session data
//write_window_session();
write_preferences();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SET SAVED AFTER STARTING
set_saved();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// WORD COUNT / FOLIO
count_folios();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// LOAD WINDOW SESSION OR CENTER SCREEN
//show_message("Master is loading window session");

if (global.resetWindowSettings == false) 
{
    load_window_session(); // get window size and position from the previous run of program
}
else reset_window();

// resposition all the things!
set_relative_positions();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset cursor sprite
var mouseX      = window_mouse_get_x();        // takes the x position from the gui layer and translates it to mouse_x
var mouseY      = window_mouse_get_y();        // takes the y position from the gui layer and translates it to mouse_y


if (room == WINDOW)
{
    if  !( mouseIsOverRightColumnDivider( mouseX, mouseY ))
    and !( mouseIsOverWindowResizeArea( mouseX, mouseY ))
    {
        window_set_cursor(cr_default);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>room == WINDOW</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/////// START ///////


if  (BILL_STARTED == false)
{
    global.RESTARTING = false;
    window_command_hook(window_command_close);      // prevents the [X] button from closing the program.
    if !instance_exists(DOC_ORGANIZER) then instance_create(0,0,DOC_ORGANIZER);
    global.itemID = 0;  // used to give "myID" to new items so we can retain relationships between runs of the program
    
    
    
    //// window setup ////
    window_set_max_width(-1);
    window_set_max_height(-1);
    
    window_set_min_width(-1);
    window_set_min_height(WINDOW_MIN_HEIGHT);
    
    //if (display_get_width() &gt; WINDOW_MIN_WIDTH)
        //then window_set_min_width(WINDOW_MIN_WIDTH);
        //else window_set_min_width(400);
    window_set_min_width(400);
    
    // default window size
    screen_width  = display_get_width();
    screen_height = display_get_height();
    
    window_set_size(screen_width*.8, screen_height*.8);
    window_set_position(screen_width*.1, screen_height*.1);
    
    
    //surface_resize(application_surface, view_wport[0],view_hport[0]); // DO NOT ADD THIS! IT RESIZES WINDOW TO OPENING SCREEN
    
    
    // old_window_whatver = 0 so the screen will be resized, fixes a bug where everything is blurry.
    old_window_width  = 0; // window_get_width();
    old_window_height = 0; // window_get_height();
    
    
    scrollAreaStartY = (global.pageStart + global.scrollbarButtonSize);

    
    
    set_relative_positions();
    
    // initialzie gui
    old_xview = view_xview[0];
    old_yview = view_yview[0];
    old_wview = view_wview[0];
    old_hview = view_hview[0];
    old_right_column_x = right_column_x;
    
    alarm[9] = 1; // RESTORE WINDOW STATE or center the window
    
    //// //// //// //// ////
    
    
    // so we can double-click files to launch Costs Drawer.
    //global.fileToOpen = global.commandline_argument[0];
    
    //// start ////
    if (global.fileToOpen == "")
    {
        create_first_page();
        create_second_page();
        create_last_page();
    }
    else load_file();
    
    if  (global.RESTARTING == false)
    {
        create_GUI();
        
        COMMON_ITEMS_CHECKER.alarm[0] = 2; // UPDATE COMMON_ITEMS list
        
        BILL_STARTED = true;
        reset_text();
        
        //if (global.resetWindowSettings == false) then restore_window_state();
        
        alarm[10] = 10; //count_folios(); // keep after BILL_STARTED = true;
        alarm[11] = 10; // set_saved();
        
        
        
        
        if (global.showUpdateMessage == true)
        {
            var affectedItemsString = "# Affected items:";
            var queue = global.updateAffectedItemsQueue;
            var size  = ds_queue_size(queue);
            
            for (var i=0; i&lt;size; i++)
            {
                affectedItemsString += "#";
                affectedItemsString += ds_queue_dequeue(queue);
            }
            
            show_message("Note: Changes have been made to some items in order to bring this file up to date with Costs Drawer "+string(GM_version)+".#"+string(affectedItemsString));
            
            
            global.showUpdateMessage = false;
        }
        //show_debug_message("**************************************************************");
    
    
    
    master_draw_calculations();
    
    load_window_session();
    
    refresh_right_column();
    
    ///reset debug
    debug_fps = 0;
    debug_fps_poll_count = 0;
    
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EVERY STEP
if (global.RESTARTING == false)
{
    global.fileToOpen = "";
    global.popup = -1;
    
    if !exists(global.selected) then global.selected = -1 // fixes so many potential problems
    
    
    // CLOSING THE PROGRAM WITH THE [X] BUTTON...
    if (window_command_check(window_command_close))
    {
        if (show_question("Are you sure you want to exit?"))
          then game_end();
    }
    
    
    updateTimer();  // used for double-click events and other timed events
    
    master_draw_calculations();
    //check_view_changed();
    user_resize_window();
    user_resize_right_column();
    autosave_backup();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="5" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CTRL + S

if keyboard_check_released(ord('S'))
{
    if (global.USER_FILENAME != "")
    {
        save_file();                    // save
    }
    else {
        save_file_as();                 // save as...
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CTRL+Z, CTRL+Y and CTRL+SHIFT+Z
/*
allow = true;


if  (global.selected &gt; 0)
and (exists(global.selected))
and (global.selected.object_index == USER_ITEM)
{
    if (editing_item(global.selected) == true)
    {
        allow = false
    }
}


if (allow = true)
{
    // UNDO
    if !(keyboard_check(vk_shift))
    and keyboard_check_released(ord('Z'))
    {
        if !(ds_stack_empty(global.UNDO))
        {
            var undo = ds_stack_pop(global.UNDO);   // pop it
            analyze_undo(undo); // perform the event and push to redo.
        }
    }
    
    
    // REDO
    if ( keyboard_check_released(ord('Y')) )
    or ( keyboard_check(vk_shift) and keyboard_check_released(ord('Z')) )
    {
        if !(ds_stack_empty(global.REDO))
        {
            var redo = ds_stack_pop(global.REDO);   // pop it
            analyze_redo(redo); // perform the event and push to undo.
        }
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Zoom in and out
if mouse_wheel_up()
{
    zoom_in();
}

if mouse_wheel_down()
{
    zoom_out();
}

// reset zoom
if keyboard_check_pressed(ord('0'))
{
    reset_zoom();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CTRL + X
var selected = global.selected;

if  ( keyboard_check_pressed(ord('X')) )
and (global.textHighlightable == true)
{
    if ( exists(selected) )
    {
        if ( selected.editingDescription == true )
        {
            with (selected)
            {
                // we need to have the lower pos as start
                var e = endChar;
                var s = startChar;
                
                if (s &gt; e)
                {
                    s = endChar;
                    e = startChar;
                }
                
                
                var count = (e - s);
                var str = string_copy(workingString, s+1, count);
                clipboard_set_text(str);
                
                highlight_delete();
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CTRL + C
var selected = global.selected;

if  ( keyboard_check_pressed(ord('C')) )
and (global.textHighlightable == true)
{
    if ( exists(selected) )
    {
        if ( selected.editingDescription == true )
        {
            with (selected)
            {
                // we need to have the lower pos as start
                var e = endChar;
                var s = startChar;
                
                if (s &gt; e)
                {
                    s = endChar;
                    e = startChar;
                }
                
                
                var count = (e - s);
                var str = string_copy(workingString, s+1, count);
                clipboard_set_text(str);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CTRL + F

if keyboard_check_released(ord('F'))
{
    with (SEARCH_TEXT)
    {
        global.selected = -1;
            
        searchString  = get_string("Search for text...",searchString);
        trimmedString = trim_text(searchString,width);
        
        if (searchString == "") then event_user(0);
        
        search_item_text(1);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// re-calculate gui, etc
master_draw_calculations();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>room = WINDOW</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Save before quit &amp; write session data

if (global.UNSAVED = 1)
{
    if show_question("Warning! Document is unsaved! Save before closing?")
    {
        save_file();
        write_window_session();
    } 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy global lists

//ds_list_destroy(global.yearList);
//ds_list_destroy(global.monthList);
if ds_exists(global.listOfItems,ds_type_list) then ds_list_destroy(global.listOfItems);
if ds_exists(global.WARNINGS,ds_type_list) then ds_list_destroy(global.WARNINGS);
if ds_exists(global.CAUTIONS,ds_type_list) then ds_list_destroy(global.CAUTIONS);
if ds_exists(global.DICTIONARY,ds_type_list) then ds_list_destroy(global.DICTIONARY);

if ds_exists(global.UNDO,ds_type_stack)
{
    ds_stack_clear(global.UNDO);
    ds_stack_destroy(global.UNDO);
}

if ds_exists(global.REDO,ds_type_stack)
{
    ds_stack_clear(global.REDO);
    ds_stack_destroy(global.REDO);
}


if ds_exists(global.updateAffectedItemsQueue,ds_type_queue)
{
    ds_queue_destroy(global.updateAffectedItemsQueue);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// run the destroy event():

instance_destroy(self,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset cursor
/*var mouseX      = window_mouse_get_x();        // takes the x position from the gui layer and translates it to mouse_x
var mouseY      = window_mouse_get_y();        // takes the y position from the gui layer and translates it to mouse_y


if (room == WINDOW)
{
    if  !(mouseIsOverRightColumnDivider(mouseX, mouseY))
    and !(mouseIsOverWindowResizeArea(mouseX, mouseY))
    {
        window_set_cursor(cr_default);
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>room = WINDOW</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>draw_paper</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>draw_rows</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>draw_columns</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>draw_pageBreaks</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>room = WINDOW</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEBUG DRAW FPS
/*
draw_text(100,130,"Real FPS: " +string(fps_real));
draw_text(100,160,"FPS: " +string(fps));
draw_text(100,190,"Avg FPS: " +string(fpsAvg));
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Save Progress Notification

if (global.SAVING == 1)
{
    window_set_cursor(cr_hourglass);
    draw_save_progress();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEBUG
if (global.DEBUG_MODE == true)
{
    draw_set_color(c_red);
    draw_set_font(font_GUI_large);
    
    debug_fps += fps_real;
    debug_fps_poll_count++;
    
    var result = round(debug_fps/debug_fps_poll_count);
    
    var width = 250;
    draw_set_color(c_black);
    draw_set_alpha(0.3);
    draw_rectangle(8, 200, width, 290, false);
    
    
    draw_set_alpha(1);
    
    draw_set_color(c_black);
    draw_text( 11, 231, "Real Cycles Per/S : "+string(round(fps_real)) );
    draw_set_color(c_lime);
    draw_text( 10, 230, "Real Cycles Per/S : "+string(round(fps_real)) );

    
    draw_set_color(c_black);
    draw_text( 11, 261, "AVG Cycles Per/S: "+string(result) );
    draw_set_color(c_yellow);
    draw_text( 10, 260, "AVG Cycles Per/S: "+string(result) );
    

    draw_set_color(c_black);
    draw_text( 11, 291, "FPS: "+string(fps) );
    draw_set_color(c_white);
    draw_text( 10, 290, "FPS: "+string(fps) );
    
    
    reset_text();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw_GUI_dividers();
draw_GUI_dividers();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the COLUMN TITLES and GUI
if (room == WINDOW)
{
    reset_text();
    
    // Draw GUI area at top of screen
    colNamesY = (view_yview[0]+ pageStart);
    var bgx1 = 0;
    var bgy1 = (view_yview[0] + (pageStart - rowHeight));
    var bgx2 = (view_xview[0] + global.page_area_width);
    var bgy2 = (view_yview[0] + pageStart);
    
    draw_set_colour(guiColor);
    draw_rectangle(bgx1,bgy1,bgx2,bgy2,0);
    
    
    // divider line under the column names
    draw_set_colour(guiDividerColor);
    draw_line(bgx1,bgy2,bgx2,bgy2)
    
    
    // set the x and y positions
    var dateTextX = (dateColumnX          +((itemNoColumnX -dateColumnX)        /2));
    var itemTextX = (itemNoColumnX        +((cColumnX      -itemNoColumnX)      /2));
    var descTextX = (descriptionColumnX   +((outlayColumnX -descriptionColumnX) /2));
    var otlyTextX = (outlayColumnX        +((fColumnX      -outlayColumnX)      /2));
    var profTextX = (professionalColumnX  +((hColumnX      -professionalColumnX)/2));
    
    draw_set_color(columnTitleColor);
    draw_set_halign(fa_center);
    
    draw_text(dateTextX,colNamesY,"Date");
    draw_text(itemTextX,colNamesY,"No.");
    draw_text(descTextX,colNamesY,"Description");
    draw_text(otlyTextX,colNamesY,"Outlay");
    draw_text(profTextX,colNamesY,"Professional");
    
    draw_gui();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Split Tool icon next to mouse pointer

if  (room == WINDOW)
and (global.CURSOR_TOOL == "split")
{
    draw_sprite(spr_split_tool,0,mouse_x+5,mouse_y);
    
    if mouse_check_button_released(mb_right) // right-click ends tool use
    {
        global.CURSOR_TOOL = "normal";
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// end split tool mode
if (global.CURSOR_TOOL == "split") then global.CURSOR_TOOL = "normal";
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
