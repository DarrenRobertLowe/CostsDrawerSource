<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create event
editor = DEFAULT_ITEMS_EDITOR;
height = 100;
width  = 18;
x = editor.windowX2;
y = editor.listStartY;

scrollbarAreaHeight             = 0;
updateInterval                  = global.sideColumnUpdateSpeed;             // (room_speed/N) so higher is faster
rightColumnWindowHeaderHeight   = global.rightColumnWindowHeaderHeight;     // header area height
delayBeforeButtonRepeat         = -1;


doubleClickTime     = global.doubleClickTime;
doubleClickTimer    = 0;    // doubleClickTime;


mouseOver           = false;
dragging            = false;
scrollSpeed         = global.scrollSpeed;
currentPos          = 0;    // how far we have scrolled vertically
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// recalculate values

// position the scrollbar to the index
if (dragging == false)
{
    var index       = editor.indexSelected;
    var listHeight  = (editor.size * editor.rowHeight);    // was documentHeight
    
    // calculate the position of the scrollbar
    var scrollableDistance      = (scrollAreaHeight - height);                                              // the scrollbar itself takes up an amount of the scroll area
    var percentagePosition      = floor( (index / (listHeight - (index - scrollAreaStartY) )) *100);        // the view position in %
    var position                = floor( (scrollableDistance/100) * percentagePosition);                    // the actual scrollbar position
    
    scrollbarPosition = position;    // needed for dragging
    
    y  = (scrollAreaStartY + scrollbarPosition);  // y of the scrollbar itself, not the area
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// mouse hover and click events
// NOTE: editor = DEFAULT_ITEMS_EDITOR

// before dragging
if (dragging == false)
{
    // mouse is over the scrollbar itself
    if ( mouseOverDefaultItems_Scrollbar() )
    {
        mouseOver = true;
        
        if ( mouse_check_button_pressed(mb_left) )      // Mouse is clicked on the bar itself
        {
            dragging  = true;
            mouse_pos = (window_mouse_get_y() - y);     // the mouse position on the scrollbar
        }
    }
    
    
    // mouse is just over the scrollbar area
    else if ( mouseOverScrollArea() )
    {
        if ( mouse_check_button_pressed(mb_left) )      // Mouse is clicked on the scroll area
        {
            y = ( window_mouse_get_y() - (height/2) );  // center scrollbar on the mouse
            constrain_scrollbar();
            
            
            // first we find what percentage the scrollbar is down the scoll area
            var scrollableDistance  = (scrollAreaHeight - height);      // example: scrollable distance is 450 if the bar itself is 100 pixels and the area is 550.
            var pixelPosition       = (y - scrollAreaStartY);
            var percentagePosition  = (pixelPosition / scrollableDistance);
            
            // translate the percentage to the number
            var adjustedTotal = (editor.size - editor.maxItemVisible);  // otherwise we get a window's worth of whitespace at the bottom of the list.
            return round(adjustedTotal * percentagePosition);
            
            
            editor.startingIndex = currentPos;
            //alarm[0] = 1;
            
            exit; // avoid running the dragging event
        }
    }
    
    
    // mouse is over nothing
    else
    {
        mouseOver = false;
    }
}



// while dragging
if ( dragging == true )
{
    y = ( window_mouse_get_y() - mouse_pos );
    constrain_scrollbar();
    currentPos = customItems_get_current_item_from_scrollbar(); // false here says we don't have a horizontal bar 
    
    editor.startingIndex = currentPos;
    //alarm[0] = 1;
}


// finished dragging
if ( mouse_check_button_released(mb_left) )
{
    currentPos = customItems_get_current_item_from_scrollbar();
    
    editor.startingIndex = currentPos;
    //alarm[0] = 1;
    
    
    dragging = false;
    constrain_scrollbar();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the scroll bar
if (mouseOver)
{
    draw_set_color(global.scrollbarColorDark)   // dark gray
}
else
{
    draw_set_color(global.scrollbarColorLight)  // light gray
}

draw_rectangle(x, y, (x + width), (y + height), 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
