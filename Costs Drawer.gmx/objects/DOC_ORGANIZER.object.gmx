<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
completeList = ds_list_create();

tempLines = ds_list_create();
startFrom = -1;

organize = false;
visible = false;


alarm[0] = 2;

updateTotals = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Organize the Doc
// Are we being told to redo the document?
//gml_pragma("forceinline");  // increases cpu speed but also the exe size (needs to be used per script!)


if  (global.RESTARTING == false) // fixes issues when returning to start page
and (room == WINDOW)
{
    if (startFrom == -1) then updateTotals = true;
    
    
    list = global.listOfItems;
    var movedToNewPage = false; // needed so we know when to sort all the last page items instead of just a few.
    
    
    // start from a given item id
    var startIndex = 0;
    pos = ds_list_find_index(list,startFrom);
    startIndex = max(0,pos);
    
    
    
    // POSITION EACH ITEM DIRECTLY AFTER THE PREVIOUS ITEM (they get repositioned later)
    //show_debug_message("*** First pass starting from startIndex " +string(startIndex));
    
    
    
    for (var i=startIndex; i&lt;ds_list_size(list); i++)       // iterate through every item
    {
        var item  = ds_list_find_value(list,i);             // the current item (i)
        var myRow = item.row;
        
        if  (exists(item))
        and (item_unmoveable(item) == false)
        {
            //show_debug_message("Trying to reposition "+string(item));
            // FIND THE VALID PREVIOUS ITEM
            for(var v=(i-1); v&gt;0; v--)
            {
                prevItem = ds_list_find_value(list,v);
                
                if  (prevItem.object_index != TOTALS)
                and (prevItem.object_index != PAGE_NUMBER)
                {
                    v = 0; // end the loop
                }
            }
            
            // SET THE ITEM ROW
            item.row = (prevItem.row + prevItem.lines);                                 // get our row from the previous item
            if (item.row &lt; 45) then item.row = 45;                                      // always after the first page
            
            
            
            // ADJUST ROWs
            if (item.object_index == VAT)
            {
                item.row--;
            }
            
            if (item.object_index == item_WHITESPACE)
            {
                item.row++;
            }
            
            
            if  (item.object_index != TOTALS)
            and (item.object_index != PAGE_NUMBER)
            and (item.object_index != BUTTON_CreateNewItem)
            and (item.countMyItemNumber == false)
            {
                if exists(prevItem)
                {
                    // if there's no see fee later...
                    if (prevItem.outlay &gt; 0)
                    or (prevItem.professional &gt; 0)
                    or (prevItem.outlayText == NOQUANTUM)
                    or (prevItem.professionalText == NOQUANTUM)
                     then item.row --;
                     else item.row -= 2;
                    
                    // if there's no place for quantum at all...
                    if  (prevItem.hasProfessional = false)
                    and (prevItem.hasOutlay = false)
                    {
                        item.row++;
                    }
                }
            }
            
            
            // CREATE A NEW PAGE?
            var lastPage        = get_last_user_page();
            var pageNumber      = getPageNumberFromRow(item.row);
            var rowThreshold    = (pageNumber * global.rowsPerPage);
            var itemRowEnd      = (item.row + item.lines);
            
            
            /// BLOCK ITEM?
            itemRowEnd = docOrganizerCheckForBlock(item);
            
            // move to next page
            if (itemRowEnd &gt; (rowThreshold-1)) // leave at least one line before TOTALS
            {
                item.row = (rowThreshold + 3);  // move to next page
                movedToNewPage = true;
            }
            
            
            // if the row has changed
            if (item.row != myRow) 
            {
                i = startIndex; // go through loop again
            }
        }
    } // END of normal items
    
    reorder_list(list);
    
    
    
    
    //// LAST PAGE ITEMS ////
    //show_debug_message("*** Phase 2: last page items ***");
    
    /* NOTE: What we're doing here is...
     * WE don't know where to place GENERAL_INSTRUCTIONS_FEE
     * yet, so we're instead going back through the
     * global.listOfItems until we find an item that isn't
     * a TOTALS or a PAGE_NUMBER (because there can be any
     * number of TOTALS and PAGE_NUMBERS at the end of the
     * list), then we're adding two to lastItem index, which
     * should be the PAGE_NUMBER after-which GENERAL_INSTRUCTIONS_FEE
     * should be placed.
    */
    
    lastItem = -1;
    
    /// Finds the PAGE_NUMBER item after the lastmost normal item
    var size = ds_list_size(global.listOfItems);
    for(var i=(size-1); i&gt;0; i--)
    {
        lastItem = ds_list_find_value(global.listOfItems,i);
        
        if  (lastItem.object_index != TOTALS)
        and (lastItem.object_index != PAGE_NUMBER)
        {
            lastItem = ds_list_find_value(global.listOfItems,i+2);      // = lastItem, +1=TOTALS, +2=PAGE_NUMBER
            i=0;
        }
    }
    
    
    
    /// Find the row to place GENERAL_INSTRUCTIONS_FEE
    if (item_is_pagenumber(lastItem))
    {
        lastItem.lines = 2; // HACK! A weird bug sets lines to 3 after loading somehow.
    }
    
    
    
    // Sometimes lastItem can't be found (not sure why), 
    // this will avoid a crash and should still be correct.
    // Honestly this should probably just replace the code
    // above.
    var minRow = 0;
    if exists(lastItem) then minRow = (lastItem.row + lastItem.lines);
    else
    {
        lastItem = -1;
        var size = ds_list_size(global.listOfItems);
        
        for(i=size; i&gt;0; i--)
        {
            lastItem = ds_list_find_value( global.listOfItems, i );
            
            if exists(lastItem)
            {
                var lastObj = object_get_name(lastItem.object_index);
                
                if  (lastObj != "TOTALS")
                and (lastObj != "PAGE_NUMBER")
                {
                    i=0; // end the loop
                }
            }
        }
        
        
        show_debug_message("WARNING! Doc_Org couldn't find last item, so now it's " +string(lastObj) +" : " +string(lastItem));
        
        var lastPage = getPageNumberFromRow(lastItem.row);
        
        minRow = (lastPage * global.rowsPerPage)+3; // so it starts on the new page
    }
    
    
    
    
    // position the GENERAL INSTRUCTIONS FEE
    GENERAL_INSTRUCTIONS_FEE.row = minRow;
    if (movedToNewPage)
    {
        var itemPageNumber = getPageNumberFromRow(lastItem.row);
        
        if (get_last_page() == itemPageNumber)                                                      // if the last page is the same page as the last user item...
        {
            create_new_page();                                                                      // make a new page for general instructions to move to
        }
        
        minRow = (((itemPageNumber - 1) * global.rowsPerPage));
        
        if instance_exists(GENERAL_INSTRUCTIONS_FEE)
          then GENERAL_INSTRUCTIONS_FEE.row = minRow;                                               // move general instructions to the new page
    }
    
    
    
    // POSITION EACH LAST PAGE ITEM DIRECTLY AFTER THE PREVIOUS ITEM (they get repositioned later)
    var list = global.LAST_PAGE_ITEMS;
                                                                                 // where we're starting on the lastPage items
    // Start from the fee item?
    /*
    var lpStart = 0;   
    
    if  ( movedToNewPage == false )
    and !( is_undefined(startFrom) )
    and ( instance_exists(startFrom) )
    and ( startFrom.object_index == USER_ITEM )
    {
        var fee = startFrom.myFee;
        
        //var pos = ds_list_size(list);
        for(var pos = ds_list_size(list); pos &gt; -1; pos--)    //pos = pos; pos &gt; -1; pos--)
        {
            if (ds_list_find_value(list, pos) == fee)
            then break;
        }
        lpStart = max(0,pos);   // don't allow -1
    }
    */
    
    //show_debug_message("*** last page starting from " +string(lpStart));
    
    
    var lpStart = 0;
    show_debug_message("**** SORTING LAST PAGE ITEMS ****");
    // position the items
    for (var i=lpStart; i&lt;ds_list_size(list); i++)                                              // iterate through every item
    {
        var item = ds_list_find_value(list,i);                                                  // the current item (i)
        
        //show_debug_message("current item : " +string(item) + " row: " +string(item.row)  );
        
        if (instance_exists(item))
        {
            /// NOTE: After testing, skipping items doesn't speed things up at all, surprisingly!
            /// The slowdown was caused by TOTALS updating.
            //if  (item.object_index == INSTRUCTIONS_FEE_ITEM)
            //and (global.HIDE_INSTRUCTIONS_FEE == true)
            //{
                // just skip these items
                // //show_debug_message("skipping instructions fee " +string(item.id));
            //}
            //else
            //{
                // set prevItem
                prevItem = ds_list_find_value(list,i-1);
                
                if (i&lt;0)
                or !(docOrg_valid_prevItem(prevItem))
                {
                    prevItem = lastItem;
                }
                
                
                // show_debug_message("prevItem = "+string(prevItem));
                //show_debug_message("prevItem.row = " +string(prevItem.row));
                // show_debug_message("prevItem.lines = " +string(prevItem.lines));
                // SET THE ITEM ROW
                if exists(prevItem)
                  then item.row = (prevItem.row + prevItem.lines);                                                         // get our row from the previous item
                  else item.row = 0;
                
                if (item.row &lt; minRow) then item.row = minRow;                                                      // always after the first page
                
                
                /// ADJUST ROWs
                if (item.object_index == lastPage_WITNESSES)
                {
                    item.row++;
                    // uncomment to move WITNESSES to next page - warning! Causes problems!!
                    // what problems? Seems to work fine...
                    // OH.... oh my...
                    // update: everything seems to work fine now? I need to be more specific with my comments...
                    
                    if (global.startWitnessesOnNewPage == true)
                    {
                        var prevPage = getPageNumberFromRow(prevItem.row);
                        item.row = ((prevPage * global.rowsPerPage) + 3);
                    }
                }
                if (item.object_index == WITNESS)
                {
                   item.row++;
                }
                if (item.object_index == WITNESS_FEE)
                {
                   //item.row += ds_list_size(item.master.nameList);
                }
                if (item.object_index == lastPage_SUBTOTAL)
                {
                    item.row+=2;
                    
                    // prevents sub total from being on same line as carry over.
                    if (item.row mod global.rowsPerPage == 1)
                    then item.row+=2;
                }
                
                
                // CREATE A NEW PAGE?
                var lastPage        = get_last_page();
                var pageNumber      = getPageNumberFromRow(item.row);
                var rowThreshold    = (pageNumber * global.rowsPerPage);
                var itemRowEnd      = (item.row + item.lines);
                
                
                // is this a block of items?
                itemRowEnd = docOrganizerCheckForBlock(item);
                
                if ( itemRowEnd &gt;= (rowThreshold-1) )
                {
                    if (pageNumber == lastPage)
                    {
                        create_new_page();
                        //show_message("New Page Created!");
                    }
                    
                    item.row = (rowThreshold + 4);
                }
                
            //show_debug_message("new item.row : "+string(item.row));
        }
    } // FINISHED SORTING ALL ITEMS
    
    
    
    // DELETE EXTRA PAGES (note: we don't delete the totals and page_numbers.)
    var lastRow = getPageNumberFromRow(lastPage_VATNumbers.row);
    global.totalRows = (lastRow * 42);
    
    image_index = 0;
    
    
    
    
    //reset_progress_bar();
    window_set_cursor(cr_default);
    startFrom = -1;
    
    
    WARNINGS_MASTER.alarm[0] = 1;
    
    if (movedToNewPage == true) then updateTotals = true;
    
    if (updateTotals == true)
    {
        //NOTE! This is run by lastPage_TOTAL alarm[0] on startup. //
        //show_debug_message("DOC_ORG instructed to update totals");
        update_totals();                    // update the totals
    }
    
    
    //update_totals();                                            // recalculate the totals
    
    
    if instance_exists(PROGRESS_BAR) then PROGRESS_BAR.visible = 0;
    
    // load the view position
    if (global.load_view_y == true)
    {
        view_yview[0] = global.view_y_to_load;
        global.load_view_y = false;
    }
    
    
    updateTotals = false;
}
count_folios();
window_set_cursor(cr_default);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// show "Sorting List..." message

// setup
//show_message("running doc org from "+string(startFrom));
//show_debug_message("_____running DOC ORGANIZER_____");
if (window_get_cursor() != cr_hourglass) then window_set_cursor(cr_hourglass);


if instance_exists(PROGRESS_BAR)
{
    PROGRESS_BAR.visible = 1;
    PROGRESS_BAR.x = ( view_xview[0] + (view_wview[0]/2) - sprite_get_width(spr_sorting) );
    PROGRESS_BAR.y = ( view_yview[0] + (view_hview[0]/2) );
}


alarm[1] = 2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="116">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manually Organize Doc
startFrom = -1;
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
