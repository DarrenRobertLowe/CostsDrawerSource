<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CONSTANT_ITEM</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/********************
All Item objects should work the same way so that
exporting to CSV can be done without deciphering
object types first. Therefore, we should always
inherit the create event so that every item has
a list for description lines, etc.
*********************/

event_inherited();

/********************/
countMyItemNumber = false;
combinedList = ds_list_create();
hasDate             = false;
ds_list_add(global.LAST_PAGE_ITEMS,id);

description = "SUB TOTAL";//"   ";
shownDescription = description;

formatDescription(descriptionList,description,false);
formatDescription(shownDescriptionList,shownDescription,false);

lines = 1;

totalOutlay         = 0;
totalProfessional   = 0;
outlayText          = formatQuantum(totalOutlay);       // needed for xlsx
professionalText    = formatQuantum(totalProfessional); // needed for xlsx

var pages = (global.totalRows / global.rowsPerPage);
row = (pages*global.totalRows)+3;


updateInterval = (room_speed*2);    // interval for updating TOTALS
alarm[0] = updateInterval;          // set that now
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UPDATE TOTALS

/* CALCULATE Totals */
totalOutlay = 0;                                            // where we'll store the total totalOutlay thus far
totalProfessional = 0;                                      // where we'll store the total totalProfessional thus far

var list = global.listOfItems;                              // to keep the code legible
var index = ds_list_find_index(list,id);                    // find our position on the list
var size = 0;


// CREATE A COMBINED LIST
ds_list_clear(combinedList);
ds_list_copy(combinedList,global.listOfItems);
size = ds_list_size(global.LAST_PAGE_ITEMS);

for(var i=0; i&lt;size; i++)
{
    var item = ds_list_find_value(global.LAST_PAGE_ITEMS,i);
    
    if instance_exists(item)
    and (item.object_index != lastPage_SUBTOTAL)            // don't include these...
    and (item.object_index != lastPage_VATNumbers)
    and (item.object_index != lastPage_Address)
    and (item.object_index != lastPage_DatedSignature)
    and (item.object_index != lastPage_TOTAL)
    and (item.object_index != lastPage_OutlayToTotal)
    and (item.object_index != lastPage_ProVAT)
    {
        ds_list_add(combinedList,item);
    }
}

// NOTE: TOTALS and PAGE_NUMBER are not counted in this way 
// because they use 'totalOutlay' and 'totalProfessional' vars.

// Add all the values
size = ds_list_size(combinedList);
for(var i=0; i&lt;size; i++)
{                                
    var item = ds_list_find_value(combinedList,i);
                                                            // if (item.pageNumber &lt;= pageNumber)...
    totalOutlay       += item.outlay;                       // add together all the outlays
    totalProfessional += item.professional;                 // add together all the professionals
}

outlayText          = formatQuantum(totalOutlay);           // needed for xlsx
professionalText    = formatQuantum(totalProfessional);     // needed for xlsx

alarm[0] = updateInterval;                                  // INTERVAL FOR UPDATING TOTALS (Run again before exporting XLSX)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW THE DATA
lines = 1;
if in_view()
{
    // Setup
    draw_set_font_scaled(font_Times);                           // set font to unstyled Times New Roman.
    draw_set_color(global.itemTextColor);
    textPosY = getYFromRow(row+1);

    var list = global.listOfTotals;
    pageNumber = getPageNumberFromRow(row)                      // ds_list_find_index(list,id);
    
    
    // DRAW Description
    draw_set_color(global.grayText);
    
    if (global.PRINT_VIEW) == false
    {
        draw_set_halign(fa_left);
        draw_text(                                                  // draw_text(...
            global.textMargin + global.descriptionColumnX,          // x,
            textPosY,                                               // y,
            "SUB TOTAL"
            );
        reset_text();
    }
    
    // DRAW totalOutlay
    draw_set_halign(fa_right);
    draw_set_color(global.itemTextColor);
    
    if (totalOutlay != 0) {
        draw_text(
            global.fColumnX,                                    // x position right side of the column
            textPosY,                                           // y position
            outlayText,                                         // total Outlay amount
            );
    }
  
    // DRAW totalProfessional
    if (totalProfessional != 0) {
        draw_text(
            global.hColumnX,                                    // x position right side of the column
            textPosY,                                           // y position
            professionalText                                    // total Professional amount
            );
    }
    reset_text();
    

    /// DRAW THE ABOVE BORDERLINES
    // outlay border
    yy = y;
    xx = global.outlayColumnX;
    
    draw_line(
        xx,
        yy,
        xx + (global.fColumnX - global.outlayColumnX),
        yy
        )
   
    // professional border
    xx = global.professionalColumnX;
    
    draw_line(
        global.hColumnX,
        yy,
        xx + (xx - global.professionalColumnX),
        yy
        )
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
