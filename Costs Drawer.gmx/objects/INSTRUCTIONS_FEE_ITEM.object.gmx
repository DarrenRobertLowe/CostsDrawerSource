<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>ITEM</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/********************
All Item objects should work the same way so that
exporting to CSV can be done without deciphering
object types first. Therefore, we should always
inherit the create event so that every item has
a list for description lines, etc.
*********************/

event_inherited();

/********************/
myID = -2;
hasNoFee            = true;
hasDate             = false;
hasYear             = false;
hasMonth            = false;
hasDay              = false;
instructionsFee     = false;
hasNoFee            = true;     // don't add a line for "see fee later"
countMyItemNumber   = false;    // don't increase the item counter for this item type
canDelete           = true;
row                 = 0;        //(GENERAL_INSTRUCTIONS_FEE.row + 1);
linked              = true;     // so the original item doesn't overwrite this one after editing it.
seeFeeLater         = false;
moveable            = true;

lines = 1;

hasDescription    = true;     // we can't edit the description
hasOutlay         = false;    // we can't edit the outlay
hasProfessional   = false;    // we can't edit the professional

outlay       = 0;
professional = 0;
descriptionX    = (textMargin + global.descriptionColumnX);


alarm[0] = 1; // find the master
//alarm[1] = 1;

event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy event
event_inherited();

var pos = ds_list_find_index(global.LAST_PAGE_ITEMS,id);
if (pos != -1)
{
    //show_message("found Fee " +string(id) +" on the LAST PAGE ITEMS list at position " +string(pos))
    ds_list_delete(global.LAST_PAGE_ITEMS,pos);
}

if !(is_undefined(master))
and (instance_exists(master))
{
    with (master)
    {
        myFee = -3;  // meaning it was deleted
    }
}

POPUP.alarm[0] = 1;
POPUP.description = "Deleted Instructions Fee row "+string(row);

DOC_ORGANIZER.startFrom = id;
DOC_ORGANIZER.alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Find our master
master = find_ID(masterID);
master.myFee = id;
lines = master.lines;

//show_debug_message("INSTRUCTIONS FEE ITEM LINES = "+string(lines));

//show_message("setting description to "+string(master.description));
//description = master.description;
//shownDescription = master.shownDescription;
//formatDescription(shownDescriptionList,shownDescription,false);

DOC_ORGANIZER.alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// FIND OUR LIST POSITION
var list = global.LAST_PAGE_ITEMS;

if (ds_list_find_index(list,id) == -1) // if we're not on the list...
{
    var size = ds_list_size(list);
    
    for(var i=(size-1); i&gt;=0; i--)  // iterate backwards through list
    {
        var item = ds_list_find_value(list,i);
        
        if  !(is_undefined(item))
        and instance_exists(item)
        {
            if (item.object_index == INSTRUCTIONS_FEE_ITEM)
            or (item.object_index == GENERAL_INSTRUCTIONS_FEE)
            or (item.object_index == GENERAL_INSTRUCTIONS_DETAILS)
            {
                if (item.id != id)
                {
                    row = (item.row + item.lines);
                    ds_list_insert(list,i+1,id);
                
                    break;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GET DESCRIPTION AND CLICK EVENTS



// CHECK IF WE SHOULD EXIST
if  (linked == true)            // in case we want to "unlink" the fee from the master so it can be edited, in which case it'll be set it to -1
and !(instance_exists(master))
{
    instance_destroy();
}



// HIGHLIGHT
if (in_view())
{
    descriptionX    = (textMargin + global.descriptionColumnX);
    mouseOverChecks();          // handles click events
    reset_text();
}

if (linked == true)
{
    if (exists(master))
    {
        /*
        if (master.seeFeeLater == false)
        {   
            instance_destroy();
            POPUP.alarm[0] = 1;
            POPUP.description = "Deleted Instructions Fee row "+string(row);
            exit;
        }
        */
        
        //master.myFee = id; // needed for loadin
        
        // get the description from the actual item.
        if  (in_view())
        and (global.HIDE_INSTRUCTIONS_FEE == false)
        {
            if (linked == true)
            {
                shownDescription = master.shownDescription;
                formatDescription(shownDescriptionList,shownDescription,false);
            }
            
            // get the text position
            textPosX  = global.descriptionColumnX;
            textPosY  = getYFromRow(row+1);
            rowHeight = global.rowHeight;
            
            reset_text();
            if (global.PRINT_VIEW == true)
             then draw_set_color(global.itemTextColor);
             else draw_set_color(global.grayText);
            
            
            var list = shownDescriptionList;
            size  = ds_list_size(shownDescriptionList);
            lines = (size+1);
            
            // DRAW Description
            for(var i=0; i&lt;size; i++)
            {
                var line = ds_list_find_value(list,i)
                
                draw_text(                                              // draw_text(...
                    global.textMargin + global.descriptionColumnX,      // x,
                    textPosY + (i*global.rowHeight),                    // global.rowHeight changes with global.scale!
                    line                                                // see create event for text
                    );
            }
            
            reset_text();
        }
    }
}
else
{
    masterID = -1;
    
    /// DRAWING, SELECTING ITEM FIELDS, etc.
    if (in_view() == true)
    or (editingDescription == true)
    {
        // GENERAL SETUP //
        textPosY        = getYFromRow(row+1);                           // +1 because text is drawn from bottom up and getYFromRow returns row -1. Don't know why, but it seems to be needed.
        index           = ds_list_find_index(global.listOfItems,id);    // get our item's index
        
        
        
        /// OPTIMIZATION ///
        descriptionWidth= (global.descriptionTextWidth * global.scale);
        rowHeight       = global.rowHeight;
        
        
        ///////////////// DRAW THE DATA \\\\\\\\\\\\\\\\\\\
        
        /// SETUP
        draw_set_halign(fa_right);
        textPosX = global.itemNoColumnX;    //( global.dateColumnX + (global.dateColumnWidth/2) );
         yearString  = "";
         monthString = "";
         dayString   = "";
        
         
        // DRAW DESCRIPTION
        if (editingDescription == false)
        {
            reset_text();
            
            draw_set_halign(fa_left);
            
            for(i=0; i&lt;ds_list_size(shownDescriptionList); i+=1)            // go line by line through description
            {
                draw_text(                                              // draw_text(...
                    descriptionX,                                       // x,
                    textPosY + (i*rowHeight),                           // y,
                    ds_list_find_value(shownDescriptionList,i)               // "string" )
                    );
            }
            reset_text();
        }
        
        lines = ds_list_size(shownDescriptionList)+1;

        
        ///////////////// EDITING THE DATA \\\\\\\\\\\\\\\\\\\
        if (global.selected == id) 
        {
            // HIGHLIGHT THE ITEM //
            drawBorder("item");
            
            
            ////////// EDIT Item No //////////
            if (selectedField  == "item number")
            {
                set_unsaved();  //global.UNSAVED = 1                        // Mark that the file has been changed
                
                popupWaiting     = true;                                    // prevent other popups while we're doing this
        
                drawBorder("item number");
                
                countMyItemNumber = !countMyItemNumber;                     // toggle countMyItemNumber on|off
                popupWaiting    = false;
                selectedField   = "none";
            }
            
            ///////////////////  EDIT DESCRIPTION  //////////////////
            edit_description(textPosY);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
