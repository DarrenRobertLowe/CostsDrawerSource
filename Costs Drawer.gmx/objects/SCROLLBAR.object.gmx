<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create event
middle_mouse_y_pos = -1;
middle_mouse_x_pos = -1;
middle_mouse_scroll_multiplier = global.middle_mouse_scroll_multiplier;
old_xview = view_xview[0];
old_yview = view_yview[0];


// avoid crash when minimized at startup
height              = 1; 
documentHeight      = (global.totalRows * global.rowHeight);
scrollSpeed         = (global.rowHeight * global.scrollSpeed);

/* Scrollbar Vars */
pageStart           = global.pageStart;
width               = global.scrollbarButtonSize;

scrollAreaStartX    = ( window_get_width() - global.right_column_width );
scrollAreaStartY    = (global.pageStart + global.scrollbarButtonSize)
scrollAreaEndY      = ( window_get_height() - ((global.scrollbarButtonSize*2)+global.guiFooterHeight) );

scrollAreaHeight     = (scrollAreaEndY - scrollAreaStartY);

instance_create(787,global.pageStart,button_ScrollUp);
instance_create(787,scrollAreaEndY,button_ScrollDown);



//scrollSpeed         = global.scrollSpeed;
scrollSpeed         = (global.rowHeight * global.scrollSpeed);
minHeight           = global.scrollbarMinHeight;
mouseOver           = false;
dragging            = false;
scrollbarShown      = false;

delayBeforeButtonRepeat = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///find x position
//width = global.scrollbarButtonSize;
//if (global.GUI_SCALE == 1.5) then width *= 1.5


scrollAreaStartX    = (window_get_width() - global.right_column_width);
scrollAreaEndX      = (scrollAreaStartX + width);
x = scrollAreaStartX;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// find height of scroll area

scrollAreaEndY   = (window_get_height() - global.guiFooterHeight) - (global.scrollbarButtonSize*2);
scrollAreaHeight = (scrollAreaEndY      - scrollAreaStartY);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// find the height of the scroll bar


/* setup */
var maxHeight   = scrollAreaHeight;
documentHeight  = (global.totalRows * global.rowHeight);


// the scrollbar height
height = maxHeight / (documentHeight/maxHeight);        // lovely bit of math.
height = floor(height);


// constrain the height
if height &gt; maxHeight then height = maxHeight;
if height &lt; minHeight then height = minHeight;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// position the scrollbar to the view

if (dragging == false)
{
    // calculate the position of the scrollbar
    var scrollableDistance      = (scrollAreaHeight - height);                              // the scrollbar itself takes up an amount of the scroll area
    var percentagePosition      = floor( (view_yview[0] / (documentHeight - (view_hview[0] - scrollAreaStartY) )) *100);   // the view position in %
    var position                = floor( (scrollableDistance/100) * percentagePosition);    // the actual scrollbar position

    scrollbarPosition = position;    // needed for dragging
    
    y  = (scrollAreaStartY + scrollbarPosition);  // y of the scrollbar itself, not the area
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// pageUpDownTimer -= 1;
/*
pageUpDownTimer -= 1;
if pageUpDownTimer &lt; 0 then pageUpDownTimer = 0;
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// middle mouse button
if (mouse_check_button(mb_middle))
{
guix = window_mouse_get_x();        // takes the x position from the gui layer and translates it to mouse_x
guiy = window_mouse_get_y();        // takes the y position from the gui layer and translates it to mouse_y
        
    if (middle_mouse_y_pos == -1)
    or (middle_mouse_x_pos == -1)
    {
        middle_mouse_y_pos = guiy;
        middle_mouse_x_pos = guix;
        view_xview[0] = 1;
    }
    
    
    if (middle_mouse_y_pos &gt; -1)
    or (middle_mouse_x_pos &gt; -1)
    {
        window_set_cursor(cr_size_all);
        MASTER.alarm[8] = 2;
        
        view_yview[0] -= ((middle_mouse_y_pos - guiy) * middle_mouse_scroll_multiplier);
        
        SCROLLBAR_H.dragging = true;
        
        global.middleMouseDragging = true;
    }
    
    constrain_view();
}

if (mouse_check_button_released(mb_middle))
{
    global.middleMouseDragging = false;
    middle_mouse_y_pos = -1;
    middle_mouse_x_pos = -1;
    SCROLLBAR_H.dragging = false;
    window_set_cursor(cr_default);
    mouse_clear(mb_middle);
}

view_yview[0] = floor(view_yview[0]);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// mouse hover and click events
if (scrollbarShown)
{
    /* before dragging */
    if (dragging == false)
    {
        /* mouse is over the scrollbar itself */
        if (mouseOverScrollbar())
        {
            mouseOver = true;
            
            if mouse_check_button_pressed(mb_left)      // MOUSE CLICK ON BAR ITSELF
            {
                dragging = true;
                mouse_pos = (window_mouse_get_y() - y);
            }
        }
        
        /* mouse is just over the scrollbar area */
        else if (mouseOverScrollArea())
        {
            if (mouse_check_button_pressed(mb_left))    // MOUSE CLICK ON AREA
            {
                y = window_mouse_get_y()-(height/2);    // center on the mouse
                    constrain_scrollbar();
                    get_view_y_from_scrollbar();
                    constrain_view();
                exit;                                   // avoid running the dragging event
            }
        }
        
        /* mouse over nothing */
        else mouseOver = false;
    }
    
    
    /* while dragging */
    if (dragging == true)
    {
        global.MOUSE_FREE = false;
        global.vertical_scrollbar_dragging = true;
        y = ( window_mouse_get_y() - mouse_pos );
                    constrain_scrollbar();
                    get_view_y_from_scrollbar();
    }
    
    
    /* finished dragging */
    if (mouse_check_button_released(mb_left))
    and (dragging == true)
    {
        global.vertical_scrollbar_dragging = false;
        dragging = false;
                    constrain_scrollbar();
                    get_view_y_from_scrollbar();
                    constrain_view();
                    
        global.MOUSE_FREE = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="34">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scroll the page up by 1 full view height
/* 
 * Note: it may be preferable to make this jump to the
 * beginning of a page (42 lines), so I've added a
 * variable to switch modes. The user can decide this
 * themselves.
*/


/* initiate vars */
var pageHeight  = (global.linesPerPage * global.rowHeight);
var a           = floor(view_yview[0]/pageHeight);      // find out how many pages down we are (rounded down)



/* move the page once */
if delayBeforeButtonRepeat = -1{
    if global.pageUpDownBasedOnViewHeight == true{      // if based on view height
        view_yview[0] += view_hview[0];
    }
    else{
        view_yview[0]   = a * pageHeight;               // snap to the nearest page start (42 line increment)
        view_yview[0]  += pageHeight;                   // now move us down to the next page
    }
    constrain_view();                                   // keep within the page and scrollbar
    delayBeforeButtonRepeat = (global.buttonTimerDelay*room_speed);  // wait this long before repeating automatically
}



/* count down */
delayBeforeButtonRepeat -= 1;                           // count down while button is held down
if delayBeforeButtonRepeat &lt; -1{
    delayBeforeButtonRepeat = -1;                       // don't let it get below -1
}


/* now we start moving down the page automatically */
if delayBeforeButtonRepeat == 0{

    if global.pageUpDownBasedOnViewHeight == true{      // based on view height
        view_yview[0] += view_hview[0];
    }
    else{
        view_yview[0]   = a * pageHeight;               // snap to the nearest page start (42 line increment)
        view_yview[0]  += pageHeight;                   // now move us down to the next page
    }
    constrain_view();                                   // keep within the page and scrollbar
    delayBeforeButtonRepeat = (room_speed * global.pageUpDownTimerSpeed)
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="33">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scroll the page up by 1 full view height
/* 
 * Note: it may be preferable to make this jump to the
 * beginning of a page (42 lines), so I've added a
 * variable to switch modes. The user can decide this
 * themselves.
*/


/* initiate vars */
var pageHeight  = (global.linesPerPage * global.rowHeight);
var a           = floor(view_yview[0]/pageHeight);      // find out how many pages down we are (rounded down)



/* move the page once */
if (delayBeforeButtonRepeat = -1)
{
    if (global.pageUpDownBasedOnViewHeight == true)      // if based on view height
    {
        view_yview[0] -= view_hview[0];
    }
    else
    {
        view_yview[0]   = a * pageHeight;               // snap to the nearest page start (42 line increment)
        view_yview[0]  -= pageHeight;                   // now move us up to the next page
    }
    constrain_view();                                   // keep within the page and scrollbar
    delayBeforeButtonRepeat = (global.buttonTimerDelay*room_speed);  // wait this long before repeating automatically
}



/* count down */
delayBeforeButtonRepeat -= 1;                           // count down while button is held down
if (delayBeforeButtonRepeat &lt; -1)
{
    delayBeforeButtonRepeat = -1;                       // don't let it get below -1
}


/* now we start moving down the page automatically */
if (delayBeforeButtonRepeat == 0)
{
    if (global.pageUpDownBasedOnViewHeight == true) // based on view height
    {      
        view_yview[0] -= view_hview[0];
    }
    else
    {
        view_yview[0]   = (a * pageHeight);             // snap to the nearest page start (42 line increment)
        view_yview[0]  -= pageHeight;                   // now move us up to the next page
    }
    constrain_view();                                   // keep within the page and scrollbar
    delayBeforeButtonRepeat = (room_speed * global.pageUpDownTimerSpeed)
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scroll down the page

if   (scrollbarShown)               // only do the following if there's a scrollbar on screen
and  (mouseOverDocument())
and !(keyboard_check(vk_control))
{
    // scroll
    view_yview[0] += scrollSpeed;
    constrain_view();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scroll up the page


if   (scrollbarShown)
and  (mouseOverDocument())
and !(keyboard_check(vk_control))
{
    // scroll
    view_yview[0]  -= scrollSpeed;
    
    // constrain
    //constrain_view();
    if (view_yview[0] &lt; 0) then view_yview[0] = 0;
    
    WARNINGS_MASTER.alarm[0] = 12; // update the warnings
    WARNINGS_MASTER.alarm[1] = 13; // update the visible rows for warnings
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check if scrollbar should be displayed

if (height &gt;= scrollAreaHeight) {
    scrollbarShown = false;
}
else {
    scrollbarShown = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the scroll bar
if (scrollbarShown)
{
    if (mouseOver)
    {
        draw_set_color(global.scrollbarColorDark)   // dark gray
    }
    else
    {
        draw_set_color(global.scrollbarColorLight)  // light gray
    }
    
    draw_rectangle(x+view_xview[0], y+view_yview[0], x+width+view_xview[0], y+height+view_yview[0] ,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="34">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset pageUpDownTimer

//pageUpDownTimer         = 0;
delayBeforeButtonRepeat = -1    //room_speed*global.buttonTimerDelay;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="33">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset pageUpDownTimer

//pageUpDownTimer         = 0;
delayBeforeButtonRepeat = -1    //room_speed*global.buttonTimerDelay;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
