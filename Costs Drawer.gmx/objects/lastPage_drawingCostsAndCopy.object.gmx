<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CONSTANT_ITEM</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/********************
All Item objects should work the same way so that
exporting to CSV can be done without deciphering
object types first. Therefore, we should always
inherit the create event so that every item has
a list for description lines, etc.
*********************/

event_inherited();

/********************/

countMyItemNumber   = true;             // don't increase the item counter for this item type
hasDate             = false;
title               = "Drawing costs and copy ,";
hasDescription      = false;
hasOutlay           = false;
hasProfessional     = false;
outlay              = 0;
professional        = 0;
canDelete           = false;




row = (GENERAL_INSTRUCTIONS_FEE.row + GENERAL_INSTRUCTIONS_FEE.lines);

// set target item to position ourselves after (reverse preference)
targetItem = INSTRUCTIONS_FEE_TOTAL;
if instance_exists(lastPage_postageAndSundries)  then targetItem = lastPage_postageAndSundries;


// POSITION US ON THE LIST
var list = global.LAST_PAGE_ITEMS;
var size = ds_list_size(global.LAST_PAGE_ITEMS);

for(var i=(size-1); i&gt;=0; i--)
{
    var item = ds_list_find_value(list,i);
    if (item.object_index == targetItem)
    {
        row = (item.row + item.lines);
        ds_list_insert(list,i+1,id);
        break;
    }
}



// ITEM Specific
if (global.BILL_COURT == "Highcourt")
{
    description         = "  folios at 0.17 per folio";
    shownDescription    = description;
    formatDescription(descriptionList,description,false);
    formatDescription(shownDescriptionList,shownDescription,false);
    
    costPerFolio    = real(global.costPerFolio);
    professional    = (global.folios * global.costPerFolio);
    editingFolios   = false;
    folioX          = (global.descriptionColumnX + string_width("    "));
    dFolios         = ""; // is either Folios or "ENTER"
    
    lines = 2;
}

if (global.BILL_COURT == "Circuit")
{
    description         = "";
    shownDescription    = description;
    formatDescription(descriptionList,description,false);
    formatDescription(shownDescriptionList,shownDescription,false);

    costPerFolio        = real(global.costPerFolio);
    professional        = global.CC_drawingCostsAndCopy;
    defaultProfessional = professional;
    professionalText    = formatQuantum(professional);
    hasProfessional     = true;
    editingFolios       = false;
    folioX              = (global.descriptionColumnX + string_width("    "));
    dFolios             = ""; // is either Folios or "ENTER"
    
    lines = 1;
}


// de-globalize
textMargin  = global.textMargin;


// create event
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UPDATE COMMON_ITEMS and LAST_PAGE_ITEMS lists
event_inherited();

list = global.LAST_PAGE_ITEMS;

ind = ds_list_find_index(list,id);
ds_list_delete(list,ind);

COMMON_ITEMS_CHECKER.alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create event
professionalText = formatQuantum(professional);

if (global.BILL_COURT == "Highcourt")
then lines = 2;
else lines = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// FIND ROW and DRAW THE DATA
if (in_view())
{
    // HIGH COURT
    if (global.BILL_COURT == "Highcourt")
    {
        var folios       = global.folios;
        textPosY         = getYFromRow(row+1);
        folioX           = (global.descriptionColumnX + string_width("    "));
        textPosX         = folioX;
        rowHeight        = global.rowHeight;
        descriptionX     = (textMargin + global.descriptionColumnX);    
        borderStartY     = getYFromRow(row);
        lines            = 2;//ds_list_size(descriptionList);
        borderEndY       = borderStartY + (rowHeight*lines);
        quantumPositionY = borderEndY;
        reset_text();
        
        
        // DRAW Title //
        draw_text                                       // draw_text(...
        (
            descriptionX,                               // x,
            textPosY,                                   // global.rowHeight changes with global.scale!
            title                                       // see create event for text
        );
        
        
        // DRAW Folios Number //
        if (editingFolios == false)
        {
            //draw_set_color(c_blue);
            draw_set_color(c_black);
            draw_text
            (
                folioX,
                (textPosY + global.rowHeight),
                string(folios)
            );
        }
        draw_set_color(c_black);
        
        
        // DRAW "folios at 0.17 per folio" //
        for(var i=1; i&lt;lines; i++)
        {
            draw_text                                       // draw_text(...
            (
                folioX + string_width(folios) + string_width(" "),                       // x,
                textPosY + (i*global.rowHeight),            // global.rowHeight changes with global.scale!
                ds_list_find_value(shownDescriptionList,0)  // see create event for text
            );
        }
        reset_text();
        
        
        // DRAW Professional
        if (editingProfessional == false)
        {
            draw_set_halign(fa_right);                      // align the font to the right for professional.
            if (professionalText == "")
            {
                draw_set_color(global.grayText);
                draw_text(
                    (global.hColumnX),                      // x position right side of the column
                    quantumPositionY,                       // y position
                    "0.00");
            }
            else
            {
                draw_set_color(global.quantumTextColor);
                draw_text
                    (
                        global.hColumnX,                    // x position right side of the column
                        quantumPositionY,                   // y position
                        professionalText
                    );
            }
            reset_text();
        }

        
        /// EDITING...
        if (global.selected = id)
        {
            if (editingFolios == true)
            {
                edit_folios();
            }
        }
    }
    
    
    
    
    
    // CIRCUIT COURT
    if (global.BILL_COURT == "Circuit")
    {
        var folios       = global.folios;
        textPosY         = getYFromRow(row+1);
        folioX           = (global.descriptionColumnX + string_width("    "));
        textPosX         = folioX;
        rowHeight        = global.rowHeight;
        descriptionX     = (textMargin + global.descriptionColumnX);    
        borderStartY     = getYFromRow(row);
        lines            = 1;
        borderEndY       = (borderStartY + rowHeight);
        quantumPositionY = borderEndY;
        reset_text();
        
        
        
        // DRAW Title //
        title = "Drawing costs and copy";
        draw_text                                       // draw_text(...
        (
            descriptionX,                               // x,
            textPosY,                                   // global.rowHeight changes with global.scale!
            title                                       // see create event for text
        );
        
        
        // DRAW Professional
        if (editingProfessional == false)
        {
            draw_set_halign(fa_right);                      // align the font to the right for professional.
            if (professionalText == "")
            {
                draw_set_color(global.grayText);
                draw_text(
                    (global.hColumnX),                      // x position right side of the column
                    quantumPositionY,                       // y position
                    "0.00");
            }
            else
            {
                draw_set_color(global.quantumTextColor);
                draw_text
                    (
                        global.hColumnX,                    // x position right side of the column
                        quantumPositionY,                   // y position
                        professionalText
                    );
            }
            reset_text();
        }
        
        
        mouseOverChecks();
        
        
        if (global.selected = id)
        {
            
            // HIGHLIGHT THE ITEM //
            drawBorder("item");
            
            // EDIT PROFESSIONAL //
            if (hasProfessional) then edit_professional();
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
