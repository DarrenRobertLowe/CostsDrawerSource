<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CONSTANT_ITEM</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/********************
All Item objects should work the same way so that
exporting to CSV can be done without deciphering
object types first. Therefore, we should always
inherit the create event so that every item has
a list for description lines, etc.
*********************/

event_inherited();

/********************/
hasDate             = false;
countMyItemNumber   = true;     // don't increase the item counter for this item type
hasOutlay           = false;
hasProfessional     = false;    // we can't edit this

ds_list_add(global.LAST_PAGE_ITEMS,id);


description = "V.A.T  @" +string(global.VATamount*100) +"% on professional charges";
shownDescription    = description;

formatDescription(descriptionList,description,false);
formatDescription(shownDescriptionList,shownDescription,false);

lines = 1;

var pages = (global.totalRows / global.rowsPerPage);
row = (pages*global.totalRows)+3;

alarm[0] = 1;
outlay           = 0;
outlayText       = formatQuantum(outlay);
professional     = 0;
professionalText = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CREATE EVENT
master = lastPage_SUBTOTAL;
blockParent = master;
master.blockHasChild = true;

blockList = master.blockChildList;      // add us to the master's block so we move when they do.
ds_list_add(blockList,id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// CALCULATE Totals 
professional     = (lastPage_SUBTOTAL.totalProfessional * 0.23)
professionalText = formatQuantum(professional);
    

/// FIND ROW and DRAW THE DATA    
lines = 1;
if in_view()
{
    //row = (lastPage_SUBTOTAL.row + lastPage_SUBTOTAL.lines);
    reset_text();

    textPosY = getYFromRow(row+1);                              // the Y position to be used throughout the data.
    
    var list = global.listOfTotals;
    pageNumber = getPageNumberFromRow(row)                      // ds_list_find_index(list,id);
    
    
    // DRAW Description
    draw_set_halign(fa_left);
    draw_text(                                                  // draw_text(...
        global.textMargin + global.descriptionColumnX,          // x,
        textPosY,                                               // y,
        ds_list_find_value(descriptionList,0)                   // see create event for text
        );
    reset_text();
    
    // DRAW totalProfessional
    draw_set_halign(fa_right);
    
    draw_text(
        global.hColumnX,                                        // must be global to position properly with global.scale
        textPosY,                                               // y position
        professionalText                                        // total Professional amount
        );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
