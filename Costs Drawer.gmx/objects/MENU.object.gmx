<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create menuItems list
/* NOTE: See create_GUI() for making new top-level menu
 * items like "File, View, Help, etc".
*/
menuItems = ds_list_create();
depth = -1000;

startX = x;
startY = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy Lists
if ds_exists(menuItems,ds_type_list) then ds_list_destroy(menuItems);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INTERACTION and DRAW MENU
if  (global.RESTARTING == false) // fixes issues when returning to start page
and (exists(MASTER))
{
    depth = -3000;
    var appdataFolder = (PROGRAM_APPDATA + "\");
    
    // SETUP
    var topMargin = 5; // distance between menu headers and menu items
    
    
    
    if (global.GUI_SCALE == 1)
    {
        draw_set_font(font_GUI);
        height  = global.menuTextHeight;
    }
    if (global.GUI_SCALE == 1.5)
    {
        draw_set_font(font_GUI_large);
        height  = (global.menuTextHeight * 1.5);
    }
    
    
    draw_set_valign(fa_bottom);
    var size    = ds_list_size(menuItems);
    if (size &gt; 23) then size = 23;
    
    var indent  = global.menuItemIndent;
    var margin  = global.textMargin;
    var width   = 0;
    var text    = "";
    var item    = 0;
    var maxWidth  = view_xview[0] + ( view_wview[0] - (global.right_column_width + (global.scrollbarButtonSize*2)) ) ;
    var maxHeight = view_yview[0] + ( view_hview[0] - (global.scrollbarButtonSize * 3) );
    
    x = startX;//(view_xview[0] + startX);
    y = startY;//(view_yview[0] + startY);
    
    
    
    
    // FIND THE WIDTH OF THIS MENU SECTION
    for(i=1; i&lt;size; i++)                                               // iterate through the menu
    {
        item  = ds_list_find_value(menuItems,i);                    
        
        // get the text from the string or first list item
        if !(is_string(item))                                           // if the item is a list rather than a string...
        {                                       
            text = ds_list_find_value(item,0);                          // ...use the first item of the sublist as the title.
        }
        else                                                            // if item is a string...
        {
            text = string(item);                                        // ...set the menu text to that string
        }
        
        /// limit the width
        var text2 = text;
        while ( (string_width(text2) + x + indent) &gt; maxWidth)
        {
            text2 = string_copy(text2, 1, string_length(text2)-1);
            if string_length(text2) &lt; 1 then break;
        }
        
        
        // get the width of that text
        if ((string_width(text2) + global.textMargin) &gt; width)           // if the width is wider than the rectangle area
        {
            width = (string_width(text2) + global.textMargin);           // resize the rectangle area to fit
        }
    }
    
    
    // DRAW the TITLE
    var headerY1 = (y + (global.GUI_SCALE * (10) - 10));                // changes the yposition based on the gui scale
    
    draw_set_color(global.menuTextColor);
    draw_text(x, headerY1, title);
    
    // get bounding box sizes
    var titleWidth = string_width(title);                               // var is from create event
    
    var x1 = (x -margin);
    var y1 = (headerY1 - height);
    var x2 = (x +titleWidth +margin);
    var y2 = (headerY1);
    
    
    // MOUSE HOVER AND CLICK 
    if  (mouseOverFileMenuArea(x1, y1, x2, y2))
    and (global.MOUSE_FREE == true)
    {
        // CLOSE AN OPENED MENU WHEN CLICKED
        if (global.menuSelected == id)                  // menu is open...
        {
            if (mouse_check_button_pressed(mb_left))    // user clicks the button
            {
                global.menuSelected = 0;                // closes menu
                exit;
            }
        }
        
        // DRAW BOUNDING BOX AROUND TITLE WHEN HOVERING
        draw_set_color(global.menuBorderColor);
        var ymod = ((4*global.GUI_SCALE)-4);                            // changes the yposition based on the gui scale
        draw_rectangle(x1, y1+ymod, x2, y2, true);
        
        
        // mouse click -&gt; drop down menu
        if (mouse_check_button_pressed(mb_left))
        or (global.menuSelected &gt; 0)                                    // drop down menus just by moving mouse
        {
              global.menuSelected = id;
        }
    }
    
    
    // WHEN MENU IS OPEN...
    if (global.menuSelected == id)
    {
        /// CLOSING THE MENU... ///
        if ( mouse_check_button_released(mb_left) )
        {
            if !(mouseOverMenuArea())                                   // if not clicking on menu
            {
                global.menuSelected = 0;                                // make the menu disappear
            }
        }
    
        
        ///// DRAW THE MENU /////
        draw_set_color(MASTER.guiColor);
        
        var menuHeight = ( y + (height * (size + 0.5) ) );
        if (menuHeight &gt; maxHeight) then menuHeight = maxHeight;
        
        var y1 = (headerY1);
        
        // DRAW MENU AREA RECTANGLE
        draw_rectangle(
                x - margin,                                     // x1
                y1,                                             // y1
                x + indent + width + indent,                    // x2
                menuHeight,                                     // y2
                false                                           // outline
                );
        
        // background border
        draw_set_color(MASTER.guiDividerColor);
        draw_rectangle(
                x - margin,                                     // x1
                y1,                                             // y1
                x + indent + width + indent,                    // x2
                menuHeight,                                     // y2
                true                                            // outline
                );
                
        draw_set_color(global.menuBorderColor);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        
        
        
        
        
        
        // DRAW the MENU ITEMS TEXT
        for(i=0; i&lt;size; i++)
        {
            draw_set_color(c_black);
            
            var item = ds_list_find_value(menuItems, i);        // iterate (i) through the menu 
            
            
            // if item is a list
            if !(is_string(item))                               // if it's not a string, it's a list
            {
                item = ds_list_find_value(item,0);              // get the first entry of that list
                
                draw_text(                                      // draw the first entry
                    x + indent,                                 // x
                    y + (i * height),                           // y
                    item                                        // text
                    )
            }
            
            
            //if item is = "______"
            if (is_string(item))
            {
                if (item == "break")
                {
                    if  (item == "break")                       // if item is a "_______" break...
                    {
                        item = "-";                            
                        while (string_width(item) &lt; width)      // ...make length of "_____" as wide as widest item...
                        {
                            item += "-";                        // ...and set the menu text to "_____" instead of "break"
                        }
                        
                        draw_set_color(MASTER.guiDividerColor);
                    }
                }
                
                
                // grayed out text
                if ((item == "Redo") and (ds_stack_size(global.REDO) == 0))
                or ((item == "Undo") and (ds_stack_size(global.UNDO) == 0))
                or ((item == "Zoom In") and (global.scale == 2))
                or ((item == "Zoom Out") and (global.scale == 0.5))
                  then draw_set_color(MASTER.guiDividerColor)
                
                var item2 = item;
                
                while ( (string_width(item2) + x + indent) &gt; maxWidth)
                {
                    item2 = string_copy(item2,1,string_length(item2)-1);
                    if string_length(item2) &lt; 1 then break;
                }
                
                
                var itemY = (y + topMargin + (i * height));
                if (itemY &lt; maxHeight)
                {
                    // draw the item
                    draw_text
                    (                                               // draw text
                        x + indent,                                 // x
                        itemY,                                      // y
                        item2                                       // text
                    )
                }
            }
        }
    
    
    
    
    
        //// SELECT A MENU ITEM ////
        for (i=0; i&lt;size; i++)
        {
            item = ds_list_find_value(menuItems,i);         // iterate (i) through the menu 
            
            var x1 = (x);
            var y1 = (y + topMargin) + (height*i); 
            var x2 = (x + indent + width + indent);
            var y2 = (y1 + height);
            
            
            if (mouseOverFileMenuArea(x1,y1,x2,y2))
            {
                // don't highlight these...
                if ( item == "break" )
                or ( item == "Undo" and ds_stack_size(global.UNDO) == 0 )
                or ( item == "Redo" and ds_stack_size(global.REDO) == 0 )
                or ( item == "Recent Files:")
                or ( (item == "Zoom In") and (global.scale == 2) )
                or ( (item == "Zoom Out") and (global.scale == 0.5) )
                  then exit;
                
                  
                // highlight these...
                draw_set_alpha(0.5);
                draw_set_color(global.menuHighlight);
                draw_rectangle(x1,y1,x2,y2,0);
                
                
                if (mouse_check_button_released(mb_left))
                {
                    // NEW
                    if (item == "New")
                    {
                        if (global.UNSAVED == 1)
                        {
                            if (show_question("Save before closing?"))
                            {
                                save_file();
                            }
                        }
                        new_file();
                    }
                    
                    
                    // OPEN
                    if (item == "Open...")
                    {
                        if (global.UNSAVED == 1)
                        {
                            if (show_question("Save before closing?"))
                            {
                                save_file();
                            }
                        }
                        
                        global.fileToOpen = "";
                        global.fileToOpen = get_open_filename_ext("Costs Drawing File|*.cdf", "*.cdf", global.USER_DIRECTORY, global.open_caption);
            
                        if (global.fileToOpen != "")
                        {
                            update_recent_files(global.fileToOpen);
                            load_file();
                        }
                    }
                    
                    
                    // EXIT
                    if (item == "Exit")
                    {
                        if (show_question("Are you sure you want to quit?"))
                        {
                            game_end(); // "Save Before Quit?" is asked in MASTER game_end event.
                        }
                    }   
                    
                    
                    // SAVE
                    if (item == "Save")
                    {
                        save_file();
                    }
                    
                    
                    // SAVE AS
                    if (item == "Save As...")
                    {
                        save_file_as();
                    }
                    
                    
                    // EXPORT EXCEL
                    if (item == "Export Excel")
                    {
                        export_excel_command()
                    }
                    
                    
                    // PRINT
                    if (item == "Print")
                    {
                        show_message("Note: If printing fails, please ensure your default printer is set correctly.");
                        print();
                    }
                    
                    
                    // EMAIL
                    if (item == "Email a bill for review")
                    {
                        create_email();
                    }
                    
                    
                    // UNDO
                    if (item == "Undo")
                    {
                        if (ds_stack_size(global.UNDO) &gt; 0)
                        {
                            with(MASTER)
                            {
                                var undo = ds_stack_pop(global.UNDO);   // pop it
                                analyze_undo(undo); // perform the event and push to redo.
                                set_unsaved();
                            }
                        }
                    }
                    
                    
                    // REDO
                    if (item == "Redo")
                    {
                        if (ds_stack_size(global.REDO) &gt; 0)
                        {
                            with(MASTER)
                            {
                                var redo = ds_stack_pop(global.REDO);   // pop it
                                analyze_redo(redo); // perform the event and push to redo.
                                set_unsaved();
                            }
                        }
                    }
                    
                    
                    
                    // CREATE NEW BLANK ITEM
                    /*if (item == "New Blank Item")
                    {
                        BUTTON_CreateNewItem.alarm[0] = 1;
                    }*/
                    
                    
                    if (item == "New Blank Item")
                    {
                        // CREATE AT SELECTED POSITION
                        if  ( global.selected &gt; -1 )
                        and instance_exists(global.selected )
                        {
                            if ( global.selected.object_index == USER_ITEM )
                            or ( global.selected.object_index == item_caseDetails )
                            {
                                var pos = ds_list_find_index(global.listOfItems, global.selected)
                                insert_item(USER_ITEM, pos+1);
                            }
                        }
                        
                        // ELSE CREATE AT END OF LIST (before BUTTON_CreateNewItem)
                        /*
                        if (global.selected == -1)
                         or  ( (global.selected.object_index != USER_ITEM)
                         and (global.selected.object_index != item_caseDetails) )
                        {
                            var pos = ds_list_find_index(global.listOfItems, BUTTON_CreateNewItem.id)
                            if (pos &gt; -1) then insert_item(USER_ITEM, pos);
                        }
                        */
                    }
                    
                    
                    // DELETE ITEM
                    if (item == "Delete Item")
                    {
                        if  (global.selected &gt; -1)
                        and instance_exists(global.selected)
                        and (global.selected.canDelete == true)
                        {
                        
                            if (show_question(DELETE_ITEM_MESSAGE))
                            {
                                delete_item(global.selected);
                                global.selected = -1;
                            }
                        }
                    }
                    
                    if (item == "Senior Counsel Name")
                    {
                        with(seniorCounsel)
                        {
                            var defaultName = string_replace_all(global.SENIOR_COUNSEL," S.C.","")
                            var name = (get_string("Enter Senior Counsel Name:",defaultName));
                            name     = text_remove_special_characters(name);
                        
                            if  (name != global.SENIOR_COUNSEL)
                            and (name != "")
                            {
                                global.SENIOR_COUNSEL = name;
                                if (name != "") then global.SENIOR_COUNSEL += " S.C.";
                                set_unsaved();
                                
                                // update names
                                with (ITEM) { alarm[5] = 1; }
                            }
                        }
                    }
                    
                    
                    if (item == "Junior Counsel Name")
                    {
                        with(juniorCounsel)
                        {
                            var defaultName = string_replace_all(global.JUNIOR_COUNSEL," B.L.","")
                            var name = get_string("Enter Junior Counsel Name:",defaultName);
                            name     = text_remove_special_characters(name);
                            
                            if  (name != global.JUNIOR_COUNSEL)
                            and (name != "")
                            {
                                global.JUNIOR_COUNSEL = name;
                                if (name != "") then global.JUNIOR_COUNSEL += " B.L.";
                                set_unsaved();
                                
                                // update names
                                with (ITEM) { alarm[5] = 1; } 
                            }
                        }
                    }
                    
                    
                    /// CHANGE VAT
                    if (item == "Change V.A.T. amount")
                    {
                        ask_switch_vat_amount();
                    }
                    
                    
                    /// DICTIONARY STUFF
                    if (item == "Spellcheck - Add Word")
                    {
                        spellcheck_addword("");
                    }
                    
                    if (item == "Save Dictionary")
                    {
                        save_dictionary();
                    }
                    
                    if (item == "Load Dictionary")
                    {
                        load_dictionary("");
                    }
                    
                    if (item == "Revert Dictionary")
                    {
                        var appdata = get_appdata_folder() + "\";
                        
                        load_dictionary(string(PROGRAM_APPDATA)+"\"+"dictionaries\backups")
                    }
                    
                    
                    if (item == "Edit Dictionary")
                    {
                        var fileName = (appdataFolder + "user_dictionary.txt");
                        
                        if file_exists(fileName)
                        {
                            shell_do("open",fileName);
                        }
                    }
                    
                    
                    
                    // INSERT NEW ITEM ABOVE
                    if (item == "Insert Item Above")
                    {
                        var it = global.selected;
                        var objInd = it.object_index;
                        
                        if  (global.selected &gt; -1)
                        and instance_exists(global.selected)
                        and (objInd != item_caseDetails)
                        {
                            if (object_is_ancestor(objInd,USER_ITEM))
                            or (objInd == USER_ITEM)
                            {
                                var pos = -1;
                                pos = ds_list_find_index(global.listOfItems,global.selected);
                                
                                if (pos &gt; -1)
                                {
                                    insert_item(USER_ITEM,pos)
                                }
                            }
                        }
                    }
                    
                    
                    // INSERT NEW ITEM BELOW
                    if (item == "Insert Item Below")
                    {
                        var it = global.selected;
                        var objInd = it.object_index;
                        
                        if  (global.selected &gt; -1)
                        and instance_exists(global.selected)
                        and (objInd != item_caseDetails)
                        {
                            if (object_is_ancestor(objInd,USER_ITEM))
                            or (objInd == USER_ITEM)
                            {
                                var pos = -1;
                                pos = ds_list_find_index(global.listOfItems,global.selected);
                                
                                if (pos &gt; -1)
                                {
                                    insert_item(USER_ITEM,pos+1)
                                }
                            }
                        }
                    }
                    
                    
                    // MAXIMIZE &amp; MINIMIZE
                    if (item == "Maximize")
                    {
                        var maximizeTimer = 0;  // prevents inifinite maximizing attempt when already maximized
                        while   (window_get_width()  = MASTER.old_window_width)
                        and     (window_get_height() = MASTER.old_window_height)
                        and     (maximizeTimer &lt; 100)
                        {
                            window_command_run(window_command_maximize);
                            maximizeTimer++;
                            
                            show_debug_message("maximizeTimer = "+string(maximizeTimer));
                        }
                        
                        maximizeTimer = 0;
                        show_debug_message("maximize finished.");
                    }
                    
                    
                    if (item == "Minimize")
                    {
                        while (window_get_height() &gt; 0)
                        {
                            window_command_run(window_command_minimize);
                        }
                        item = "";
                    }
                    
                    
                    // ZOOM IN &amp; OUT
                    if (item == "Zoom In")
                    {
                        zoom_in();
                    }
                    
                    if (item == "Zoom Out")
                    {
                        zoom_out();
                    }
                    
                    if (item == "Zoom Reset")
                    {
                        reset_zoom();
                    }
                    
                    
                    if (item == "Toggle Large Menu Buttons")
                    {
                        toggle_GUI_scaling();
                    }
                    
                    
                    // KEEP ON TOP
                    if (item == "Toggle Keep on Top")
                    {
                        if (global.keepWindowOnTop == true)
                          then global.keepWindowOnTop = false;
                        else global.keepWindowOnTop = true;
    
                        window_set_topmost(real(global.keepWindowOnTop));
                        item = "";
                    }
                    
                    
                    if (item == "About Costs Drawer")
                    {
                        show_message(string(PROGRAM_NAME) + "#Version " +string(GM_version) +"#© 2020.");
                    }
                    
                    if (item == "What's New in v"+string(GM_version))
                    {
                        open_whats_new();
                    }
                    
                    if (item == "Frequently Asked Questions")
                    {
                        open_FAQs();
                    }
                    
                    if (item == "YouTube Tutorials")
                    {
                        url_open(YOUTUBE);
                    }
                    
                    if (item == "Give Feedback...")
                    {
                        url_open('mailto:' +string(DEVELOPER_EMAIL));
                    }
                    
                    
                    // PREFERENCES
                    if (item == "Preferences")
                    {
                        var fileName      = (appdataFolder + "preferences.ini");
                        
                        if file_exists(fileName)
                        {
                            shell_do("open",fileName);
                            //show_message("Note: Costs Drawer should be closed before making changes to the preferences file, as Costs Drawer will overwrite any changes when closed!");
                        }
                    }
                    
                    
                    // RECENT FILES
                    fileToOpen = -1;
                    var itemCopy = string_copy(item,string_pos(":",item)+2,string_length(item));
                    
                    if exists(MASTER)
                    {
                        if (itemCopy == ds_list_find_value(MASTER.recentFiles,0)) then fileToOpen = 0;
                        if (itemCopy == ds_list_find_value(MASTER.recentFiles,1)) then fileToOpen = 1;
                        if (itemCopy == ds_list_find_value(MASTER.recentFiles,2)) then fileToOpen = 2;
                        if (itemCopy == ds_list_find_value(MASTER.recentFiles,3)) then fileToOpen = 3;
                        if (itemCopy == ds_list_find_value(MASTER.recentFiles,4)) then fileToOpen = 4;
                        if (itemCopy == ds_list_find_value(MASTER.recentFiles,5)) then fileToOpen = 5;
                        if (itemCopy == ds_list_find_value(MASTER.recentFiles,6)) then fileToOpen = 6;
                        if (itemCopy == ds_list_find_value(MASTER.recentFiles,7)) then fileToOpen = 7;
                        if (itemCopy == ds_list_find_value(MASTER.recentFiles,8)) then fileToOpen = 8;
                        if (itemCopy == ds_list_find_value(MASTER.recentFiles,9)) then fileToOpen = 9;
                    }
                    
                    // clicking on a recent file
                    if (fileToOpen &gt; -1)
                    {
                        recentFilesTimerDefault = (room_speed*5);
                        recentFilesTimer = recentFilesTimerDefault;
                        var fileFromList = ds_list_find_value(recentMenu, fileToOpen);
                        if is_undefined(fileFromList) then exit;
                        
                        if show_question("Open " + string(ds_list_find_value(recentMenu,fileToOpen)) +"?")
                        {
                            if (global.UNSAVED == 1)
                            {
                                if (show_question("Save before closing?"))
                                {
                                    save_file();
                                }
                            }
                        
                        
                        // GET AROUND SANDBOXING BY COPYING FILE TO APPDATA AS "temp"
                        // delete old temp file just in case
                        var filePath = (appdataFolder + "\temp");
                        if (file_exists(filePath))
                          then file_delete(filePath);
                        
                        
                        /* if the file exists in any directory (including program directory), we'll copy
                         * it to filePath (i.e. "temp" file in appdata folder) 
                         * So if the file existed in the root directory, it also exists now as filePath.
                         * Or if it didn't exist, filePath will remain blank.
                         */
                        file_copy_win(fileFromList, filePath); //we don't need a check because A) it won't work and B) it's a dll command
                        
                        // HOTFIX: get's around "file not found" issue when a file was saved to program directory (21-Jun-2020)
                        /* Change the below to filePath = (etc...) to copy the file as named (e.g. asdf.cdf instead of "temp")
                         * WARNING: Not advised because the original file will still exist, and when loaded will be
                         * the old version, which will then be copied over the newer edited version. What a
                         * bloody mess!
                        */
                        fileFromList = recentFiles_change_filepath_if_programDirectory(fileFromList);
                        
                        
                        // replace "temp" file if the target file is found in the appdata folder
                        if ( file_exists(fileFromList) )
                        {
                            //show_message("fileFromList exists : "+string(fileFromList));
                            //show_message("copying to : "+string(filePath));
                            file_copy_win(fileFromList, filePath);
                        }
                        
                        
                        // Waiting for file to load...
                        while !(file_exists(filePath))
                        {
                            window_set_cursor(cr_hourglass);
                            recentFilesTimer--;                                                 // wait a few seconds for the file to exist
                            
                            if (recentFilesTimer &lt;= 0) // file not found at location
                            {
                                window_set_cursor(cr_default)
                                
                                // FILE NOT FOUND
                                if (show_question("FILE NOT FOUND! Remove from list?"))
                                {
                                    // if the user chooses to remove the file from the list...
                                    ds_list_delete(recentMenu, fileToOpen);                                    // delete the list entry
                                    
                                    var filePath = (appdataFolder + "\recent_files.txt");       // find the recent_files.txt
                                    if file_exists(filePath) then file_delete(filePath);        // delete it
                                    
                                    var fileR;
                                    fileR = file_text_open_write(working_directory+"\recent_files.txt");           // create a new recent_files.txt
                                    for(var n=0; n&lt;ds_list_size(recentMenu); n++)                     // iterate through our list
                                    {
                                        var value = ds_list_find_value(recentMenu,n);
                                        file_text_write_string(fileR,value);                    // write each filePath to the recent_files.txt
                                        file_text_writeln(fileR);
                                    }
                                    file_text_close(fileR);
                                    
                                    //update_recentFiles_list(); // doesn't work.
                                }
                                
                                recentFilesTimer = recentFilesTimerDefault;
                                exit;
                            }
                        }
                        
                        
                        
                        window_set_cursor(cr_default)
                        //recentFilesTimer = recentFilesTimerDefault;
                        
                        global.fileToOpen         = filePath;
                        global.USER_FILENAME      = filePath;
                        global.recentFileSelected = fileFromList;
                        
                        update_recent_files(fileFromList);
                        //room_goto(WINDOW);
                        load_file();
                        }
                    }
                    
                    global.menuSelected = 0;
                }
            }
        }
    }
    
    
    
    reset_text();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
