<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>ITEM</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/********************
All Item objects should work the same way so that
exporting to CSV can be done without deciphering
object types first. Therefore, we should always
inherit the create event so that every item has
a list for description lines, etc.
*********************/

event_inherited();

/********************/
countMyItemNumber   = false;                  // don't increase the item counter for this item type
hasDate             = false;
showTotals          = true;
seeFeeLater         = false;
moveable            = false;
combinedList = ds_list_create();
list2 = ds_list_create();


ds_list_clear(descriptionList);
ds_list_clear(shownDescriptionList);
description      = "Forward/";        // create our description
shownDescription = description;

formatDescription(descriptionList,description,false);
formatDescription(shownDescriptionList,shownDescription,false);



totalOutlay         = 0;
totalProfessional   = 0;
ds_list_add(DOC_ORGANIZER.completeList,id);


lines = 1;

startFrom    = 0;
passedOutlay = 0;
passedProfessional = 0;

alarm[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// post-create event
y = getYFromRow(row);

// border
borderStartY  = y;                                  // this is found each step
borderEndY    = y+((lines)*global.rowHeight);       // lines+1 because the text is drawn from the top down.

// Calculate page number
pageNumber = getPageNumberFromRow(row);


with (TOTALS)
{
    alarm[0] = 1;   // fixes a bug where TOTALS showTotals sets itself to false
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// call update totals (event 0)
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Keep y position. Find page number. Find border.
// y position
//if in_view()
//{
    y = getYFromRow(row);
    
    // border
    borderStartY  = y;                                  // this is found each step
    borderEndY    = y+((lines)*global.rowHeight);       // lines+1 because the text is drawn from the top down.
    
    // Calculate page number
    pageNumber = getPageNumberFromRow(row);
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UPDATE TOTALS
window_set_cursor(cr_hourglass);

/* CALCULATE Totals */
totalOutlay         = 0;                                    // where we'll store the total totalOutlay thus far
totalProfessional   = 0;                                    // where we'll store the total totalProfessional thus far
showTotals          = true; // by default


// CREATE A COMBINED LIST OF ITEMS
var combinedList = ds_list_create();
ds_list_copy(combinedList,global.listOfItems);
var list2 = global.LAST_PAGE_ITEMS;
combine_lists(combinedList,list2)

// add up TOTALS
reorder_list(combinedList); // reorder by row number
var index = ds_list_find_index(combinedList,id);            // find our position on the list


//totalOutlay         = passedOutlay; // the outlay we've been passed from update_totals()
//totalProfessional   = passedProfessional; // the outlay we've been passed from update_totals()

// find the startIndex
/*
var startIndex      = 0;
if (startFrom &gt; 0)
{
    var listy = find_list(startFrom);
    if (listy == global.LAST_PAGE_ITEMS)
    {
        var pos = ds_list_find_index(listy,startFrom);
        startIndex = (ds_list_size(global.listOfItems) + pos);
    }
    else startIndex = ds_list_find_index(listy,startFrom);
}

*/
for(var i=0; i&lt;index; i++) //for(var i=startIndex                                // iterate through every item before ours
{
    var item = ds_list_find_value(combinedList,i);
    totalOutlay += item.outlay;                             // add together all the outlays
    totalProfessional += item.professional;                 // add together all the professionals
    outlayText = formatQuantum(totalOutlay);                // needed for xlsx
    ProfessionalText = formatQuantum(totalProfessional);    // needed for xlsx
}


// if we're after the lastPage Total, don't show us at all.
var lastTots        = lastPage_TOTAL.id;
var finalTotalsPos  = ds_list_find_index(combinedList,lastTots);

if (finalTotalsPos &lt; index)
{
    showTotals          = false;
    totalOutlay         = 0;
    totalProfessional   = 0;
    outlayText          = "";
    professionalText    = "";
}
else 
{
    showTotals = true;
}



if ( instance_exists(PAGE_NUMBER) )
{
    with(PAGE_NUMBER)
    {
        event_user(0);
        //alarm[0] = 1;                                       // update the TOTALS amounts
    }
}

seeFeeLater         = false;
description         = "Forward/";        // create our description
shownDescription    = description;


startFrom    = 0;
passedOutlay = 0;

//show_debug_message(string(id) + " just ran...");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW THE DATA

if  in_view()
and (showTotals == true)
{
    if (showTotals == true)
      then shownDescription = "Forward/";
      else shownDescription = "";
    
    /* Setup */
    reset_text();
    textPosY = getYFromRow(row+1);                          // the Y position to be used throughout the data.
    var list = global.listOfTotals;
    pageNumber = (1 + ds_list_find_index(list,id));
    
    if (global.PRINT_VIEW == false)
      then draw_set_color(global.totalsTextColor);
      else draw_set_color(c_black);
    
    /* DRAW Description */
    draw_set_halign(fa_left);
        draw_text(                                          // draw_text(...
            global.textMargin + global.descriptionColumnX,  // x,
            textPosY,                                       // y,
            shownDescription//ds_list_find_value(descriptionList,0)           // see create event for text
            );
    reset_text();
    
    
    if (global.PRINT_VIEW == false)
      then draw_set_color(global.totalsTextColor);
      else draw_set_color(c_black);
      
      
    /* DRAW totalOutlay */
    draw_set_halign(fa_right);
    
    outlayText = formatQuantum(totalOutlay);
    
    if (totalOutlay != 0)
    {
        draw_text(
            global.fColumnX,                                // x position (right side of the column)
            textPosY,                                       // y position
            outlayText,                                     // total Outlay string
            );
    }
    
    
    
    /* DRAW totalProfessional */
    draw_set_halign(fa_right);
    
    professionalText = formatQuantum(totalProfessional);
    
    if (totalProfessional != 0)
    {
        draw_text(
            global.hColumnX,                                // x position (right side of the column)
            textPosY,                                       // y position
            professionalText                                // total Professional string
            );
    }
    
    
    /// draw the borderline above
    draw_set_color(c_black);
    
    // outlay border
    yy = (y);
    xx = global.outlayColumnX;
    
    draw_line(
        global.outlayColumnX,
        yy,
        xx + (global.fColumnX - global.outlayColumnX),
        yy
        )
    
        
    // professional border
    xx = global.professionalColumnX;
    
    draw_line(
        global.professionalColumnX,
        yy,
        xx + (global.hColumnX - global.professionalColumnX),
        yy
        )
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
