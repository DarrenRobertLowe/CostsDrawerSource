<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CONSTANT_ITEM</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// INITIALIZE
event_inherited();
countMyItemNumber   = false;
hasNoFee            = true;
hasDate             = false;
hasYear             = false;
hasMonth            = false;
hasDay              = false;
instructionsFee     = false;
countMyItemNumber   = false;
hasDescription      = true;
isBlock             = true;                             // for treating item as part of a block


// FIND ROW
var list = global.LAST_PAGE_ITEMS;
var size = ds_list_size(global.LAST_PAGE_ITEMS);
hasDate             = false;
row = (lastPage_WITNESSES.row + lastPage_WITNESSES.lines);


// POSITION US ON THE LIST
var list = global.LAST_PAGE_ITEMS;
var size = ds_list_size(global.LAST_PAGE_ITEMS);

for(var i=(size-1); i&gt;=0; i--)
{
    var item = ds_list_find_value(list,i);
    
    if (item.object_index == WITNESS_FEE)
    or (item.object_index == WITNESS)
    or (item.object_index == lastPage_WITNESSES)
    {
        row = (item.row + item.lines);
        ds_list_insert(list,i+1,id);
        break;
    }
}


name                = "";
description         = "";
shownDescription    = description;

formatDescription(descriptionList,description,false);
formatDescription(shownDescriptionList,shownDescription,false);


lines               = ds_list_size(descriptionList);

italics             = global.italicsMultiplier;
interval            = (room_speed*1);
alarm[0]            = interval;
alarm[1]            = 1;        // create the first fee
alarm[3]            = 1;        // create event

// de-globalize
textMargin = global.textMargin;

// Styles
xlsx_styleID = 4;               // bold
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DESTROY SELF AND THE WITNESS_FEEs

var val = ds_list_find_index(global.LAST_PAGE_ITEMS,id);
if  (val &gt; -1) then ds_list_delete(global.LAST_PAGE_ITEMS,val);

var size = ds_list_size(feeList);
for(var i=0; i&lt;size; i++)
{
    var fee = ds_list_find_value(feeList,i);
    
    if  !(is_undefined(fee))
    and instance_exists(fee)
      then instance_destroy(fee,true);
}


/// Organize the list
DOC_ORGANIZER.startFrom = GENERAL_INSTRUCTIONS_FEE.id;
DOC_ORGANIZER.alarm[1]  = 2;


event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CREATE EVENT
ds_list_clear(nameList);
ds_list_add(nameList,name);
formatDescription(nameList,name,false);

// NOTE
// ALL WITNESS's get added to blockChildList and an exception is
// made in DOC_ORGANIZER for lastPage_WITNESSES so it only checks against
// its first blockChild. The reason is so we can delete any WITNESS and
// still maintain a block with lastPage_WITNESSES.

// make us part of lastPage_WITNESSES block
master      = find_ID(masterID);                        // set master = instance number
blockParent = lastPage_WITNESSES.id;
blockList   = lastPage_WITNESSES.blockChildList;        // add us to the master's block so we move when they do.

ds_list_add(lastPage_WITNESSES.blockChildList,id);
lastPage_WITNESSES.blockHasChild = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CREATE FEE ITEM
// NOTE: fee adds itself to our myFee list and myBlockChildren list

if (myFee == -1)    // create a fee
{
    myFee = instance_create(0,0,WITNESS_FEE); //create_item(WITNESS_FEE,row+3);
    
    myFee.row         = (row + lines);
    myFee.masterID    = myID;
    
    give_ID(myFee);   // we only do this when we're creating a new fee (as opposed to loading one)
    
    show_debug_message("**** CREATING WITNESS FEE ****");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check if we should exist

var size  = ds_list_size(global.WITNESSES);
var exist = false;

for(i=0; i&lt;size; i++)
{
    var value = ds_list_find_value(global.WITNESSES,i);
    if (value == id) then exist = true;
}

if (exist == false) then instance_destroy();
alarm[0] = interval;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Border
//borderStartY = getYFromRow(row + ds_list_size(nameList));
//borderEndY   = getYFromRow(row + ds_list_size(nameList) + ds_list_size(descriptionList));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw DATA and EDIT

    if in_view() then mouseOverChecks();
    reset_text();
    draw_set_font_scaled(font_TimesBold);
    
    
    /// DRAW NAME (nameList)
    var textPosX    = global.descriptionColumnX;
    var textPosY    = getYFromRow(row+1);
    var size        = ds_list_size(nameList);
    var rowHeight   = global.rowHeight;
    
    
    if (name == "")
    {
        draw_set_color(global.grayText);
        draw_set_font_scaled(font_TimesBold);
        draw_text(textPosX,textPosY,"Witness Name");
    }
    else
    {
        formatDescription(nameList,name,false);
        size = ds_list_size(nameList);
        
        for(var i=0; i&lt;size; i++)                                           // n because is goes after the name and we don't know how long that is.
        {
            value = ds_list_find_value(nameList,i);
            draw_set_color(global.itemTextColor);
            draw_set_font_scaled(font_TimesBold);
            draw_text(textPosX,textPosY + (i*rowHeight),value);             // e.g. John Doe
        }
    }
    
    textPosY += ( ds_list_size(nameList) *rowHeight );
    
    
    
    /// DRAW Witness Type (description)
    if (global.selected != id)
    or (selectedField != "description")
    {
        if (description == "")
        {
            draw_set_color(global.grayText);
            draw_set_font_scaled(font_TimesBold);
            draw_text(textPosX,textPosY,"Witness Type: e.g. Doctor, Actuary, etc.");
        }
        else // user has typed a description
        {
            formatDescription(descriptionList,description,false);
            var size2 = ds_list_size(descriptionList);
            
            for(var i=0; i&lt;size2; i++)
            {
                value = ds_list_find_value(descriptionList,i);
                draw_set_color(global.itemTextColor);
                draw_set_font_scaled(font_TimesBold);
                draw_text(textPosX,textPosY + (i*rowHeight),value);      // e.g. Doctor
            }
        }
    }
    

    
    
    var descSize = max(1,ds_list_size(descriptionList));
    var nameSize = max(1,ds_list_size(nameList));
    
    borderStartY = (textPosY - rowHeight);
    borderEndY   = (borderStartY + (rowHeight * descSize ));
    
    
    // EDIT
    if (global.selected = id)
    {
        reset_text();
        
        // HIGHLIGHT THE ITEM //
        drawBorder("item");
        
        edit_description(textPosY);
    }
    
    
    lines = (descSize + nameSize);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
