<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>ITEM</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INHERIT and SETUP
/********************
All Item objects should work the same way so that
exporting to CSV can be done without deciphering
object types first. Therefore, we should always
inherit the create event so that every item has
a list for description lines, etc.
*********************/

event_inherited();

/********************/
canDelete           = true;
canSplit            = true;
tempString          = "";
countMyItemNumber   = true;     // some items don't have item numbers associated as they're more descriptive than anything to be charging for
canToggleItemNumber = true;
textPosY            = y;
textPosX            = global.itemNoColumnX;
hasDate             = true;
hasYear             = true;
hasMonth            = true;
hasDay              = true;
hasDescription      = true;
hasOutlay           = true;
hasProfessional     = true;
myFee               = -1;
instructionsFee     = true;
moveable            = true;
descriptionRequired = false;

//de-globalize
textMargin = global.textMargin;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// REDO function

if ds_stack_pop(global.REDO) == "description" {

    var desc = description;
    description = oldDescription;
    oldDescription = desc;

    ds_stack_push(global.UNDO,id,"description");

    confirmDescription(oldDescription);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UNDO function

if ds_stack_pop(global.UNDO) == "description" {
    ds_stack_push(global.REDO,id,"description");    // note that description was changed on this item

    confirmDescription(oldDescription);             // overwrite description with oldDescription
}



if ds_stack_pop(global.UNDO) == "date" {
    var dat = date;
    date = oldDate;
    oldDate = dat;
    
    ds_stack_push(global.REDO,id,"description");
    
    confirmDescription(oldDescription);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (editing_item(id))
{
    global.MOUSE_FREE = false;
}

if (mouse_check_button_released(mb_left))
{
    highlightingText = false
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CONFIRM DESCRIPTION TEXT
/* Because everything uses asynchronous methods now, this event
 *  had to take over for get_string(). Async methods seem to
 *  create a map datastructure in which to save their info, so the
 *  code below deals with that. "id" "status" and "result" are all
 *  preset entries in the ds_map. "async_load" seems to be the name
 *  of the ds_map itself.
 * It's a bit convoluted compared to get_string(), but it does
 *  what we need it to do.
 *
*/
var i_d = ds_map_find_value(async_load, "id");


if i_d == description {
    if ds_map_find_value(async_load, "status") {                            // if user pressed OKAY
            confirmDescription(ds_map_find_value(async_load, "result"));    // confirm our new description
    }
    else{   // if the user pressed CANCEL
        confirmDescription(tempDescription)
    }
}



if i_d == outlay {
    if ds_map_find_value(async_load, "status") {                        // if user pressed OKAY
        confirmOutlay(ds_map_find_value(async_load, "result"));         // confirm our new outlay
    }
    else{   // if the user pressed CANCEL
        confirmOutlay(tempOutlay);                                      // revert to old outlay
    }
    
    outlayText = formatQuantum(outlay);                                 // format the string properly
    var text = string_replace_all(outlayText,",","");                   // remove digit grouping commas
    outlay = real(text);                                                // outlay is a real number
}



if i_d == professional {
    if ds_map_find_value(async_load, "status") {                        // if user pressed OKAY
        confirmProfessional(ds_map_find_value(async_load, "result"));   // confirm our new outlay
    }
    else{   // if the user pressed CANCEL
        confirmProfessional(tempProfessional);
    }
    
    professionalText = formatQuantum(professional);                     // format that string properly
    var text = string_replace_all(professionalText,",","");             // remove digit grouping commas
    professional = real(text);                                          // professional is a real number
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAWING, SELECTING ITEM FIELDS, etc.

if (in_view() == true)
or (editingDescription == true)
{
    // GENERAL SETUP //
    textPosY        = getYFromRow(row+1);                           // +1 because text is drawn from bottom up and getYFromRow returns row -1. Don't know why, but it seems to be needed.
    index           = ds_list_find_index(global.listOfItems,id);    // get our item's index
    descriptionX    = (textMargin + global.descriptionColumnX);
    
    /// OPTIMIZATION ///
    descriptionWidth = (global.descriptionTextWidth*global.scale);
    rowHeight        = global.rowHeight;
    
    // background for pre-programmed items
    draw_item_bg_color();
    
    
    /// SEE FEE LATER STUFF....
    seeFeeLaterCheck();
    updateLines(shownDescriptionList);
    
    seeFeeLaterY = (y + ((lines-1) * rowHeight));
    
    // Quantum Y position
    quantumPositionY = 
                    textPosY
                    + ((lines-2) -seeFeeLater)
                    * (rowHeight);

                    
                    
    // HIGHLIGHT
    mouseOverChecks();
    reset_text();
    
    ///////////////// DRAW THE DATA \\\\\\\\\\\\\\\\\\\

    /// DATES ///
    user_item_dates();  // DRAW and VALIDATE DATES
    
    /// Allow keyboard cursor to show dates
    if (selectedField == "none")
    {
        if exists(keyboard_CURSOR)
        {
            if (keyboard_CURSOR.selected == id)
            {
                if (keyboard_CURSOR.field == 1)
                or (keyboard_CURSOR.field == 2)
                or (keyboard_CURSOR.field == 3)
                {
                    global.datePopup = id;
                    dates_hover();
                    
                    if (keyboard_CURSOR.field == 1) then drawBorder("year");
                    if (keyboard_CURSOR.field == 2) then drawBorder("month");
                    if (keyboard_CURSOR.field == 3) then drawBorder("day");
                }
            }
        }
    }
    
    // DRAW DESCRIPTION
    if (editingDescription == false)
    {
        reset_text();
        
        if  (global.PRINT_VIEW == false)
        and (global.BLUE_TEXT == true)
          then draw_description_blue();
          else draw_description_black();
    }
    
    
    
    /* DRAW See Fee Later */
    if (editingDescription == false)                // we don't want to see it while typing UNLESS we updateLines() while typing.
    {
        seeFeeLaterCheck2();
        instructionsFee_create_destroy();
    }
    
    
    
    // OUTLAY AND PROFESSIONAL //
    // DRAW Outlay
    if  (hasOutlay)
    {
        if (editingOutlay == false)
        {
            draw_set_halign(fa_right);                      // align the font to the right for quantum.
            
            if (outlayText == "")
            {
                if (global.PRINT_VIEW == false)
                {
                    draw_set_color(global.grayText);
                    draw_text(
                        (global.fColumnX),                      // x position right side of the column
                        quantumPositionY,                       // y position
                        "0.00");
                }
            }
            else
            {
                if (global.PRINT_VIEW == false)
                {
                    draw_set_color(c_black);
                    draw_text
                    (
                        global.fColumnX,                    // x position right side of the column
                        quantumPositionY,                   // y position
                        outlayText
                    );
                }
                else // print view is on
                {
                    if (outlayText != NOQUANTUM)
                    {
                        draw_set_color(global.quantumTextColor);
                        draw_text
                        (
                            global.fColumnX,                    // x position right side of the column
                            quantumPositionY,                   // y position
                            outlayText
                        );
                    }
                }
            }
        }
    }
    reset_text();
    
    
    /* DRAW Professional */
    if (hasProfessional)
    {
        if (editingProfessional == false)
        {
            draw_set_halign(fa_right);                      // align the font to the right for professional.
            
            if (professionalText == "")
            {
                if (global.PRINT_VIEW == false)
                {
                    draw_set_color(global.grayText);
                    draw_text(
                        (global.hColumnX),                      // x position right side of the column
                        quantumPositionY,                       // y position
                        "0.00");
                }
            }
            else
            {
                if (global.PRINT_VIEW == false)
                {
                    draw_set_color(c_black);
                    draw_text
                    (
                        global.hColumnX,                    // x position right side of the column
                        quantumPositionY,                   // y position
                        professionalText
                    );
                }
                else // print view is on
                {
                    if (professionalText != NOQUANTUM)
                    {
                        draw_set_color(global.quantumTextColor);
                        draw_text
                        (
                            global.hColumnX,                    // x position right side of the column
                            quantumPositionY,                   // y position
                            professionalText
                        );
                    }
                }
            }
            reset_text();
        }
    }
    
    
    // increase lines after "see fee later" depending on number of dates visible
    if (lines &lt; dateLines)
    {
        lines = dateLines;
    }
    
    
    
    
    
    
    
    ///////////////// EDITING THE DATA \\\\\\\\\\\\\\\\\\\
    if (global.selected = id)
    {
        // HIGHLIGHT THE ITEM //
        drawBorder("item");
        
        
        ////////// Toggle Item No //////////
        toggleItemNumber();
        
        
        
        //////////  OUTLAY  ////////////
        if (hasOutlay) then edit_outlay();
        
        
        //////////  PROFESSIONAL  ////////////
        if (hasProfessional) then edit_professional();

        
        ///////////////////  EDIT DESCRIPTION  //////////////////
        if (hasDescription) then edit_description(textPosY);
    }
    
    tooltipsCheck();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
