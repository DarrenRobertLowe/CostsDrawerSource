<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CONSTANT_ITEM</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INITIALIZE
/* SEE ALSO: firstPage_Plaintiffs */
event_inherited();
countMyItemNumber   = false;
hasNoFee            = true;
hasDate             = false;
hasYear             = false;
hasMonth            = false;
hasDay              = false;
instructionsFee     = false;
countMyItemNumber   = false;
hasDescription      = true;
canDelete           = true;

description         = " ";
shownDescription    = description;

if !(ds_exists(descriptionList,ds_type_list))
then descriptionList = ds_list_create();

if !(ds_exists(shownDescriptionList,ds_type_list))
then shownDescriptionList = ds_list_create();

formatDescription(descriptionList,description,false);
formatDescription(shownDescriptionList,shownDescription,false);


lines               = ds_list_size(descriptionList);
italics             = global.italicsMultiplier;

andOthers           = false;
andOthersText       = "AND OTHERS"
showingAndText      = false;
andText             = "and";
targetObject        = -1;


// Add us to plaintiffs
var list = global.PLAINTIFFS;
ds_list_add(list,id);


// POSITION on list of items - last item has highest priority
if exists(firstPage_record_number)             then targetObject = firstPage_record_number;
if exists(firstPage_regionInfo_line1_docVer21) then targetObject = firstPage_regionInfo_line1_docVer21;     // the object we want this items to position itself under
if exists(firstPage_regionInfo_line2_docVer21) then targetObject = firstPage_regionInfo_line2_docVer21;     // the object we want this items to position itself under
if exists(firstPage_regionInfo_line3_docVer21) then targetObject = firstPage_regionInfo_line3_docVer21;     // the object we want this items to position itself under


// Add us to listOfItems
var size = ds_list_size(list);
var lastPlaintiff = ds_list_find_value(list,size-2)                             // get the plaintiff id

pos = ds_list_find_index(global.listOfItems,lastPlaintiff);                     // find that id on listOfItems


if (pos &gt; -1) // if we're NOT the first plaintiff...
{
    ds_list_insert(global.listOfItems, pos+1, id);                              // add us after the last plaintiff.
}
else // if we ARE the first plaintiff...
{
    var ind = -1;
    ind = ds_list_find_index(global.listOfItems, targetObject.id);
    if (ind &gt; -1) then ds_list_insert(global.listOfItems, ind+1, id);           // add us before the targetObject
}


// CREATE EVENT
event_user(0);
interval = 5;
alarm[1] = interval;
alarm[9] = 2; // startup confirm description


// de-globalize
textMargin = global.textMargin;

// Styles
xlsx_styleID = 4;               // bold
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

var list = global.PLAINTIFFS;
var pos = ds_list_find_index(list,id);

if (pos &gt; -1)
{
    ds_list_delete(list,pos);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Startup confirm description
// because otherwise "Plaintiffs" ends up on wrong line
confirmDescription(description);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// re-run find row
event_user(0);

alarm[1] = interval;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// format description
formatDescription(descriptionList, description, false);   // confirm description so that it gets formatted to multi-lines

lines = ds_list_size(descriptionList + showingAndText); // i.e. +1 row if true

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check if we should exist
if  (ds_list_find_index(global.PLAINTIFFS,id) == -1)
then instance_destroy(id,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// find row
var ind      = ds_list_find_index(global.listOfItems, id);
var prevItem = ds_list_find_value(global.listOfItems, ind-1);

//show_debug_message(string(id)+" says: index is "+string(ind));
//show_debug_message(string(id)+" says: prevItem is "+string(prevItem));

if ( exists(prevItem) )
{
    //show_debug_message(string(id)+" says: prevItem exists.");
    
    if (prevItem.object_index == targetObject.object_index)
    {
        //show_debug_message("YES, prevItem.objectIndex = targetObject.object_index");
        if (targetObject == firstPage_regionInfo_line1_docVer21)
        or (targetObject == firstPage_regionInfo_line2_docVer21)
        or (targetObject == firstPage_regionInfo_line3_docVer21)
          then row = (targetObject.row + 1); // after region info
          else row = (targetObject.row + 2); // after record number
    }
    else
    {
        //show_debug_message(string(id)+" says: prevItem is not the targetObject");
        row = (prevItem.row + prevItem.lines);
    }
}
//else show_debug_message(string(id)+" says: prevItem does not exist!");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw DATA and EDIT
rowHeight = global.rowHeight;

//if ( in_view() )
{
    // DELETE PLAINTIFF
    var list = global.PLAINTIFFS;
    var pos  = ds_list_find_index(list,id);
    if (pos &gt; 0)
      then canDelete = true;
      else canDelete = false;
    
    if  (canDelete == true)
    and (global.PRINT_VIEW == false)
    {
        var binY = ((borderStartY + global.rowHeight) + 4);
        draw_sprite(spr_bin, 0, (global.hColumnX + 8), binY);
        
        if ( mouseOverDocument() )
        {
            var x1 = (global.hColumnX);
            var y1 = (borderStartY + global.rowHeight);
            var x2 = (global.hColumnX + 32);
            var y2 = (borderStartY + (global.rowHeight*2));
            
            if ( mouseOverAreaAlt(x1,y1,x2,y2) )
            {
                highlightButtonArea(x1, y1, x2, y2);
                draw_sprite(spr_bin,0, x1 + 8, binY );
                drawBorder("plaintiff name");
                
                if ( mouse_check_button_pressed(mb_left) )
                {
                    if show_question("Delete plaintiff? WARNING: This action cannot be undone!")
                    {
                        delete_item(id);
                        set_unsaved();
                    }
                }
            }
        }
    }
    
    
    
    
    /// DRAW NAME (nameList)
    reset_text();
    draw_set_font_scaled(font_TimesBold);
    var textPosX        = global.descriptionColumnX;
    var textPosY        = getYFromRow(row+1);
    var ind             = ds_list_find_index(global.PLAINTIFFS,id);
    var plaintiffSize   = ds_list_size(global.PLAINTIFFS);
    
    
    // if we're not the first plaintiff
    if (ind &gt; 0)
    {
        draw_text(textPosX, textPosY, andText);
        showingAndText = true;
        textPosY += rowHeight; // add a line for "and"
    }
    
    
    // DRAW DESCRIPTION
    var size = ds_list_size(descriptionList);
    if (remove_spaces(description) == "")   // there's no plaintiff name...
    {
        draw_set_color(global.grayText);
        
        if (global.PRINT_VIEW == false) then draw_text(textPosX, textPosY, "Enter Plaintiff Name");
    }
    else // there's a Plaintiff name...
    {
        for(var i=0; i&lt;size; i++)
        {
            var value = ds_list_find_value(descriptionList,i);                  // iterate through each line of name
            draw_set_color(global.itemTextColor);
            draw_text(textPosX, textPosY + (i*rowHeight), string_upper(value)); // draw an uppercase version of name
        }
    }
    
    size = max(1, ds_list_size(descriptionList));
    textPosY += ( size * rowHeight );
    
    
    
    // MOUSE OVER DESCRIPTION
    if (global.menuSelected &lt;= 0)
    {
        if (ind == 0)
        {
            if ( mouseOverDescription() )
            {
                drawBorder("description");
                
                if ( mouse_check_button_released(mb_left) )
                {
                    global.selected = id;
                    selectedField = "description";
                    keyboard_CURSOR.field = 5;
                    cursor_update_borders();
                    getDescription();
                }
            }
        }
        else
        {
            if ( mouseOverPlaintiffName() ) // also does defendant name
            {
                drawBorder("plaintiff name");
                
                if ( mouse_check_button_released(mb_left) )
                {
                    global.selected = id;
                    selectedField = "plaintiff2";
                    keyboard_CURSOR.field = 5;
                    cursor_update_borders();
                    getDescription();
                }
            }
        }
        
        
        if (andOthers == true)
        {
            reset_text();
            draw_set_font_scaled(font_TimesBold);
            draw_text(textPosX, textPosY + rowHeight, andOthersText);
            
            // delete button for "and others"
            if (global.PRINT_VIEW == false)
            {
                var binY = ( (borderStartY+4) + (global.rowHeight*(lines + 1)) );
                draw_sprite(spr_bin, 0, global.hColumnX + 8, binY);
                
                
                if ( mouseOverDocument() )
                {
                    var x1 = (global.hColumnX);
                    var y1 = (binY - 4);
                    var x2 = (global.hColumnX + 32);
                    var y2 = (y1 + (global.rowHeight));
                    
                    if (mouseOverAreaAlt(x1,y1,x2,y2))
                    {
                        highlightButtonArea(x1, y1, x2, y2);
                        draw_sprite(spr_bin, 0, x1 + 8, binY );
                        drawBorder("and others");
                        
                        if mouse_check_button_pressed(mb_left)
                        {
                            if show_question("Delete plaintiff : 'AND OTHERS'?")
                            {
                                andOthers = false;
                                set_unsaved();
                            }
                        }
                    }
                }
            }
        }
    }
    
    
    
    /// "Add New Plaintiff" button
    // if we're the last plaintiff...
    if (global.PRINT_VIEW == false)
    {
        if ( ind == (plaintiffSize-1) )
        or ( ind == 0 and (plaintiffSize &lt;= 1) )
        {
            if  ( ind &lt; global.maxPlaintiffs )
            and ( andOthers == false )
            {
                // draw the button text...
                draw_set_color(global.highlightColor);
                draw_text(textPosX, textPosY, "++ Add New Plaintiff ++");
                
                // mouseOver()..
                var x1 = global.descriptionColumnX;
                var x2 = global.outlayColumnX;
                var y1 = (textPosY - rowHeight);
                var y2 = textPosY;
                
                
                if ( mouseOverDocumentArea(x1,y1,x2,y2) ) // same code
                {
                    if (ind == 0)
                      then drawBorder("Add Plaintiff 1");
                      else drawBorder("Add Plaintiff 2");
                    
                    // on click, create a new Plaintiff.
                    if ( mouse_check_button_released(mb_left) )
                    {
                        if ( (ind+1) &lt; global.maxPlaintiffs )
                        {
                            instance_create(x,y,PLAINTIFF);
                        }
                        else
                        {
                            andOthers = true;
                            //count_folios();
                            set_unsaved();
                        }
                    }
                }
            }
        }
    }
    
    
    
    
    // EDIT
    if (global.selected == id)
    {
        reset_text();
        
        // HIGHLIGHT THE ITEM //
        if (pos == 0)
          then drawBorder("item");
          else drawBorder("plaintiff 2");
        
        edit_description(textPosY - rowHeight);
    }
    //else
    //{
        //lines = (ds_list_size(descriptionList) + showingAndText); // i.e. +1 row if true
    //}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
