<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>ITEM</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INHERIT and SETUP
/********************
All Item objects should work the same way so that
exporting to CSV can be done without deciphering
object types first. Therefore, we should always
inherit the create event so that every item has
a list for description lines, etc.
*********************/

event_inherited();

/********************/

hasDate = false;
combinedList = ds_list_create();
list2 = ds_list_create();
countMyItemNumber = false;                      // don't increase the item counter for this item type
moveable            = false;
ds_list_clear(descriptionList);
description = "Page "+string(pageNumber)        // create our description
shownDescription    = description;

formatDescription(descriptionList,description,false);
formatDescription(shownDescriptionList,shownDescription,false);

lines = 2;
showTotals = true;
totalOutlay = 0;
totalProfessional = 0;
seeFeeLater = false;


// XLSX Settings
xlsx_styleID = 1;   // centered normal text



alarm[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// post-create event
y = getYFromRow(row)
    
// border
borderStartY  = y;                                  // this is found each step
borderEndY    = y+((lines)*global.rowHeight);       // lines+1 because the text is drawn from the top down.
    
    
/* Calculate Page Number */
pageNumber = getPageNumberFromRow(row);         // what page are we on?
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UPDATE TOTALS

if (pageNumber &gt; 1)
{
    /* CALCULATE Totals */
    totalOutlay = 0;                                                // where we'll store the total totalOutlay thus far
    totalProfessional = 0;                                          // where we'll store the total totalProfessional thus far
    showTotals          = true; // by default
    
    // CREATE A COMBINED LIST OF ITEMS
    
    ds_list_clear(combinedList);
    ds_list_clear(list2);
    
    ds_list_copy(combinedList,global.listOfItems);
    ds_list_copy(list2,global.LAST_PAGE_ITEMS);
    
    /*
    // add list 2's contents to the end of combinedList...
    var size = ds_list_size(list2);
    for(var i=0; i&lt;size; i++)
    {
        var item = ds_list_find_value(list2,i);
        ds_list_add(combinedList,item);
    }
    reorder_list(combinedList);                                     // reorder by row number
    */
    
    
    var index           = ds_list_find_index(combinedList,id);      // find our position on the list
    var lastTots        = lastPage_TOTAL.id
    var finalTotalsPos  = ds_list_find_index(combinedList,lastTots)
    
    if (row &gt; lastPage_TOTAL.row)
    //if (finalTotalsPos &lt; index)                                     // if we're after the last totals...
    {
        //showTotals  = false;                                        // DO NOT draw carry-over totals.
        totalOutlay = 0;
        totalProfessional = 0;
        outlayText  = "";
        professionalText = "";
    }
    else                                                            // if we're before the last totals...
    {
        showTotals  = true;                                         // draw carry-over totals.
        
        var list    = global.listOfItems;                           // the list
        
        var ourPos  = ds_list_find_index(list,id);                  // our position on the global.listOfItems
        var tots    = ds_list_find_value(list,ourPos-1);            // the TOTALS before us
        var name    = object_get_name(tots.object_index);
        
        if (name == "TOTALS")
        {
            totalOutlay         = tots.totalOutlay;                 // outlay
            totalProfessional   = tots.totalProfessional;           // professional
            outlayText          = formatQuantum(totalOutlay);       // used when exporting to xlsx
            professionalText    = formatQuantum(totalProfessional); // used when exporting to xlsx
        }
    }
}

seeFeeLater = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// y position and destroy circumstances
if in_view()
{
    // y position
    y = getYFromRow(row)
    
    // border
    borderStartY  = y;                                  // this is found each step
    borderEndY    = y+((lines)*global.rowHeight);       // lines+1 because the text is drawn from the top down.
    
    
    /* Calculate Page Number */
    pageNumber = getPageNumberFromRow(row);         // what page are we on?
    
    
    //var list = global.listOfTotals;
    //pageNumber = 1 + ds_list_find_index(list,id);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UPDATE TOTALS

if (pageNumber &gt; 1)
{
    /* CALCULATE Totals */
    totalOutlay = 0;                                                // where we'll store the total totalOutlay thus far
    totalProfessional = 0;                                          // where we'll store the total totalProfessional thus far
    showTotals          = true; // by default
    
    // CREATE A COMBINED LIST OF ITEMS
    
    ds_list_clear(combinedList);
    ds_list_clear(list2);
    
    ds_list_copy(combinedList,global.listOfItems);
    ds_list_copy(list2,global.LAST_PAGE_ITEMS);
    
    /*
    // add list 2's contents to the end of combinedList...
    var size = ds_list_size(list2);
    for(var i=0; i&lt;size; i++)
    {
        var item = ds_list_find_value(list2,i);
        ds_list_add(combinedList,item);
    }
    reorder_list(combinedList);                                     // reorder by row number
    */
    
    
    var index           = ds_list_find_index(combinedList,id);      // find our position on the list
    var lastTots        = lastPage_TOTAL.id
    var finalTotalsPos  = ds_list_find_index(combinedList,lastTots)
    
    if (row &gt; lastPage_TOTAL.row)
    //if (finalTotalsPos &lt; index)                                     // if we're after the last totals...
    {
        //showTotals  = false;                                        // DO NOT draw carry-over totals.
        totalOutlay = 0;
        totalProfessional = 0;
        outlayText  = "";
        professionalText = "";
    }
    else                                                            // if we're before the last totals...
    {
        showTotals  = true;                                         // draw carry-over totals.
        
        var list    = global.listOfItems;                           // the list
        
        var ourPos  = ds_list_find_index(list,id);                  // our position on the global.listOfItems
        var tots    = ds_list_find_value(list,ourPos-1);            // the TOTALS before us
        var name    = object_get_name(tots.object_index);
        
        if (name == "TOTALS")
        {
            totalOutlay         = tots.totalOutlay;                 // outlay
            totalProfessional   = tots.totalProfessional;           // professional
            outlayText          = formatQuantum(totalOutlay);       // used when exporting to xlsx
            professionalText    = formatQuantum(totalProfessional); // used when exporting to xlsx
        }
    }
}

seeFeeLater = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW the PAGE NUMBER
lines = 2;

// check if we need to say "Witnesses Expenses Continued...."
/*
if  (row &gt; lastPage_WITNESSES.row)
and (row &lt; lastPage_SUBTOTAL.row)
{
    ds_list_add(shownDescriptionList,"Witnesses Expenses Continued....", false);
    lines ++;
}
*/

/* Setup */
if ( in_view() )
{
    draw_set_font_scaled(font_Times);
    
    if (global.PRINT_VIEW == false)
      then draw_set_color(global.pageNumberTextColor);
      else draw_set_color(c_black);
    
    textPosY = getYFromRow(row+1);                                  // the Y position to be used throughout the data.
    
    textPosX  = global.descriptionColumnX
    textPosX += ((global.outlayColumnX-global.descriptionColumnX)/2)
    
    if (row &gt; lastPage_TOTAL.row) then showTotals = false
    
    
    if (showTotals == true)
    {
        /* DRAW Description */
        draw_set_halign(fa_center);
        var size = ds_list_size(shownDescriptionList);
        for (var i=0; i&lt;size; i++)
        {
            var text = ds_list_find_value(shownDescriptionList,i);
            draw_text(                                                      // draw_text(...
                textPosX,                                                   // x,
                textPosY,//+(i*global.rowHeight),                                                   // y,
                shownDescription//text                                            // see create event for text
                );                                                              // )
        }
        reset_text();
        
        if (global.PRINT_VIEW == false)
          then draw_set_color(global.pageNumberTextColor);
          else draw_set_color(c_black);
        
          
        /// DRAW THE CARRY OVER TOTALS
        /* DRAW totalOutlay */
        draw_set_halign(fa_right);
        
        if (totalOutlay != 0)
        {
            draw_text(
                global.fColumnX,                                    // x position (right side of the column)
                textPosY,                                           // y position
                formatQuantum(totalOutlay),                         // total Outlay amount
                );
        }
        
        
        /* DRAW totalProfessional */
        draw_set_halign(fa_right);
        
        if (totalProfessional != 0)
        {
            draw_text(
                global.hColumnX,                                    // x position (right side of the column)
                textPosY,                                           // y position
                formatQuantum(totalProfessional)                    // total Professional amount
                );
        }
        reset_text();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
