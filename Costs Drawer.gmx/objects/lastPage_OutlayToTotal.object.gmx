<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CONSTANT_ITEM</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/********************
All Item objects should work the same way so that
exporting to CSV can be done without deciphering
object types first. Therefore, we should always
inherit the create event so that every item has
a list for description lines, etc.
*********************/

event_inherited();

/********************/
hasDate             = false;
countMyItemNumber = false;                  // don't increase the item counter for this item type
ds_list_add(global.LAST_PAGE_ITEMS,id);

description = "";
shownDescription    = description;

formatDescription(descriptionList,description,false);
formatDescription(shownDescriptionList,shownDescription,false);

ds_list_add(descriptionList,"");
ds_list_add(shownDescriptionList,"");

lines = 2;

fColumnX        = global.fColumnX;
hColumnX        = global.hColumnX;

var pages = (global.totalRows / global.rowsPerPage);
row = (pages*global.totalRows)+3;

alarm[0] = 1;
professional = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CREATE EVENT
master = lastPage_SUBTOTAL;
blockParent = master;
master.blockHasChild = true;

blockList = master.blockChildList;      // add us to the master's block so we move when they do.
ds_list_add(blockList,id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW THE DATA
lines = 2;
if ( in_view() )
{
    reset_text();
    textPosY         = getYFromRow(row+1);
    textPosX         = global.descriptionColumnX;

    
    /* DRAW Description */
    if (global.PRINT_VIEW) == false
    {
    draw_set_color(global.grayText);
    draw_set_halign(fa_left);
    draw_text(                                                  // draw_text(...
        global.textMargin + global.descriptionColumnX,          // x,
        textPosY,                                               // y,
        "PLUS OUTLAY"                                           // see create event for text
        );
    }
    
    /* CALCULATE Totals */
    professional = (lastPage_SUBTOTAL.totalOutlay);
    professionalText = formatQuantum(professional);
    
    /* DRAW totalProfessional */
    draw_set_color(global.itemTextColor);
    draw_set_halign(fa_right);
    
    if (professional != 0)
    {
        draw_text(
            global.hColumnX,                                    // must be global to position properly with global.scale
            textPosY,                                           // y position
            professionalText                                    // total Professional amount
            );
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
