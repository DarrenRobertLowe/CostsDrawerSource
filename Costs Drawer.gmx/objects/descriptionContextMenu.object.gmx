<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>guiColor        = global.guiColor;
guiDividerColor = global.guiDividerColor;

//prevSelected = -1;

/// Define the menu items
menuItems = ds_list_create();
itemID = -1;

/// Create Menu List
ds_list_add(menuItems,          "Paste Text");
ds_list_add(menuItems,          "Add this word to dictionary");
//ds_list_add(menuItems,          "break");           // "_____________"

addWordGrayedOut = false;
pasteGrayedOut   = false;


dictionaryWordToAdd = "";

width = (string_width("Add this word to dictionary") + global.textMargin);
activated = false;
finished  = false;
close = false;

//instance_deactivate_object(descriptionContextMenu);        // don't show by default
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(menuItems);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// REPOSITION to KEYBOARD

if selectedField = "whole item" {
    x = global.rowNumberX;
    y = itemID.borderStartY;
}

if selectedField = "year" {
    x = global.dateColumnX;
    y = itemID.borderStartY;
}

if selectedField = "month" {
    x = global.dateColumnX;
    y = itemID.borderStartY + global.rowHeight;
}

if selectedField = "day" {
    x = global.dateColumnX;
    y = itemID.borderStartY + (global.rowHeight*2);
}

if selectedField = "item number" {
    x = global.itemNoColumnX;
    y = itemID.borderStartY;
}

if selectedField = "description" {
    x = global.descriptionColumnX;
    y = itemID.borderStartY;
}

if selectedField = "outlay" {
    x = global.outlayColumnX;
    y = itemID.borderStartY;
}

if selectedField = "professional" {
    x = global.professionalColumnX;
    y = itemID.borderStartY;
}


var size    = ds_list_size(menuItems);
var height  = global.menuTextHeight;
var width   = 0;


// KEEP INSIDE THE WINDOW 
var overAmount = 
    (y+ (size*height)) - window_get_height();
    
if overAmount &gt; 0 then y -= overAmount;


var overAmount = 
    (x + width) - window_get_width();
    
if overAmount &gt; 0 then x -= overAmount;


activated = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// REPOSITION to MOUSE CURSOR

x = window_mouse_get_x();                    // position it at the cursor
y = window_mouse_get_y();                    

var size    = ds_list_size(menuItems);
var height  = global.menuTextHeight;
var width   = 0;


// KEEP INSIDE THE WINDOW 
var overAmount = 
    (y+ (size*height)) - window_get_height();
    
if overAmount &gt; 0 then y -= overAmount;


var overAmount = 
    (x + width) - window_get_width();
    
if overAmount &gt; 0 then x -= overAmount;


activated = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INTERACTION and DRAW MENU

//global.selected = itemID;

if (activated == true)
{
    // WHEN MENU IS OPEN...
    if  (global.menuSelected == id)
    {
        // SETUP
        itemID = global.contextItemSelected;
        draw_set_font(font_GUI);
        draw_set_valign(fa_bottom);
        var size    = ds_list_size(menuItems);
        var indent  = global.menuItemIndent;
        var margin  = global.textMargin;
        var height  = global.menuTextHeight;
        //var width   = 0;
        var text    = "";
        var item    = 0;
        
        
        // FIND THE WIDTH
        for(i=1; i&lt;size; i++)                                               // iterate through the menu
        {
            item  = ds_list_find_value(menuItems,i);                    
            
            // get the text from the string or first list item
            if !(is_string(item))                                           // if the item is a list rather than a string...
            {
                text = ds_list_find_value(item,0);                          // ...use the first item of the sublist as the title.
            }
            else                                                            // if item is a string...
            {
                text = string(item);                                        // ...set the menu text to that string
            }
            
            // get the width of that text
            if ( (string_width(text) + global.textMargin) &gt; width)          // if the width is wider than the rectangle area
            {
                width = (string_width(text) + global.textMargin);           // resize the rectangle area to fit
            }
        }
        
        
        ///// DRAW THE MENU /////
        // SETUP AREA
        x1 = (x - margin);
        y1 = (y);
        x2 = (x + indent + width + indent);
        y2 = (y + (height * size-1));
        
        // DRAW MENU BACKGROUND
        draw_set_color(guiColor);
        draw_rectangle(x1, y1, x2, y2, false);
        
        // DRAW MENU BORDER
        draw_set_color(guiDividerColor);
        draw_rectangle(x1, y1, x2, y2, true);
        
        
        
        draw_set_color(c_black);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        
        
        
        // DRAW the MENU ITEMS TEXT
        for(i=0; i&lt;size; i++)
        {
            var item = ds_list_find_value(menuItems,i);                 // iterate (i) through the menu 
            
            // if item is a list
            if !(is_string(item))                                       // if it's not a string, it's a list
            {
                item = ds_list_find_value(item,0);                      // get the first entry of that list
            }
            
            
            // if item is = "______"
            if is_string(item) and (item == "break")           // if item is a "_______" break...
            {
                item = "_";                                         //
                while (string_width(item) &lt; width)                  // ...make length of "_____" as wide as widest item...
                {
                    item += "_";                                    // ...and set the menu text to "_____" instead of "break"
                }
            }
            
            
            // if item is a normal item
            else
            {
                if (item == "Paste Text")
                {
                    if (clipboard_has_text() = "")
                    {
                        draw_set_color(c_gray);
                        pasteGrayedOut = true;
                    }
                }
                else
                {
                    draw_set_color(c_black);
                }
                
                
                if (item == "Add this word to dictionary")
                {
                    if (dictionaryWordToAdd == "")
                    or (spellcheck(dictionaryWordToAdd) == true)
                    {
                        draw_set_color(c_gray);
                        addWordGrayedOut = true;
                    }
                }
                else
                {
                    draw_set_color(c_black);
                }
            }
            
            
            // draw the menu item
            draw_text                                           // draw text
            (
                (x + indent),                                   // x
                (y + (i * height)),                             // y
                item                                            // text
            )
        }
    
    
    
    
    
        //// SELECT A MENU ITEM ////
        for (i=0; i&lt;size; i++) 
        {
            item = ds_list_find_value(menuItems,i);         // iterate (i) through the menu 
            
            var hx1 = x;
            var hy1 = y + (height*i); 
            var hx2 = x + indent + width + indent;
            var hy2 = y + (height*i) + height;
            
            if  (item != "break")
            and (mouseOverArea(hx1,hy1,hx2,hy2))
            {
                draw_set_alpha(0.5);
                draw_set_color(c_blue);
                draw_rectangle(hx1,hy1,hx2,hy2,0);
                
                
                // ACTION SELECTED
                if (mouse_check_button_pressed(mb_left))
                {
                    global.selected = itemID; // see top of this event
                    
                    if  (item == "Paste Text")
                    and (pasteGrayedOut == false)
                    {
                        with(itemID)
                        {
                            if ( clipboard_has_text() ) then pasteText();
                            
                            // we've selected an action so close the menu
                            finished = true;
                        }
                    }
                    
                    
                    
                    if  (item == "Add this word to dictionary")
                    and (addWordGrayedOut == false)
                    {
                        //with(itemID)
                        //{
                            write_log("Adding word to dictionary : " +string(dictionaryWordToAdd) );
                            //show_message("word is "+string(dictionaryWordToAdd));
                            
                            if !(is_undefined(dictionaryWordToAdd))
                            {
                                if (dictionaryWordToAdd != "")
                                {
                                    spellcheck_addword(dictionaryWordToAdd);
                                    
                                    //show_message("itemID is "+string(itemID) +": "+string(object_get_name(itemID.object_index)));
                                    var wrongWords   = itemID.wrongWords;
                                    var checkedWords = itemID.checkedWords;
                                    
                                    
                                    var ind = ds_list_find_index(wrongWords, dictionaryWordToAdd);
                                    if (ind &gt; -1) then ds_list_delete(wrongWords, ind);
                                    ds_list_add_exclusive(checkedWords, dictionaryWordToAdd);
                                    
                                    dictionaryWordToAdd = "";
                                    
                                    // we've selected an action so close the menu
                                    finished = true;
                                }
                                else write_log("dictionaryWordToAdd is just blank. Word not added.");
                            }
                            else write_log("dictionaryWordToAdd is &lt;undefined&gt;! Word not added.");
                        //}
                    }
                } // END OF CONTEXT MENU ITEM ACTIONS
            }
        }
        
        
        
        /// CLOSE THE MENU... ///
        if mouse_check_button_pressed(mb_left)
        {
            //if !(mouseOverMenuArea())                                   // if not clicking on menu
            if !( mouseOverDocumentArea(x1,y1,x2,y2) )
            {
                finished = true;
            }
        }
    }
    
    if (finished == true)
    {
        //instance_deactivate_object(descriptionContextMenu);            // make the menu disappear
        activated = false;
        global.menuSelected = 0;
        finished = false;
    }

    reset_text();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
