<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>PARENT_rightColumnContent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create event
event_inherited();

combinedList = ds_list_create();        // global.WARNINGS and global.CAUTIONS in the same list.

rightColumnWindowHeaderHeight = 20;     // WARNINGS and ITEMS header area height
global.warningsScroll = 0;              // also used by warnings_SCROLLBAR_H how far we have scrolled horizontally through the warnings


/* Scrollbar Vars */
width               = global.scrollbarButtonSize;
buttonHeight        = global.scrollbarButtonSize;

scrollAreaStartX    = (global.rightColumnWindowsX2 - global.scrollbarButtonSize);
scrollAreaStartY    = (global.warningsWindowY1 + global.scrollbarButtonSize);
scrollAreaEndY      = (global.warningsWindowY2 - global.scrollbarButtonSize);
scrollAreaHeight    = (scrollAreaEndY - scrollAreaStartY);


scrollSpeed         = global.scrollSpeed;
minHeight           = global.scrollbarMinHeight;
mouseOver           = false;
dragging            = false;
scrollbarShown      = false;


if (global.GUI_SCALE == 1)
  then global.warnings_separation = 32;
  else global.warnings_separation = 24;
separation          = global.warnings_separation;
maxShown            = (scrollAreaHeight / separation);


charWidth           = global.estimatedCharacterWidth;

scrollAreaStartX    = global.rightColumnWindowsX1+width;
scrollAreaEndX      = global.rightColumnWindowsX2-width;
scrollAreaWidth     = (scrollAreaEndX - scrollAreaStartX);

delayBeforeButtonRepeat = -1;

size = ds_list_size(global.WARNINGS) + ds_list_size(global.CAUTIONS);

instance_create(x+width,scrollAreaEndY-buttonHeight,warnings_SCROLLBAR_H);
instance_create(x,scrollAreaStartY-buttonHeight,warnings_ScrollUp);
instance_create(x,scrollAreaEndY+1,warnings_ScrollDown);

oldItemNumber = 0;
clickTime = 0;          // used to compare the current second against the first click
doubleClickTime  = global.doubleClickTime;

// start the step event
alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// find  scrollAreaHeight
/* Note that the scroll area height doesn't take 
 * the scrollbar height into consideration. To get
 * the scrollable distance, you need to subtract
 * height from scrollAreaHeight.
*/

if (warnings_SCROLLBAR_H.scrollbarShown) // if the horizontal scrollbar is active
 then scrollAreaEndY = (global.warningsWindowY2 - (buttonHeight*2));
 else scrollAreaEndY = (global.warningsWindowY2 - buttonHeight);

scrollAreaStartY     = (global.warningsWindowY1 + buttonHeight);
scrollAreaHeight     = (scrollAreaEndY - scrollAreaStartY);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// find  scrollAreaWidth and xposition

scrollAreaStartX    = global.rightColumnWindowsX1+width;
scrollAreaEndX      = global.rightColumnWindowsX2-width;
scrollAreaWidth     = (scrollAreaEndX - scrollAreaStartX);

///find  x position

scrollAreaStartX = (global.rightColumnWindowsX2 - global.scrollbarButtonSize);
scrollAreaEndX   = (scrollAreaStartX + width);
x = scrollAreaStartX;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// size and maxShown

if (global.GUI_SCALE == 1)   then separation = 24;
if (global.GUI_SCALE == 1.5) then separation = 36;

var areaHeight      = (global.warningsWindowY2 - global.warningsWindowY1);
size                = ds_list_size(global.WARNINGS) + ds_list_size(global.CAUTIONS);
maxShown            = floor(areaHeight / separation)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// find  height  of the scroll bar itself

/* setup */
var maxHeight = scrollAreaHeight;
textHeight  = ( size * global.warnings_separation );


// the scrollbar height
height = maxHeight / (textHeight / maxHeight);  // lovely bit of math.
height = floor(height);


// constrain the height
if (height &gt; maxHeight) then height = maxHeight;
if (height &lt; minHeight) then height = minHeight;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// position the scrollbar Y to the warning number
/* This is used to position the scrollbar to the current
 * warning number position after using the scroll wheel,
 * or when resizing the window, etc.
*/

if dragging == false 
{
    // calculate the position of the scrollbar
    var scrollableDistance  = (scrollAreaHeight - height);                      // the scrollbar itself takes up an amount of the scroll area
    var adjustedTotal       = ((size - maxShown) + warnings_SCROLLBAR_H.scrollbarShown); // otherwise we get a window's worth of whitespace at the bottom of the list.
    var percentagePosition  = (global.currentWarningNumber / adjustedTotal);    // get the percentage
    
    var position            = floor(scrollableDistance * percentagePosition);   // the actual scrollbar position in pixels
    scrollbarPosition       = position;                                         // needs to be a class var for dragging
    
    y  = (scrollAreaStartY + scrollbarPosition );                               // y of the scrollbar itself
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset alarm[0]

alarm[0] = (room_speed/updateInterval);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scroll down the warnings

if mouseOverArea
(global.rightColumnWindowsX1,
global.warningsWindowY1,
global.rightColumnWindowsX2,
global.warningsWindowY2)
{
    if ( (global.currentWarningNumber + maxShown - warnings_SCROLLBAR_H.scrollbarShown) &lt; size)
    {
        global.currentWarningNumber ++;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scroll up the warnings

if mouseOverArea
(global.rightColumnWindowsX1,
global.warningsWindowY1,
global.rightColumnWindowsX2,
global.warningsWindowY2)
{
    if (global.currentWarningNumber &gt; 0)
    {
        global.currentWarningNumber --;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check if scrollbar should be displayed

if (size &gt; maxShown)
and (scrollAreaHeight &gt; 30)
{
    scrollbarShown = true;
}
else {
    scrollbarShown = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the scroll bar
if scrollbarShown
{
    if mouseOver == true
    {
        draw_set_color(global.scrollbarColorDark) // dark gray
    }
    else
    {
        draw_set_color(global.scrollbarColorLight) // light gray
    }
    
    draw_rectangle(view_xview[0]+x, view_yview[0]+y, view_xview[0]+(x+width), view_yview[0]+(y+height),0);
    
    reset_text();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// mouse hover and click events
if scrollbarShown {

    /* before dragging */
    if dragging == false {
    
        /* mouse is over the scrollbar itself */
        if mouseOverScrollbar() {
            mouseOver = true;
            
            if mouse_check_button_pressed(mb_left) {    // MOUSE CLICK ON BAR ITSELF
                dragging = true;
                mouse_pos = (window_mouse_get_y() - y);
                global.MOUSE_FREE = false;
            }
        }
        
        /* mouse is just over the scrollbar area */
        else if mouseOverScrollArea() {
            if mouse_check_button_pressed(mb_left) {    // MOUSE CLICK ON AREA
                y = window_mouse_get_y()-(height/2);    // center on the mouse
                    constrain_scrollbar();
                    global.currentWarningNumber = get_current_item_from_scrollbar(warnings_SCROLLBAR_H.scrollbarShown);
                exit;                                   // avoid running the dragging event
            }
        }
        
        /* mouse over nothing */
        else mouseOver = false;
    }
    
    
    /* while dragging */
    if dragging = true {
        y = ( window_mouse_get_y() - mouse_pos );
                    constrain_scrollbar();
                    global.currentWarningNumber = get_current_item_from_scrollbar(warnings_SCROLLBAR_H.scrollbarShown);
    }
    
    
    /* finished dragging */
    if mouse_check_button_released(mb_left) {
        dragging = false;
                    constrain_scrollbar();
                    global.currentWarningNumber = get_current_item_from_scrollbar(warnings_SCROLLBAR_H.scrollbarShown);
                    
                    global.MOUSE_FREE = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the WARNINGS list and CLICK EVENTS
/* Draws the warnings in the warnings area */

var list = global.WARNINGS;

if (size &gt; 0)
{
    //separation = global.warnings_separation;
    
    reset_text();
    
    if (global.GUI_SCALE == 1)
      then draw_set_font(font_GUI);
      else draw_set_font(font_GUI_large);
    if (global.GUI_SCALE == 1)   then separation = 24;
    if (global.GUI_SCALE == 1.5) then separation = 36;


    draw_set_halign(fa_left);
    
    var warningsHeaderY = (global.warningsWindowY1 - global.rightColumnWindowHeaderHeight);
    xx = ((global.rightColumnWindowsX1 + global.textMargin));
    
    yy = (warningsHeaderY + 40); //(global.warnings_separation*2 ));
    if (global.GUI_SCALE == 1.5) then yy += 10;
    
    var maxDrawn = (maxShown - warnings_SCROLLBAR_H.scrollbarShown);                       // how many items to draw at once
    
    area_x = xx + view_xview[0];
    area_y = yy + view_yview[0];
    
    
    if ds_exists(combinedList,ds_type_list)
    {
        ds_list_clear(combinedList);
        
        
        var cautionsStart = ds_list_size(list);
        var strLen      = 0;
        
        
        // compile warnings and cautions into a single list...
        for(var i=0; i&lt;ds_list_size(list); i++)
        {
            ds_list_add(combinedList,ds_list_find_value(list,i));
        }
        
        for(var i=0; i&lt;ds_list_size(global.CAUTIONS); i++)
        {
            ds_list_add(combinedList,ds_list_find_value(global.CAUTIONS,i));
        }
        
        
        var totalWarnings   = (ds_list_size(combinedList));
        
        
        // draw the WARNINGS
        for(i=0; i&lt;(maxDrawn); i++)
        {
            var str = ds_list_find_value(combinedList, global.currentWarningNumber+i);
            
            if !(is_undefined(str))
            {
                // find the horizontal characters
                strLen = string_length(str);
                var chars = (strLen - (warnings_SCROLLBAR_H.myScroll -1));
                
                charWidth = global.estimatedCharacterWidth;
                if (global.GUI_SCALE == 1.5) then charWidth = (global.estimatedCharacterWidth * 1.5)
                
                var maxChars = (scrollAreaWidth / charWidth);
                if (chars &gt; maxChars) then chars = maxChars;
                
                str = string_copy(str,warnings_SCROLLBAR_H.myScroll,chars);
                
                // draw "  ..." when not scrolled down the list fully
                if  ( (global.currentWarningNumber + i) &lt; (totalWarnings-1) )
                and ( i == (maxDrawn-1) )
                {
                    str = SCROLLDOWN_MESSAGE;;
                }
                
                
                
                  
                
                
                if (i &lt; totalWarnings)
                {
                    var spr;
                    
                    // draw the Warnings and Cautions
                    if ( (global.currentWarningNumber + i) &gt;= cautionsStart )
                    {
                        spr = spr_caution;
                        draw_set_color(global.cautionsTextColor);        // Orange Text
                    }
                    else
                    {
                        spr = spr_warning;
                        draw_set_color(global.errorText);                // Red Text
                    }
                    if (str == SCROLLDOWN_MESSAGE)
                    or (str == SCROLLUP_MESSAGE)
                    {
                        draw_set_color(c_black);
                    }
                    
                    var lineY = (i* separation);
                    var textX = (area_x + sprite_get_width(spr) + 5);
                    var textY = (area_y + lineY);
                    
                    if (global.GUI_SCALE == 1.5)
                    {
                        textX += 3;
                        textY += 2;
                    }
                    
                    var sprY  = (textY  - sprite_get_height(spr)) -3;
                    if (global.GUI_SCALE == 1.5) then sprY -= 3;
                    var sprX  = (area_x);
                    
                    
                    
                    if  (str != SCROLLDOWN_MESSAGE)
                    and (str != SCROLLUP_MESSAGE)
                    {
                        draw_sprite(spr,0,sprX,sprY);
                    }
                    
                    
                    draw_text(textX, textY, str);
                }
                  
                  
                
                
                
                
                
                
                
                // CLICKING (Create Item)
                if  (str != SCROLLDOWN_MESSAGE)
                and (str != SCROLLUP_MESSAGE)
                {
                    xx2 = (global.rightColumnWindowsX2 - width);
                    yy1 = (yy  + ((i-1) *separation))
                    yy2 = (yy  + ((i)   *separation))
                    
                    if (global.GUI_SCALE == 1.5) 
                    {
                        yy1 += 3;
                        yy2 += 3;
                    }
                    
                    if (doubleClickTimer &gt; 0) 
                    {
                        doubleClickTimer++;
                        
                        if (doubleClickTimer &gt;= doubleClickTime) // so timer goes to e.g. 60
                        {
                            doubleClickTimer = 0; // reset
                        }
                    }
                    
                    
                    if ( mouseOverWarning(xx, yy1, xx2, yy2) )
                    {
                        
                        highlightButtonArea(view_xview[0]+xx, view_yview[0]+yy1, view_xview[0]+xx2, view_yview[0]+yy2)
                        targetWarning = ds_list_find_value(combinedList,i+global.currentWarningNumber); // currentWarningNumber = how far we've scrolled down the warnings list
                        tooltip(targetWarning);
                        
                        
                        if (global.GUI_SCALE == 1)
                          then draw_set_font(font_GUI);
                          else draw_set_font(font_GUI_large);
                        draw_set_halign(fa_left);
                        

                        if ( mouse_check_button_released(mb_left) )
                        {
                            if (global.TIMER &lt;= (clickTime + doubleClickTime))
                            {
                                // SUCCESS
                                if ((i+global.currentItemNumber) == oldItemNumber)      // the user has clicked on the same list item twice
                                {
                                    // extract row from warning
                                    targetWarning = ds_list_find_value(combinedList,i+global.currentWarningNumber); // currentWarningNumber = how far we've scrolled down the warnings list
                                    charPos   = string_pos(":",targetWarning);      // find the position of ":"
                                    targetRow = string_copy(targetWarning,0,charPos);   // copy the string up to the ":"
                                    targetRow = string_digits(targetRow);           // remove the "Row " and " :"
                                    var targetRowReal = real(targetRow);            // conver that number to a real number
                                    
                                    // center screen on that row
                                    view_jump_to_row(targetRowReal); 
                                    clickTime = 0;
                                }
                                else
                                {
                                    oldItemNumber = (i+global.currentItemNumber); // so clicking two items on the list in quick sucession doesn't register as a double-click on the 2nd.
                                    mouse_clear(mb_left);
                                    clickTime = (get_timer() / 1000);            // needed for double clicking;
                                }
                            }
                            else
                            {
                                oldItemNumber = (i+global.currentItemNumber); // so clicking two items on the list in quick sucession doesn't register as a double-click on the 2nd.
                                mouse_clear(mb_left);
                                clickTime = (get_timer() / 1000);            // needed for double clicking;
                            }
                        }
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
