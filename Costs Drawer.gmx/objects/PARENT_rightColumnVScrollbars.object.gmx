<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>PARENT_rightColumnScrollbars</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create event
size                = ds_list_size(list);

/// maxShown
separation          = global.rightColumnItemsSeparation;
var areaHeight      = (windowY2 - windowY1 - separation);
maxShown            = floor( (areaHeight+4) / separation);


/* Scrollbar Vars */
width               = global.scrollbarButtonSize;
buttonHeight        = global.scrollbarButtonSize;


scrollAreaStartX    = (global.rightColumnWindowsX2  - global.scrollbarButtonSize);
scrollAreaStartY    = (windowY1 + width);
scrollAreaEndY      = (windowY2 - width);
scrollAreaHeight    = (scrollAreaEndY - scrollAreaStartY);

minHeight           = global.scrollbarMinHeight;
starty              = global.rightColumnItemsYPosition;

scrollAreaStartX    = (global.rightColumnWindowsX1 + width);
scrollAreaEndX      = (global.rightColumnWindowsX2 - width);
scrollAreaWidth     = (scrollAreaEndX - scrollAreaStartX);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// find scrollAreaHeight
/* Note that the scroll area height doesn't take 
 * the scrollbar height into consideration. To get
 * the scrollable distance, you need to subtract
 * height from scrollAreaHeight.
*/

if (hScrollBar.scrollbarShown) // if the horizontal scrollbar is active
 then scrollAreaEndY = (windowY2 - (buttonHeight*2));
 else scrollAreaEndY = (windowY2 - buttonHeight);

scrollAreaStartY     = (windowY1 + buttonHeight);
scrollAreaHeight     = (scrollAreaEndY - scrollAreaStartY);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// find scrollAreaWidth and xposition

scrollAreaStartX    = (global.rightColumnWindowsX1 + width);
scrollAreaEndX      = (global.rightColumnWindowsX2 - width);
scrollAreaWidth     = (scrollAreaEndX - scrollAreaStartX);

///find  x position
scrollAreaStartX    = (global.rightColumnWindowsX2 - global.scrollbarButtonSize);
scrollAreaEndX      = (scrollAreaStartX + width);
x = scrollAreaStartX;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update the list size
size = ds_list_size(list);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// maxShown
var areaHeight  = (windowY2 - (windowY1 + separation)); // + separation for "Add New Whatever"

maxShown        = floor( areaHeight / separation );

if (maxShown &lt; 1) then maxShown = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// find height of the scroll bar itself

/* setup */
var maxHeight = scrollAreaHeight;

textHeight  = ( size * separation );


// the scrollbar height
height = maxHeight / (textHeight / maxHeight);  // lovely bit of math.
height = floor(height);


// constrain the height
if (height &gt; maxHeight) then height = maxHeight;
if (height &lt; minHeight) then height = minHeight;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// position the scrollbar Y to the item number
/* This is used to position the scrollbar to the current
 * warning number position after using the scroll wheel,
 * or when resizing the window, etc.
*/

if ( dragging == false )
{
    // calculate the position of the scrollbar
    var scrollableDistance  = (scrollAreaHeight - height);                      // the scrollbar itself takes up an amount of the scroll area
    var adjustedTotal       = ((size - maxShown) + hScrollBar.scrollbarShown);  // otherwise we get a window's worth of whitespace at the bottom of the list.
    var percentagePosition  = (currentPos / adjustedTotal);                     // get the percentage
    
    var position            = floor(scrollableDistance * percentagePosition);   // the actual scrollbar position in pixels
    scrollbarPosition       = position;                                         // needs to be a class var for dragging
    
    y  = (scrollAreaStartY + scrollbarPosition );                               // y of the scrollbar itself
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check if scrollbar should be displayed

if  ( size &gt; (maxShown - hScrollBar.scrollbarShown) ) // size = list size in this case
//and (scrollAreaHeight &gt; 30) // a minimum scrollbar size
{
    scrollbarShown = true;
}
else {
    scrollbarShown = false;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset alarm[0]

alarm[0] = (room_speed / updateInterval);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// mouse hover and click events
if (scrollbarShown)
{
    // before dragging
    if (dragging == false)
    {
        // mouse is over the scrollbar itself
        if ( mouseOverScrollbar() )
        {
            mouseOver = true;
            
            if ( mouse_check_button_pressed(mb_left) )      // Mouse is clicked on the bar itself
            {
                dragging  = true;
                mouse_pos = (window_mouse_get_y() - y);
            }
        }
        
        
        // mouse is just over the scrollbar area
        else if ( mouseOverScrollArea() )
        {
            if ( mouse_check_button_pressed(mb_left) )      // Mouse is clicked on the scroll area
            {
                y = window_mouse_get_y() - (height/2);      // center scrollbar on the mouse
                constrain_scrollbar();
                currentPos = get_current_item_from_scrollbar(hScrollBar.scrollbarShown);
                
                scrollbar_globablize_currentPos();

                exit; // avoid running the dragging event
            }
        }
        
        
        // mouse is over nothing
        else
        {
            mouseOver = false;
        }
    }
    
    
    // while dragging
    if ( dragging = true )
    {
        y = ( window_mouse_get_y() - mouse_pos );
        constrain_scrollbar();
        currentPos = get_current_item_from_scrollbar(hScrollBar.scrollbarShown);
        
        scrollbar_globablize_currentPos();
    }
    
    
    // finished dragging
    if ( mouse_check_button_released(mb_left) )
    {
        currentPos = get_current_item_from_scrollbar(hScrollBar.scrollbarShown);
        
        scrollbar_globablize_currentPos();
        
        //show_debug_message("currentPos = "+string(currentPos));
        
        dragging = false;
        constrain_scrollbar();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scroll down the list

if mouseOverArea (
    global.rightColumnWindowsX1,
    windowY1,
    global.rightColumnWindowsX2,
    windowY2
)
{
    if ( (currentPos + maxShown - hScrollBar.scrollbarShown) &lt; size)
    {
        currentPos ++;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scroll up the list

if mouseOverArea (
    global.rightColumnWindowsX1,
    windowY1,
    global.rightColumnWindowsX2,
    windowY2
)
{
    if (currentPos &gt; 0)
    {
        currentPos --;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the scroll bar
if (scrollbarShown == true)
{
    if (mouseOver == true)
    {
        draw_set_color(global.scrollbarColorDark)   // dark gray
    }
    else
    {
        draw_set_color(global.scrollbarColorLight)  // light gray
    }
    
    draw_rectangle(view_xview[0]+x, view_yview[0]+y, (view_xview[0]+x + width), (view_yview[0]+y + height), 0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw list contents
rightcolumn_scrollbar_draw_content();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
