<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>USER_ITEM</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/********************
All Item objects should work the same way so that
exporting to CSV can be done without deciphering
object types first. Therefore, we should always
inherit the create event so that every item has
a list for description lines, etc.
*********************/

event_inherited();

/********************/
countMyItemNumber   = true;                  // don't increase the item counter for this item type
canDelete           = false;
canSplit            = false;
hasDate             = false;
hasYear             = false;
hasMonth            = false;
hasDay              = false;
isBlock             = true;
hasDescription      = false;
hasOutlay           = false;
hasProfessional     = false;
master              = -1;
instructionsFee     = false;
seeFeeLater         = false;

description         = "V.A.T. @ "+ string(global.VATamount * 100) +"%";;
formatDescription(descriptionList,description,false); // needed for xlsx export
formatDescription(shownDescriptionList,description,false); // needed for xlsx export
lines               = 2;


outlay              = 0;
professional        = 0;
outlayText          = formatQuantum(outlay);
professionalText    = formatQuantum(professional);


// de-globalize
textMargin  = global.textMargin;


alarm[0] = 1; // CREATE EVENT
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

var me = ds_list_find_index(global.listOfItems,id);
if (me &gt; -1)
{
    ds_list_delete(global.listOfItems,me);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CREATE EVENT

/* Thought: this sets the row upon loading, but really the row should
 * be derived from the save file? Rather than figured out on the fly?
 * But we might want it to be figured out now in case we need to change
 * how it works later... but then that would break version compatabilty
 * ...but then version compatability should only be importing older .cdf
 * files into the latest version anyway, so that's fine.
*/

master       = find_ID(masterID);
master.myVAT = id;

row = (master.row + (master.lines-1)); // "lines" is (description + 1), so -1 puts us directly after the master item.


if (ds_list_find_index(global.listOfItems,id) = -1) // don't add us if we're already there
{
    var pos = ds_list_find_index(global.listOfItems, master);
    ds_list_insert(global.listOfItems, pos+1, id);
}

blockParent = masterID;
//master.hasBlockChild = true;
//blockList = master.blockChildList;      // add us to the master's block so we move when they do.
ds_list_add(master.blockChildList,id);


DOC_ORGANIZER.alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW THE DATA
if   (master &gt; -1)
and !(instance_exists(master))
{
    instance_destroy(id,true);
}
else
{
    outlay = ((master.outlay / 100) * 23);
    
    if (in_view())
    {
        rowHeight        = global.rowHeight;
        textPosY         = getYFromRow(row+1);
        textPosX         = global.descriptionColumnX;
        descriptionX     = (textMargin + global.descriptionColumnX);    
        borderStartY     = getYFromRow(row);
        lines            = 1;                                   // ds_list_size(descriptionList);
        borderEndY       = (borderStartY + rowHeight);          // borderStartY + (rowHeight*lines);
        quantumPositionY = textPosY;                            // borderEndY;
        mouseOverChecks();
        reset_text();
        
        
        // DRAW Description
        draw_set_halign(fa_left);
        draw_text
        (
            (global.textMargin + global.descriptionColumnX),    // x,
            textPosY,                                           // y,
            description                                         // see create event for text
        );
        
        
        // DRAW outlay
        if (editingOutlay == false) 
        {   
            if (outlay &gt; 0)
            {
                draw_set_halign(fa_right);
                
                draw_text
                (
                    global.fColumnX,                            // must be global to position properly with global.scale
                    quantumPositionY,                           // y position
                    formatQuantum(outlay)                       // amount
                );
            }
            else // no outlay value
            {
                draw_set_halign(fa_right);
                if (global.PRINT_VIEW == false)
                {
                    draw_set_color(global.grayText);
                
                    draw_text
                    (
                        global.fColumnX,                            // must be global to position properly with global.scale
                        quantumPositionY,                           // y position
                        "0.00"                                      // amount
                    );
                }
            }
        }
        
        
        if (global.selected = id)
        {
            drawBorder("item");                                 // HIGHLIGHT THE ITEM
            edit_outlay();
        }
    }
}

lines = 2;

seeFeeLater = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
