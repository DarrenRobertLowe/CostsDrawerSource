<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    guiColor        = global.guiColor;
    guiDividerColor = global.guiDividerColor;
    //prevSelected = -1;
    
    /// Define the menu items
    menuItems = ds_list_create();
    itemID = -1;
        
    /// Create Menu List
    //ds_list_add(menuItems,          "Edit");            // this will depend on mouseOver
    ds_list_add(menuItems,          "Create New Item");
    ds_list_add(menuItems,          "Insert Item Above");
    ds_list_add(menuItems,          "Insert Item Below");
    
    ds_list_add(menuItems,          "break");           // "_____________"
    ds_list_add(menuItems,          "Cut Description");
    ds_list_add(menuItems,          "Copy Description");
    //ds_list_add(menuItems,          "Paste Text");
    //ds_list_add(menuItems,          "Paste Replace Description");
    //ds_list_add(menuItems,          "Paste To End Of Description");
    
    //ds_list_add(menuItems,          "break");           // "_____________"
    
    
    ds_list_add(menuItems,          "break");           // "_____________"
    ds_list_add(menuItems,          "Delete Item");
    
    //ds_list_add(menuItems,          "break");           // "_____________"
    //ds_list_add(menuItems,          "Undo");
    //ds_list_add(menuItems,          "Redo");
    
    pasteGrayedOut = false;
    cutGrayedOut   = false;
    copyGrayedOut  = false;
    
    instance_deactivate_object(itemContextMenu);        // don't show by default
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(menuItems);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// REPOSITION to KEYBOARD

if exists(global.contextItemSelected)
{
    itemID = global.contextItemSelected;
    
    if selectedField = "whole item" {
        x = global.rowNumberX;
        y = itemID.borderStartY;
    }
    
    if selectedField = "year" {
        x = global.dateColumnX;
        y = itemID.borderStartY;
    }
    
    if selectedField = "month" {
        x = global.dateColumnX;
        y = itemID.borderStartY + global.rowHeight;
    }
    
    if selectedField = "day" {
        x = global.dateColumnX;
        y = itemID.borderStartY + (global.rowHeight*2);
    }
    
    if selectedField = "item number" {
        x = global.itemNoColumnX;
        y = itemID.borderStartY;
    }
    
    if selectedField = "description" {
        x = global.descriptionColumnX;
        y = itemID.borderStartY;
    }
    
    if selectedField = "outlay" {
        x = global.outlayColumnX;
        y = itemID.borderStartY;
    }
    
    if selectedField = "professional" {
        x = global.professionalColumnX;
        y = itemID.borderStartY;
    }
    
    
    var size    = ds_list_size(menuItems);
    var height  = global.menuTextHeight;
    var width   = 0;
    
    
    // KEEP INSIDE THE WINDOW 
    var overAmount = 
        (y+ (size*height)) - window_get_height();
        
    if overAmount &gt; 0 then y -= overAmount;
    
    
    var overAmount = 
        (x + width) - window_get_width();
        
    if overAmount &gt; 0 then x -= overAmount;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// REPOSITION to MOUSE CURSOR

x = window_mouse_get_x();                    // position it at the cursor
y = window_mouse_get_y();                    

var size    = ds_list_size(menuItems);
var height  = global.menuTextHeight;
var width   = 0;


// KEEP INSIDE THE WINDOW 
var overAmount = 
    (y+ (size*height)) - window_get_height();
    
if overAmount &gt; 0 then y -= overAmount;


var overAmount = 
    (x + width) - window_get_width();
    
if overAmount &gt; 0 then x -= overAmount;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INTERACTION and DRAW MENU

//global.selected = itemID;



// WHEN MENU IS OPEN...
if (global.menuSelected == id)
{
    // SETUP
    itemID = global.contextItemSelected;
    draw_set_font(font_GUI);
    draw_set_valign(fa_bottom);
    var size    = ds_list_size(menuItems);
    var indent  = global.menuItemIndent;
    var margin  = global.textMargin;
    var height  = global.menuTextHeight;
    var width   = 0;
    var text    = "";
    var item    = "";
    
    
    
    // FIND THE WIDTH
    for(i=1; i&lt;size; i++)                                               // iterate through the menu
    {
        item  = ds_list_find_value(menuItems,i);                    
        
        // get the text from the string or first list item
        if !(is_string(item))                                           // if the item is a list rather than a string...
        {
            text = ds_list_find_value(item,0);                          // ...use the first item of the sublist as the title.
        }
        else                                                            // if item is a string...
        {
            text = string(item);                                        // ...set the menu text to that string
        }
        
        // get the width of that text
        if ( (string_width(text) + global.textMargin) &gt; width)          // if the width is wider than the rectangle area
        {
            width = (string_width(text) + global.textMargin);           // resize the rectangle area to fit
        }
    }
    
    
    /// CLOSING THE MENU... ///
    if (mouse_check_button_pressed(mb_left))
    {
        if !(mouseOverMenuArea())                                   // if not clicking on menu
        {
            instance_deactivate_object(itemContextMenu);            // make the menu disappear
            global.menuSelected = 0;
        }
    }
    
    
    ///// DRAW THE MENU /////

    // DRAW MENU BACKGROUND
    draw_set_color(guiColor);
    draw_rectangle
    (
        (x - margin),                                           // x1
        y,                                                      // y1
        (x + indent + width + indent),                          // x2
        (y + (height * size-1)),                                // y2
        false                                                   // outline
    );                                                
    
    // DRAW MENU BORDER
    draw_set_color(guiDividerColor);
    draw_rectangle
    (
        (x - margin),                                           // x1
        (y),                                                    // y1
        (x + indent + width + indent),                          // x2
        (y + (height * size-1)),                                // y2
        (true)                                                 // outline?
    );
    
    draw_set_color(c_black);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    
    
    // DRAW the MENU ITEMS TEXT
    for(i=0; i&lt;size; i++)
    {
        var item = ds_list_find_value(menuItems,i);                 // iterate (i) through the menu 
        
        // if item is a list
        if !(is_string(item))                                       // if it's not a string, it's a list
        {
            item = ds_list_find_value(item,0);                      // get the first entry of that list
        }
        
        
        // if item is = "______"
        else if is_string(item) and (item == "break")           // if item is a "_______" break...
        {
            item = "_";                                         //
            while (string_width(item) &lt; width)                  // ...make length of "_____" as wide as widest item...
            {
                item += "_";                                    // ...and set the menu text to "_____" instead of "break"
            }
        }
        
        
        // if item is a normal item
        else
        {
            /*
            if (item == "Paste")
            {
                if (itemID.editingDescription == false)
                {
                    draw_set_color(c_gray);
                    pasteGrayedOut = true;
                }
                else draw_set_color(c_black);
            }
            else draw_set_color(c_black);
            */
            
            /*
            if (item == "Add this word to dictionary")
            or (itemID.dictionaryWordToAdd != "")
            {
                if (itemID.editingDescription == false)
                {
                    draw_set_color(c_gray);
                    addWordGrayedOut = true;
                }
                else draw_set_color(c_black);
            }
            else draw_set_color(c_black);
            */
            
            
            if (item == "Cut Description")
            {
                if (itemID.editingDescription == false)
                {
                    draw_set_color(c_gray);
                    //cutGrayedOut = true;
                }
                else draw_set_color(c_black);
            }
            else draw_set_color(c_black);
            
            
            if (item == "Copy Description")
            {
                if (itemID.editingDescription == false)
                {
                    draw_set_color(c_gray);
                    //copyGrayedOut = true;
                }
                else draw_set_color(c_black);
            }
            else draw_set_color(c_black);
            
            
            if  (item == "Delete Item")
            and (itemID.canDelete == false)
              then draw_set_color(c_gray);
        }
        
        
        draw_text                                           // draw text
        (
            (x + indent),                                   // x
            (y + (i * height)),                             // y
            item                                            // text
        )
    }





    //// SELECT A MENU ITEM ////
    for (i=0; i&lt;size; i++) 
    {
        item = ds_list_find_value(menuItems,i);         // iterate (i) through the menu 
        
        var x1 = x;
        var y1 = y + (height*i); 
        var x2 = x + indent + width + indent;
        var y2 = y + (height*i) + height;
        
        if  (item != "break")
        and (mouseOverArea(x1,y1,x2,y2))
        {
            // Grayed out Delete Item
            if  (item == "Delete Item")
            and (itemID.canDelete == false)
              then exit;
             
            draw_set_alpha(0.5);
            draw_set_color(c_blue);
            draw_rectangle(x1,y1,x2,y2,0);
            
            
            // ACTION SELECTED
            if (mouse_check_button_pressed(mb_left))
            {
                global.selected = itemID; // see top of this event
                
                // EDIT Field
                if (item = "Edit")
                {
                    global.selected = itemID;
                    itemID.selectedField = selectedField;
                }
                
                
                // DELETE ITEM
                if (itemID.canDelete == true)
                {
                    if (item == "Delete Item")
                    {
                        if ( show_question(DELETE_ITEM_MESSAGE) )
                        {
                            global.selected = -1;
                            delete_item(itemID);
                            global.UNSAVED  = 0;
                        }
                    }
                }
                
                
                // CREATE NEW ITEM
                if (item == "Create New Item")
                {
                    BUTTON_CreateNewItem.alarm[0] = 1;
                }
                
                
                // INSERT NEW ITEM ABOVE
                if (item == "Insert Item Above")
                {
                    if (itemID.object_index == USER_ITEM)
                    {
                        var pos = ds_list_find_index(global.listOfItems,itemID);
                        insert_item(USER_ITEM,pos)
                    }
                    
                    if (itemID.object_index == INSTRUCTIONS_FEE_ITEM)
                    {
                        var pos = ds_list_find_index(global.LAST_PAGE_ITEMS,itemID);
                        insert_instructions_fee_item(INSTRUCTIONS_FEE_ITEM,pos)
                    }
                }
                
                
                // INSERT NEW ITEM BELOW
                if (item == "Insert Item Below")
                {
                    if (itemID.object_index == USER_ITEM)
                    {
                        var pos = ds_list_find_index(global.listOfItems,itemID);
                        insert_item(USER_ITEM,pos+1)
                    }
                    
                    if (itemID.object_index == INSTRUCTIONS_FEE_ITEM)
                    {
                        var pos = ds_list_find_index(global.LAST_PAGE_ITEMS,itemID);
                        insert_instructions_fee_item(INSTRUCTIONS_FEE_ITEM,pos+1)
                    }
                }
                
                
                
                // CUT Description Text
                if  (item == "Cut Description")
                and (cutGrayedOut == false)
                {
                        with (itemID)
                        {
                            clipboard_set_text(description);
                            description = "";
                            confirmDescription(description);
                            global.selected     = id;
                            selectedField       = "description";
                            editingDescription  = false;
                        }
                        
                        set_unsaved();
                }
                
                
                // COPY Description Text
                if  (item == "Copy Description")
                and (copyGrayedOut == false)
                {
                    with(itemID)
                    {
                        clipboard_set_text(description);
                    }
                }
                
                
                /*
                if  (item == "Paste Text")
                and (pasteGrayedOut == false)
                {
                    //show_message("itemID is "+string(itemID));
                    with(itemID)
                    {
                        var clipboard = clipboard_get_text();
                        //show_message("clipboard is :"+string(clipboard));
                        if (clipboard != "")
                        {
                            global.selected = id;
                            editingDescription  = true;
                            pasteText();
                            confirmDescription(workingString);
                        }
                    }
                }
                */
                
                
                
            } // END OF CONTEXT MENU ITEM ACTIONS

        }
    }
}




reset_text();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
