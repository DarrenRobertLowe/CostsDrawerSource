<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CONSTANT_ITEM</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/********************
All Item objects should work the same way so that
exporting to CSV can be done without deciphering
object types first. Therefore, we should always
inherit the create event so that every item has
a list for description lines, etc.
*********************/

event_inherited();

/********************/
countMyItemNumber = true;                  // don't increase the item counter for this item type
canDelete           = true;
description         = "Attending Taxation";
hasDate             = false;
shownDescription    = description;

formatDescription(descriptionList,description,false);
formatDescription(shownDescriptionList,shownDescription,false);


lines = 1;  // override lines


// set target item to position ourselves after (reverse preference)
// run the create event
alarm[0] = 1;


// ITEM Specific
hasDescription  = false;
hasOutlay       = false;
hasProfessional = true;
outlay          = 0;
professional    = global.CC_ATTENDING_TAXATION;
outlayText      = formatQuantum(outlay);
professionalText = formatQuantum(professional);

// de-globalize
textMargin  = global.textMargin;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create event
// set target item to position ourselves after (reverse preference)

    targetItem = INSTRUCTIONS_FEE_TOTAL;
    if instance_exists(lastPage_postageAndSundries)  then targetItem = lastPage_postageAndSundries;
    if instance_exists(lastPage_drawingCostsAndCopy) then targetItem = lastPage_drawingCostsAndCopy;
    if instance_exists(lastPage_CC_summonsToTax)      then targetItem = lastPage_CC_summonsToTax;
    if instance_exists(lastPage_CC_stampThereon)        then targetItem = lastPage_CC_stampThereon;


var list = global.LAST_PAGE_ITEMS;
var size = ds_list_size(global.LAST_PAGE_ITEMS);

for(var i=0; i&lt;size; i++)
{
    var item = ds_list_find_value(list,i);
     
    if (item.object_index == targetItem)
    {
        row = (item.row + item.lines);
        ds_list_insert(list,i+1,id);
        i = size;
    }
}


lines = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW THE DATA
lines = 1;

if in_view()
{
    rowHeight        = global.rowHeight;
    textPosY         = getYFromRow(row+1);
    textPosX         = global.descriptionColumnX;
    descriptionX     = (textMargin + global.descriptionColumnX);    
    borderStartY     = getYFromRow(row);
    borderEndY       = borderStartY + (rowHeight*lines);
    quantumPositionY = borderEndY;
    mouseOverChecks();
    reset_text();
    
        // DRAW Description //
        draw_set_halign(fa_left);
        draw_text(                                      // draw_text(...
            descriptionX,                               // x,
            textPosY,                                   // y,
            description                                 // see create event for text
            );
        
        if (editingProfessional == false) 
        {   
            //mouseOverChecks();
            
            // DRAW professional
            if (professional &gt; 0)
            {
                draw_set_halign(fa_right);
            
                draw_text(
                    global.hColumnX,                        // must be global to position properly with global.scale
                    textPosY,                               // y position
                    formatQuantum(professional)             // amount
                    );
            }
            else
            {
                draw_set_halign(fa_right);
                draw_set_color(global.grayText);
            
                draw_text(
                    global.hColumnX,                        // must be global to position properly with global.scale
                    textPosY,                               // y position
                    "0.00"                                  // amount
                    );
            }
        }
    
    //mouseOverChecks();
    if (global.selected = id)
    {
        drawBorder("item");                         // HIGHLIGHT THE ITEM
        edit_professional();
    }
    
    lines = 1;  // override lines
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
