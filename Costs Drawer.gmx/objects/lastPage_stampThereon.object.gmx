<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CONSTANT_ITEM</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/********************
All Item objects should work the same way so that
exporting to CSV can be done without deciphering
object types first. Therefore, we should always
inherit the create event so that every item has
a list for description lines, etc.
*********************/

event_inherited();

/********************/
createEventRan      = false;
countMyItemNumber   = true;                  // don't increase the item counter for this item type
hasDate             = false;
description = "Stamp thereon";
shownDescription    = description;

formatDescription(descriptionList,description,false);
formatDescription(shownDescriptionList,shownDescription,false);
//ds_list_add(descriptionList,"Stamp thereon");
lines = 1;

alarm[0] = 1; // CREATE EVENT

hasDescription   = false;
hasOutlay        = true;
hasProfessional  = false;

outlay           = global.APPENDIX_W_HC_StampOnSummonsToTax;
professional     = 0;
outlayText       = formatQuantum(outlay);
professionalText = formatQuantum(professional);

// de-globalize
textMargin  = global.textMargin;

master = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CREATE EVENT
//if (global.fileToOpen != "")
//{
    master = find_ID(masterID);
    master.stamp = id;
//}

var pos = ds_list_find_index(global.LAST_PAGE_ITEMS, master);
ds_list_insert(global.LAST_PAGE_ITEMS, pos+1, id);


//DOC_ORGANIZER.alarm[0] = 2;
createEventRan = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW THE DATA
if (createEventRan == true)
{
    if   (master &gt; -1) and  !(instance_exists(master))
     then instance_destroy(id,true);
    
    else
    {
        if (in_view())
        {
            rowHeight        = global.rowHeight;
            textPosY         = getYFromRow(row+1);
            textPosX         = global.descriptionColumnX;
            descriptionX     = (textMargin + global.descriptionColumnX);    
            borderStartY     = getYFromRow(row);
            lines            = 1;                                   // ds_list_size(descriptionList);
            borderEndY       = (borderStartY + rowHeight);          // borderStartY + (rowHeight*lines);
            quantumPositionY = textPosY;                            // borderEndY;
            mouseOverChecks();
            reset_text();
            
            
            // DRAW Description
            draw_set_halign(fa_left);
            draw_text(                                              // draw_text(...
                (global.textMargin + global.descriptionColumnX),    // x,
                textPosY,                                           // y,
                description                                         // see create event for text
                );
                
                // DRAW outlay
                if (editingOutlay == false) 
                {   
                    if (outlay &gt; 0)
                    {
                        draw_set_halign(fa_right);
                    
                        draw_text(
                            global.fColumnX,                        // must be global to position properly with global.scale
                            quantumPositionY,                       // y position
                            formatQuantum(outlay)                   // amount
                            );
                    }
                    else // no outlay value
                    {
                        draw_set_halign(fa_right);
                        draw_set_color(global.grayText);
                        
                        draw_text(
                            global.fColumnX,                        // must be global to position properly with global.scale
                            quantumPositionY,                       // y position
                            "0.00"                                  // amount
                            );
                    }
                }
            
            
            if (global.selected = id)
            {
                drawBorder("item");                                 // HIGHLIGHT THE ITEM
                edit_outlay();
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
